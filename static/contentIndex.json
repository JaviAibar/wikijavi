{"Otros/Git/0---Git-Index":{"title":"0 - Git Index","links":["Otros/Git/1---Configurar-push-por-defecto","Otros/Git/2---git-checkout","Otros/Git/3---git-HEAD","Otros/Git/4---Working-tree","Otros/Git/5---Añadir-gitignore-tarde","Otros/Git/6---Moverse-por-git","Otros/Git/7---Tratamiento-de-ramas","Otros/Git/8---Mostrar-el-grafo-de-commits","Otros/Git/9---git-merge","Otros/Git/Tengo-un-problema-con-Git/","Otros/Git/Tengo-un-problema-con-Git/Deshacer-los-cambios","Otros/Git/Tengo-un-problema-con-Git/Deshacer-ultimo-commit-local","Otros/Git/Tengo-un-problema-con-Git/git-filter-branch-filter-repo---Borrar-archivo-historia-git-(git-filter-branch)","Otros/Git/Tengo-un-problema-con-Git/Mover-cambios-a-otra-rama","Otros/Git/Tengo-un-problema-con-Git/Resolver-conflictos","Otros/Git/Tengo-un-problema-con-Git/Revertir-cambios","Otros/Git/Tengo-un-problema-con-Git/Tener-dos-cuentas-de-Github","Otros/Git/Tengo-un-problema-con-Git/Transferir-commits-de-una-cuenta-Github","Otros/Git/git-rebase","Otros/Git/rebase-interactivo","Otros/Git/git-cherry-pick","Otros/Git/Añadir-carpetas-al-gitignore-con-TortoiseGit","Otros/Git/Gitlab","Otros/Git/CI-CD/GitLab-Implementación-de-CI-CD","tags/WIP"],"tags":["WIP"],"content":"1 - git push - Configurar push por defecto\n rama\n3 - git HEAD - Posición actual\n4 - Working tree\n5 - Añadir gitignore tarde\n6 - Moverse por git - Movimientos relativos\n7 - Tratamiento de ramas\n8 - git log - Mostrar el grafo de commits\n ramas\nTengo un problema con Git\nDeshacer los cambios\ngit reset - Deshacer último commit local\ngit filter-branch filter-repo - Borrar archivo historia git (git filter-branch)\nCambios en rama incorrecta: Mover cambios a otra rama\nResolver conflictos\ngit reset &amp; git revert - Revertir cambios git\nTener dos cuentas de Github\nTransferir commits de una cuenta Github\n los convierte en secuenciales\nrebase interactivo - reordena commits\ngit cherry-pick - Mover estos commits aquí\nAñadir carpetas al gitignore con TortoiseGit\nTener dos cuentas de Github\nTransferir commits de una cuenta Github\nGitlab\nCI-CD en Gitlab\nGitLab Implementación de CI-CD\nWIP"},"Otros/Git/1---Configurar-push-por-defecto":{"title":"1 - Configurar push por defecto","links":[],"tags":[],"content":"Con la sentencia git push -u origin master"},"Otros/Git/2---git-checkout":{"title":"2 - git checkout","links":["recomendado"],"tags":[],"content":"Este comando carga un commit concreto, en caso de no haber guardado los cambios actuales, los sobreescribirá\nDe hecho, es una forma muy común de revertir cambios\npara cambiar se usa el argumento -b como se explica mejor en la página de [7 - Tratamiento de ramas]"},"Otros/Git/3---git-HEAD":{"title":"3 - git HEAD","links":["Otros/Git/2---git-checkout"],"tags":[],"content":"Es un alias para el commit sobre el que estamos actualmente (el que hemos hecho checkout), dicho de otra forma, el commit a partir del que estás trabajando\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngit checkout C1; git checkout main; git commit, git checkout C2"},"Otros/Git/4---Working-tree":{"title":"4 - Working tree","links":[],"tags":[],"content":"Se trata del directorio, subdirectorio y archivos del sistema de archivos que están asociados a un repositorio"},"Otros/Git/5---Añadir-gitignore-tarde":{"title":"5 - Añadir gitignore tarde","links":[],"tags":[],"content":"Con esta sola línea git rm -r --cached . &amp;&amp; git add . &amp;&amp; git commit -am &quot;Remove ignored files&quot;\n\n\n                  \n                  ¿Cómo funciona? \n                  \n                \n\nPrimero deja de trackear TODOS los archivos, luego trackea aquellos que no estén en el gitignore y por último crea el commit sin los archivos"},"Otros/Git/6---Moverse-por-git":{"title":"6 - Moverse por git","links":["Otros/Git/2---git-checkout"],"tags":[],"content":"Puedes hacer checkout a un commit usando el hash. pero también puedes utilizar solo parte del hash, lo suficiente para que sea unívoco\nejemplo\nSi el commit tiene un hash como f2delkfnalk3k2jbtpi239t23b\npodríamos identificarlo como f2de, por ejemplo\nPara el movimiento relativo, podemos situarnos en un commit en concreto como HEAD o bugFix y hacer:\n\nMoverse un commit hacia atrás con ^\nMoverse una cantidad de commits hacia atrás con ~&lt;num&gt;\n\nEjemplos\nmain^\nmain^^\nPara forzar / mover a que una rama esté en un punto específico.\n\n\n                  \n                  IMPORTANTE \n                  \n                \n\npara que funcione debes estar en una rama diferente de la que quieres mover\n\n\ngit checkout &lt;otra-rama&gt; \ngit branch -f &lt;rama&gt; HEAD~3"},"Otros/Git/7---Tratamiento-de-ramas":{"title":"7 - Tratamiento de ramas","links":[],"tags":[],"content":" git checkout -b &lt;nombre rama&gt; \n\natajo\ngit branch &lt;rama&gt; git checkout &lt;rama&gt; Crea la nueva rama y cambia a ella\ngit branch -d &lt;nombre rama&gt; BORRA la rama\nPara hacer merge nos tenemos que imaginar que estiramos de la otra rama: Queremos que master tenga la info de &lt;rama&gt; pues nos ponemos en master y estiramos git merge &lt;rama&gt;\nDespues, si queremos seguir trabajando en la rama y que esté actualizada, tenemos que volver a la rama, para tomar lo que hay en mastes"},"Otros/Git/8---Mostrar-el-grafo-de-commits":{"title":"8 - Mostrar el grafo de commits","links":[],"tags":[],"content":"Mediante comando\ngit log --all --decorate --oneline --graph\nmediante TortoiseGit:\nBotón derecho &gt; TortoiseGit &gt; Show log\n\n\n                  \n                  Muy importante \n                  \n                \n\nActivar el check “Todas las ramas”, sino, te mostrará solo la actual (por defecto)\n\n\n"},"Otros/Git/9---git-merge":{"title":"9 - git merge","links":[],"tags":[],"content":"git merge combina los cambios de una rama con los de otra\nSi haces git merge bugFix estarás integrando los cambios de bugFix a la rama actual"},"Otros/Git/Añadir-carpetas-al-gitignore-con-TortoiseGit":{"title":"Añadir carpetas al gitignore con TortoiseGit","links":[],"tags":[],"content":"\nPor defecto\n\nSí\n"},"Otros/Git/CI-CD/GitLab-Implementación-de-CI-CD":{"title":"GitLab Implementación de CI-CD","links":[],"tags":[],"content":"Creación de archivo .gitlab-ci.yml \nRevisar que tengas disponibles Runners en Settings &gt; CI/CD y dentro Runners. Si no lo estuvieran, podrías instalar uno en tu PC se explica más abajo.\nSi usas los propios de GitLab.\nCon que haya 1 es sufi, y tenemos 58\n\n\nCrear un archivo llamado .gitlab-ci.yml en la raíz del repositorio. Si prefieres ponerlo en otro sitio, deberás indicar la ubicación en Setting &gt; CI/CD [Expandir General pipelines] &gt; CI/CD configuration file. Este archivo contendrá la estructura y orden de las tareas y decisiones en base a condiciones que se encuentre.\n\nbuild-job:\n  stage: build\n  script:\n    - echo &quot;Hello, $GITLAB_USER_LOGIN!&quot;\n \ntest-job1:\n  stage: test\n  script:\n    - echo &quot;This job tests something&quot;\n \ntest-job2:\n  stage: test\n  script:\n    - echo &quot;This job tests something, but takes more time than test-job1.&quot;\n    - echo &quot;After the echo commands complete, it runs the sleep command for 20 seconds&quot;\n    - echo &quot;which simulates a test that runs 20 seconds longer than test-job1&quot;\n    - sleep 20\n \ndeploy-prod:\n  stage: deploy\n  script:\n    - echo &quot;This job deploys something from the $CI_COMMIT_BRANCH branch.&quot;\n  environment: production\nContenido base de .gitlab-ci.yml\nAquí se pueden ver 4 tareas (jobs): build-job, test-job, test-job2 y deploy-prod.\nLos comentarios están listados en los comandos echo y se mostrarán en la interfaz cuando veas tus trabajos. Los valores de las variables predefinidas $GITLAB_USER_LOGIN y $CI_COMMIT_BRANCH se inicializan cuando se ejecutan las tareas\nPor último hacemos commit del archivo .gitlab-ci.yml. Y creo que en este momento, las tareas se ejecutan automáticamente\nEn CI/CD &gt; Pipelines puedes ver el estado de las tareas\n\nSi pinchas en el id puedes ver una representación visual\n\nPara detalles, pulsa en la tarea en concreto, p.e. deploy-prod\n\nInstalación de Runner\nGitlabRunner (executable)\nCrea una carpeta en algún sitio. Ejemplo GitlabRunner\nMete dentro el instalable\nSe supone que ahora le tienes que quitar los permisos de escritura a la carpeta para que no te la líen y debes instalar el GitlabRunner en una máquina diferente a la que tienes el Gitlab instance. Ni idea\nConseguir un token\nAhora tienes que ir a CI/CD &gt; Runners y crear una instancia de Runner. Seleccionar Windows, ponerle etiquetas y seleccionar que puede ejecutar tareas sin etiquetar\n\n\nEsto te generará un token y los comandos que deberás ejecutar para la siguiente fase: registrarlo\n\nRegistrar Runner\nNos situamos en la carpeta donde tenemos el GitlabRunner y ejecutamos el comando obtenido en parte anterior: .\\gitlab-runner.exe register  --url gitlab.com  --token &lt;token&gt; en una consola con permisos. Cuando nos pida URL ponemos la de por defecto gitlab. Cuando nos pida nombre, nos inventamos uno y cuando nos pida el executor, le decimos shell.\nAbrimos el archivo que nos acaba de generar: config.toml y cambiamos shell = &quot;pwsh&quot; por shell = &quot;powershell&quot;\nEjecutamos .\\gitlab-runner.exe install y .\\gitlab-runner.exe start (install es para que ponga el servidor como servicio en windows, el start para que lo inicie)\nVolvemos a CI/CD &gt; Runners y desactivamos los Shared runners, ya que si no lo hacemos seguirá pidiéndonos verificación\nConsejos sobre cómo escribir el .gitlab-ci.yml \nSintaxis completa aquí\nHay un editor en CI/CD &gt; Editor\nCada tarea contiene una sección script y le pertenece una etapa:\n\n\nLa etapa describe la ejecución secuencial de los trabajos. Si hay runners disponibles, los trabajos de una única etapa, se ejecutan en paralelo.\n\n\nSe puede usar la palabra reservada needs para  ejecutar una tarea fuera de orden. Esto genera un Grafo Dirigido Acíclico (DAG)\n\n\nTambién añadir configuración para personalizar como se ejecutan las tareas y etapas:\n\n\nLa palabra reservada rules especifica cuando ejecutar o saltar tareas. Las only y except todavía están disponibles pero no se pueden usar con rules en la misma tarea\n\n\nMantén la información a través de trabajos y etapas persistentes en una tubería (pipeline) con cache y artifacts. Estas palabras clave son formas de almacenar las dependencias y la salida de los trabajos, incluso cuando se utilizan ejecutores efímeros para cada tarea.\n\n\nUtilice la palabra clave default para especificar configuraciones adicionales que se aplican a todos los trabajos. Esta palabra clave se utiliza a menudo para definir las secciones before_script y after_script que deben ejecutarse en cada trabajo.\n\n\nBibliografía\nCI/CD docs.gitlab.com/ee/ci/quick_start/"},"Otros/Git/CI-CD/Github-actions":{"title":"Github actions","links":[],"tags":[],"content":"Intro\nSe recomienda utilizar un workflow predefinido como plantilla. Yo he convertido un proyecto antiguo de prueba para aprender git en uno para CI/CD con Python, donde se ejecutarán unas pruebas unitarias.\nEl archivo yaml se ubica en .github/workflows\nFormato\n\nname: El nombre que se mostrará en \non: para eventos (dentro están los eventos con su nombre seguido de dos puntos\nLo que vemos en la captura nos indica: cada vez que alguien haga push o pull-request a nuestra rama “main” se ejecuta el contenido de este workflow\nEl resto de eventos están descritos aquí\n\njobs describe qué va a ocurrir cuando, el cuerpo del workflow\nen la captura vemos build pero no es una palabra registrada, es arbitrario, es el nombre que quieras asignar a esa acción correspondiente\nsteps describe cada una de las acciones que se van a ir ejecutando.\nLo primero que vemos que hace es uses que ejecuta un comando, en este caso hacer un checkout del repositorio. pone actions/ porque esta acción está predefinida en Github. Más acciones predefinidas aquí\nLo siguiente que hace es configurar el entorno Python con la versión indicada\n\nDespues lanza algunos comandos para instalar y configurar las dependencias\nSe puede notar que cada paso tomado, se define mediante un guión\n\nSi quisiéramos obtener información sobre el entorno, podríamos hacer\n-name: Listar carpetas\nrun: ls -la\nPor último, ejecuta los tests\nTengo un problema\nEl bot no tiene acceso a nuestro repo\nConcretamente el mensaje de error es:\nremote: Permission to JaviAibar/wikijavi.git denied to github-actions[bot].\n  fatal: unable to access &#039;github.com/JaviAibar/wikijavi.git/&#039;: The requested URL returned error: 403\n  Error: Action failed with &quot;The process &#039;/usr/bin/git&#039; failed with exit code 128&quot;\n\nPara resolverlo Settings &gt; Actions &gt; General \n\nY abajo del todo en Workflow permissions seleccionar Read and Write permissions y Allow GitHub Actions to create and approve pull requests\n\nBibliografía\nGitHub Actions Tutorial - Basic Concepts and CI/CD Pipeline with Docker\nEventos\nAcciones predefinidas de Github"},"Otros/Git/CI-CD/Sin-título":{"title":"Sin título","links":[],"tags":[],"content":""},"Otros/Git/Cambiar-de-repositorio-remoto":{"title":"Cambiar de repositorio remoto","links":[],"tags":[],"content":"Como ya estás en un repo remoto, el origin está ya apuntando dicho repo.\nEs decir, la instrucción git remote add origin github.com/JaviAibar/wikijavi.git te va a dar el error error: remote origin already exists.\nHay que modificarlo por el nuevo\nCorregir con TortoiseGit\n\n\nCon entorno comandos (Bash)\nPara ver las que hay\ngit remote -v\nPara cambiarlas\ngit remote set-url origin &lt;NUEVA URL AQUI&gt;\n\n\n                  \n                  Por qué funciona \n                  \n                \n\nPorque en la sentencia que te proporciona GitHub indica “add”, sin embargo ahora ponemos “set-url”\n\n"},"Otros/Git/Git-bare-vs-non-bare":{"title":"Git bare vs non-bare","links":[],"tags":[],"content":"Parece que por defecto, se crea no bare\nSi lo que queremos crear es una copia del proyecto sin working directory (es decir, en la que solo se hacen push y pull, no cambios ni nuevos commits, osea la típica remota como github o gitlab) entonces será bare, es decir están destinados solo a almacenar el repo, mientras que los locales serán no bare\n\n\n                  \n                  No se puede hacer un git push a un repositorio non-bare\n                  \n                \n\nBibliografía\nwww.danielnavarroymas.com/repositorio-git-bare-vs-non-bare/"},"Otros/Git/Gitlab-+-TortoiseGit":{"title":"Gitlab + TortoiseGit","links":[],"tags":[],"content":"La idea de utilizar Gitlab como repositorio remoto viene por la limitación de 1GB de Unity a febrero de 2020 (no sé después…), así como las versiones gratuítas de Bitbucket o Github\nPor otra parte, se ha decidido utilizar TortoiseGit ya que el uso de comandos consume tiempo, el uso de herramientas integradas en Unity no cumplen con los mínimos requeridos (funcionar…)\nCrear un nuevo repositorio\nAunque existen varias formas de hacerlo, esta funciona:\n\nSe crea un nuevo proyecto en la pantalla de proyectos de Gitlab:\n\n\n\nNos quedamos con el enlace\n\n\n\nEn la carpeta: botón derecho &gt; Git clone\n\n\n\nPonemos la URL y aceptar\n\n\n\nBotón derecho &gt; Create repository here…\n\n\n\n\nOK, OK\n\n\nDescargar un buen .gitignore y ponerlo en la carpeta raíz\n\n\nBotón derecho &gt; Commit (recuerda darle a “All”)\n\n\n\n\n\nAñadir la URL de antes\n\n\n"},"Otros/Git/Gitlab":{"title":"Gitlab","links":[],"tags":[],"content":"Tengo un problema con GitLab\nNo puedo hacer push, me dice: ! [remote rejected] main -&gt; main (pre-receive hook declined) y soy Owner (propietario)\nOwner y Maintainer no son lo mismo\nEso es porque la rama está protegida, tienes dos opciones:\n\\1. Cambiar rol: Pedir que te asignen un rol con el que puedas hacer push a esa rama, se pueden cambiar roles desde Manage &gt; Members\n\\2.  Si eres Owner y todavía no puedes, lo que habrá que hacer es cambiar los permisos de la rama en Setting &gt; Repository &gt; Protected Branches.\n\n\n                  \n                  Aquí de nuevo tienes dos opciones: \n                  \n                \n\n2.1 Desproteger la rama por completo\n\n2.2 Incluir a “Developers” en ambos cuadritos\n\nBibliografía\ntimmousk.com/blog/git-pre-receive-hook-declined/"},"Otros/Git/Hook":{"title":"Hook","links":[],"tags":[],"content":"Estos scripts .sh nos permiten automatizar acciones cuando pasa algo en Git\nPor ejemplo, puedes hacer que despues de un git push, se ejecute automáticamente un comando\nEjemplo para glitch\nDentro de la carpeta .git, se crea una llamada hooks\nDentro de esta, un archivo llamado post-receive con el contenido del script\n#!/bin/sh\ngit reset --hard\nrefresh\nEn este caso, como es unix, hay que darle permisos\nchmod +x .git/hooks/post-receive"},"Otros/Git/Tengo-un-problema-con-Git/Deshacer-los-cambios":{"title":"Deshacer los cambios","links":[],"tags":[],"content":"Aparentemente para quitar los cambios locales que no se han hecho commit se ejecuta git checkout master .\n\n\n                  \n                  Ahora lo más probable es que la rama se llame main en lugar de master\n                  \n                \n\ngit reset --hard"},"Otros/Git/Tengo-un-problema-con-Git/Deshacer-ultimo-commit-local":{"title":"Deshacer ultimo commit local","links":[],"tags":[],"content":"Simplemente ejecutar git reset HEAD~"},"Otros/Git/Tengo-un-problema-con-Git/Mover-cambios-a-otra-rama":{"title":"Mover cambios a otra rama","links":["Otros/Git/2---git-checkout","Otros/Git/9---git-merge","Otros/Git/Tengo-un-problema-con-Git/Revertir-cambios","Otros/Git/git-cherry-pick","Otros/Git/git-rebase","Otros/Git/rebase-interactivo"],"tags":[],"content":"Es común equivocarse y hacer cambios en una rama incorrecta\nSi no se ha hecho commit, todavía no está fijado a la rama, simplemente haz checkout a la rama necesaria y solucionado. Sin embargo, solo funcionará si las historia encajan. En caso de no encajar, se puede hacer stash de los cambios, cambiar de rama y hacer pop del stash guardado\n\n\n                  \n                  Si no encajan los cambios tendrás que resolver los conflictos\n                  \n                \n\n\n\n                  \n                  En caso de haber hecho commit sin push\n                  \n                \n\npuedes hacer reset git reset HEAD~1. Esto te dejará en el punto de “todavía no commiteado”\nAlternativamente puedes hacer git cherry-pick, rebase normal o rebase interactivo\n\n\nBibliografía\nwww.howtogeek.com/devops/how-to-move-changes-to-another-branch-in-git/"},"Otros/Git/Tengo-un-problema-con-Git/Push-a-un-proyecto-glitch":{"title":"Push a un proyecto glitch","links":["Otros/Git/Git-bare-vs-non-bare","Otros/Git/Hook"],"tags":[],"content":"Glitch tiene, evidentemente, repositorio non-bare, por lo que, teoricamente no debería poder recibir un git push, sin embargo se puede de la siguiente forma\nEn el proyecto de glitch.com ejecuta\ngit config receive.denyCurrentBranch ignore\nEso nos permitirá subir los archivos al .git aunque no sustituirá los archivos reales en Glitch\nPor lo que, por supuesto, hacemos el git push en el ordenador, nos vamos otra vez a glitch y ejecutamos\ngit reset --hard\nrefresh\nEsto se puede automatizar con un Hook"},"Otros/Git/Tengo-un-problema-con-Git/Resolver-conflictos":{"title":"Resolver conflictos","links":[],"tags":[],"content":"Para revertir cambios en un merge simple (de dos ramas) tan solo hay que hacer un reset de HEAD git reset HEAD\nPara revertir cambios en un merge complejos (de más de dos ramas) hay que abortar el merge git merge --abort\nPara aplicar los cambios manualmente simplemente se modifica el fichero de tal forma que (aunque podría no ser siempre así):\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt Conflict resolution is hard; Esta parte está dentro de tu archivo ======= Git makes conflict resolution easy. \n\nEsta es la parte del repositorio\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt\n\n\n\n                  \n                  AÑADIR y hacer commit \n                  \n                \n"},"Otros/Git/Tengo-un-problema-con-Git/Revertir-cambios":{"title":"Revertir cambios","links":[],"tags":[],"content":"Existen dos formas de verlo, de bajo y alto nivel. Nos centraremos en alto nivel\nExisten para ello, dos comandos git reset y git revert\ngit reset deshace los cambios moviendo la referencia de una rama hacia atrás en el tiempo a un commit anterior\nSin embargo esto no funciona para ramas remotas.\npara ello usamos git revert &lt;commit&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngit reset HEAD~1"},"Otros/Git/Tengo-un-problema-con-Git/Tener-dos-cuentas-de-Github":{"title":"Tener dos cuentas de Github","links":[],"tags":[],"content":"Antiguamente era más fácil pero más incómodo e inseguro. Ya que permitía elegir la sesión simplemente con una contraseña. Ahora es necesario tener una clave SSH para cada cuenta.\nSiempre que vayas a cambiar el usuario que publica el proyecto debes hacer los siguientes pasos (una descripción detallada más abajo):\n\n\nCambiar el nombre git config --global user.name &quot;ApoyoG&quot; puedes ver cual hay con git config --global user.name\n\n\nCambiar el email git config --global user.email &quot;ApoyoG@gmail.com&quot; puedes ver cual hay con git config --global user.email\n\n\n\n\n                  \n                  Atento! \n                  \n                \n\nFíjate que pone TempJavi\n\n\n\n\nSeleccionar como url para subir los cambios, la que indicaste en el archivo config git remote set-url origin git@github.com-TempJavi:ApoyoG/WikiJavi.git\n\n\nAñadir (si no lo está) la clave asociada a este usuario ssh-add &quot;C:/Users/Javi/.ssh/ApoyoG&quot; para revisar cuáles hay ssh-add -l -E sha256\n\n\nPara crear una nueva clave, ve a la carpeta donde quieras que se cree (puede ser cualquiera, aunque recomendable que sea la por defecto C:\\Users\\Javi.ssh, porque aquí busca TortoiseGit) y ejecuta\nssh-keygen -t rsa -b 4096 -C &quot;[your-email@example.com](mailto:your-email@example.com)&quot;\nTe pedirá el nombre del archivo, yo le he puesto el mismo que le nombre de usuario (ApoyoG). Tú ponle el tuyo\nTe lo generará en la carpeta que le digas. Creo que le puse punto (.) para que lo hicera en la que estamos\nAhora entras en cada cuenta de Github y en Settings &gt; SSH &gt; Add new SSH y pegas el contenido de ApoyoG.pub que está en la carpeta que le indicaste antes\nAl mismo nivel en donde están los archivos que acabamos de generar, creamos uno llamado config y ponemos lo siguiente\n# ApoyoG\nHost github.com-ApoyoG\n  HostName github.com\n  User git\n  IdentityFile ./ApoyoG\nIdentityFile tiene que apuntar al archivo sin la extensión (el .pub)\nIniciamos el agente de autenticación (esto evita el error Could not open a connection to your authentication agent.)\neval `ssh-agent -s` \nAhora le damos al agente SSH a conocer nuestras claves\nssh-add &quot;C:/Users/Javi/.ssh/ApoyoG&quot;\n(Sigue adelante y si falla prueba esto) Y configuramos que git use este agente\ngit cnonfig --global core.sshCommand &quot;ssh -v&quot;\nPara ver qué claves hay \nssh-add -l -E sha256\n\n\n                  \n                  Warning\n                  \n                \n\ny si queremos eliminar una\n \n\n\nssh-add -d “C:/Users/Javi/.ssh/ApoyoG”\nDebemos de configurar la referencia al repositorio remoto. El usuario que pone es el dueño del repo, que puede ser otro (el primer ApoyoG (precedido por guión) es el que hará la subida, el segundo es el dueño del repo)\ngit remote set-url origin git@github.com-ApoyoG:ApoyoG/WikiJavi.git\n\nComprobamos que haya cambiado con el comando\ngit remote -v\nY prueba a ver si funciona\ngit push -u origin main\nErrores\nCould not open a connection to your authentication agent.\ndebes iniciar el agente con eval `ssh-agent -s`\nEstá intentando usar otro usuario (y no tiene permisos)\nPara saber exactamente qué usuario está intentando usar ssh-add -l -E sha256\nSi te dice que el usuario no tiene permisos (y está intentandolo con otro) debes ejecutar en la carpeta del proyecto git remote set-url origin git@github.com-ApoyoG:ApoyoG/WikiJavi.git para que se asocie el proyecto con tu usuario\nEl usuario es correcto pero sigue sin permisos\nMira si está usando una clave SHA256 si quiera con el comando ssh-add -l -E sha256 Si no pone un texto con la clave, deberás asociarla con ssh-add &quot;C:/Users/Javi/Documents/Proyectos git/github-ssh-keys/ApoyoG&quot;\nEstá usando la clave y el usuario es correcto pero sigue sin permisos\nPuede que alguna referencia del proyecto se ha roto. Prueba a hacer todo lo siguiente (el primer ApoyoG (precedido por guión) es el que hará la subida, el segundo es el dueño del repo).\n\n\n                  \n                  Warning\n                  \n                \n\nFijate que sea main y no master\n\n\ngit remote add origin github.com-ApoyoG/ApoyoG/Proyecto-de-prueba.git\n```git branch -M main\neval `ssh-agent -s`\nssh-add &quot;C:/Users/Javi/.ssh/ApoyoG&quot;\n`````git pull \ngit push -u origin main``git remote -v (para comprobar que está bien enlazado)\neval `ssh-agent -s`\nssh-add &quot;C:/Users/Javi/.ssh/ApoyoG&quot;\n`````git pull \ngit push -u origin main``"},"Otros/Git/Tengo-un-problema-con-Git/Transferir-commits-de-una-cuenta-Github":{"title":"Transferir commits de una cuenta Github","links":[],"tags":[],"content":"Básicamente consiste en que los commits que hay en otra cuenta Github se cuenten en la mia\nCualquiera de estos métodos es peligroso o destructivo, así que mucha precaución\nYo lo que he probado es el método de borrar la otra cuenta y funciona. He probado además el método de filter-repo para reescribir la historia sin subirlo a Github\nMétodo reescribir la historia\nTen en cuenta que si ya está publicado en Github puede ocasionarte problemas, pero si ya es un proyecto colaborativo, la puedes liar increíblemente parda. Siempre que reescribas la historia es extremadamente peligroso, especialmente si lo tienen otros. Potencialmente destructivo.\nYo estoy utilizando filter-repo porque creo que es más seguro, pero después pongo lo que dice ChatGPT que funcionaría con filter-branch\nprimero tienes que hacer un pull\n\n\n                  \n                  HAZ UN BACKUP \n                  \n                \n\nProbablemente tengas que ponerle el --force, es decir git filter-repo --force --commit-callback\ngit filter-repo --commit-callback &#039;\nif commit.author_email == b&quot;correo_incorrecto@example.com&quot;:\n    commit.author_name = b&quot;Tu Nombre de Github&quot;\n    commit.author_email = b&quot;correo_correcto@example.com&quot;\nif commit.committer_email == b&quot;correo_incorrecto@example.com&quot;:\n    commit.committer_name = b&quot;Tu Nombre de Github&quot;\n    commit.committer_email = b&quot;correo_correcto@example.com&quot;\n&#039; \nDespués de hacer esto, al hacer push, deberás usar el --force\nCon filter-branch (no lo he probado)\n\n\n                  \n                  HAZ UN BACKUP \n                  \n                \n\ngit filter-branch --env-filter &#039;\nOLD_EMAIL=&quot;correo_incorrecto@example.com&quot;\nCORRECT_NAME=&quot;Tu Nombre&quot;\nCORRECT_EMAIL=&quot;correo_correcto@example.com&quot;\n \nif [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]\nthen\n    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;\n    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;\nfi\nif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]\nthen\n    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;\n    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;\nfi\n&#039; --tag-name-filter cat -- --branches --tags \nMétodo eliminar la otra cuenta\nPara conseguir esto, tienes que eliminar la otro cuenta, la que tiene los cambios que necesitas en la tuya\nUna vez hecho eso, tienes que ir a tu cuenta, en Settings\n\nIr al apartado emails\n\nY añadir el correo de la otra cuenta\n"},"Otros/Git/Tengo-un-problema-con-Git/error.-remote-origin-already-exists.":{"title":"error. remote origin already exists.","links":["Otros/Git/Cambiar-de-repositorio-remoto"],"tags":[],"content":"Explicado en Cambiar de repositorio remoto"},"Otros/Git/Tengo-un-problema-con-Git/git-filter-branch-filter-repo---Borrar-archivo-historia-git-(git-filter-branch)":{"title":"git filter-branch filter-repo - Borrar archivo historia git (git filter-branch)","links":[],"tags":[],"content":"\n\n                  \n                  Antes de comenzar haz un backup \n                  \n                \n\nDebería ser simplemente ejecuta este comando git filter-branch --index-filter &#039;git rm -rf --cached --ignore-unmatch path_to_file&#039; HEAD\nEliminará los archivos que están en .gitignore\nSin embargo, esta solución puede traer varios problemas (p.e, liandotela con la historia o creando problemas al resto de compañeros del repo)\nPor lo que lo suyo es usar git-filter-repo\nRequisitos\nTener instalado git &gt;= 2.22.0 ciertas cosas requieren git &gt;= 2.24.0\nTener instalado python3 &gt;= 3.5\nDescarga github.com/newren/git-filter-repo/releases o de mi Drive: Es muy probable que la versión de mi Drive no funcione ya que requiere enlaces simbólicos y no estén, no sé como va. Si no funcionase, debes descargarlo del repositorio (github), ejecutar tu programa de extracción con permisos de administrador (Rar / 7Zip o el que tengas) navegar hasta el comprimido y descomprimir, sí, qué fácil…\nEl enlace llamado git_filter_repo.py debe ser copiado a una ruta, en mi caso era C:\\Program Files\\Python311\\Lib\\site-packages, pero el tuyo podría ser diferente, para saber cuál, ejecuta esto en una consola\npython -c &quot;import site; print(site.getsitepackages())\nPon la carpeta extraída en el Path (lo que has descargado de Github)\nPuedes comprobar si ya lo hiciste poniendo en un cmd echo %path%\n\n\n\n                  \n                  Si al ejecutar diera el siguiente error \n                  \n                \n\nNo se encontr¾ Python; ejecuta sin argumentos para instalar desde Microsoft Store o deshabilita este acceso directo en Configuraci¾n &gt; Administrar alias de ejecuci¾n de la aplicaci¾n. \n\nAñadir estas rutas (⚠️ puede que tenga que ser en ese orden!):\nC:\\Program Files\\Python311\\Scripts\\\n\n\n\nC:\\Program Files\\Python311\\\n\nal path de sistema\n\n\n\n\n                  \n                  Si da el error \n                  \n                \n\n/usr/bin/env: ‘python3’: No such file or directory\nTan solo hay que ir a la carpeta donde tienes instalado Python, copiar el ejecutable y ponerle de nombre python3.exe, ¿absurdo? Sí, todo este tema lo es\n\n\nComando\nEl comando para que borre de la historia todos lo archivos que estén listados en .gitignore es (no funciona)\ngit filter-repo --path .gitignore --invert-paths\nPara archivos grandes usando BGF es el siguiente comando\nbfg --strip-blobs-bigger-than 50M \nY después\ngit reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive"},"Otros/Git/Tengo-un-problema-con-Git/index":{"title":"index","links":["Otros/Git/Tengo-un-problema-con-Git/Deshacer-los-cambios","Otros/Git/Tengo-un-problema-con-Git/Deshacer-ultimo-commit-local","Otros/Git/Tengo-un-problema-con-Git/git-filter-branch-filter-repo---Borrar-archivo-historia-git-(git-filter-branch)","Otros/Git/Tengo-un-problema-con-Git/Mover-cambios-a-otra-rama","Otros/Git/Tengo-un-problema-con-Git/Resolver-conflictos","Otros/Git/Tengo-un-problema-con-Git/Revertir-cambios","Otros/Git/Tengo-un-problema-con-Git/Tener-dos-cuentas-de-Github","Otros/Git/Tengo-un-problema-con-Git/Transferir-commits-de-una-cuenta-Github"],"tags":[],"content":"Deshacer los cambios\nDeshacer ultimo commit local\ngit filter-branch filter-repo - Borrar archivo historia git (git filter-branch)\nMover cambios a otra rama\nResolver conflictos\nRevertir cambios\nTener dos cuentas de Github\nTransferir commits de una cuenta Github"},"Otros/Git/git-cherry-pick":{"title":"git cherry-pick","links":[],"tags":[],"content":"Mover el trabajo de un sitio a otro\ngit cherry-pick &lt;commit1&gt; &lt;commit2&gt; &lt;...&gt;\nEl efecto será que los commits seleccionados se copiarán a la ubicación actual (HEAD)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngit cheery-pick C2 C4"},"Otros/Git/git-rebase":{"title":"git rebase","links":["Otros/Git/2---git-checkout","Otros/Git/rebase-interactivo"],"tags":[],"content":"Permite reordenar los commits para que se vean secuenciales en lugar de en diferentes ramas.\nNos situamos en la rama que queremos copiar (poner a continuación de main) y hacemos git rebase main\nEntonces hacemos 2 - git checkout de main y hacemos git rebase bugFix\n\n\n\n\n\n\n\n\ngit rebase\nPara rebase interactivo rebase interactivo\n\n\n                  \n                  TortoiseGit utiliza siempre rebase interactivo \n                  \n                \n"},"Otros/Git/rebase-interactivo":{"title":"rebase interactivo","links":[],"tags":[],"content":"Es lo mismo que el rebase normal pero te permite analizar cuáles son los commits que necesitas, se forma como un rebase normal con el atributo -i\ngit rebase -i\nUna vez hecho esto, se abrirá una UI y tienes 3 posibilidades:\n\nReordenar commits\nElegir ignorar algunos commits (no hacer pick a un commit significa ignorarlo)\nSquashear commits (combinar varios commits en uno solo)\n\n\ngit rebase -i HEAD~4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n⇒\nEl rebase de TortoiseGit es siempre interactivo\n"},"Otros/Informática-general/GPT-MBR-UEFI-BIOS-CSM":{"title":"GPT MBR UEFI BIOS CSM","links":[],"tags":[],"content":"CSM o Compatibility Support Module: un aliado para instalaciones antiguas"},"Otros/Informática-general/Redes/PortForwarding-2---Red-Minecraft":{"title":"PortForwarding 2 - Red Minecraft","links":[],"tags":[],"content":"Realmente no voy a escribir sobre Port Forwarding, si no de una VPN (al estilo Hamachi) con ZeroTier, más claro y mejor\nPara configurar correctamente ZeroTier, el que crea la red, deberá pedir al resto que se unan mediante el código de red, esos que son del estilo (d5e5fb6…)\nUna vez ya estén todos en la red hay que hacer dos cositas en la web de ajustes (my.zerotier.com/ )\n\n\nAutorizar a los usuarios mediante el checkbox que les sale a la izquierda\n\n\nEn el apartado de Auto-assign IPv4, hay que seleccionar manualmente una, ese será nuestro rango de IPs, los cuales usaremos para conectarnos (el que hostee minecraft, deberá pasar la IP de ZeroTier al resto para que se conecten) en la aplicación se la conoce como “Managed IPs”\n\n\nPor último, habrá que crear una regla en el Firewall TCP/UDP para el puerto 25565\nY en principio, ya está"},"Otros/Informática-general/Redes/PortForwarding":{"title":"PortForwarding","links":[],"tags":[],"content":"\n\nConfigurar el DHCP para que siempre te de la misma ip local para tu mac\n\n\nEn el router de PTV está en Local Network &gt; LAN &gt; DHCP Binding\n\n\nDirigir las peticiones que lleguen a nuestra ip pública (la que dirige a nuestro router) al ordenador con el servidor de minecraft\n\n\nRouter PTV\n\nEn el router de PTV está en Internet &gt; Security &gt; Port Forwarding\n\nRouter ZTE F680\n\n\nApplication &gt; UPnP → Hay que habilitar el UPnP (en el mío venía por defecto)\n\n\nApplication &gt; Application List → Add an application\n\n\nApplication &gt; PortForwarding (Application List)\n\n\n Abrir el puerto en el firewall\n\n\nSi no se abre el puerto (se puede comprobar con netstate -an en windows)\n\n\nComprueba que el servidor está iniciado\n\n\nRecuerda que el puerto de por si no escucha, si no que lo hace la aplicación, esta debe estar escuchando a través del puerto seleccionado\n\n\nPara comprobar definitivamente que el puerto está abierto, probarlo desde esta web: www.yougetsignal.com/tools/open-ports/\n\n\nBibliografía:\n\n\nwww.howtogeek.com/66214/how-to-forward-ports-on-your-router/\n\n\nsuperuser.com/questions/396002/how-to-get-a-port-to-listen-on-windows-7\n\n\nwww.yougetsignal.com/tools/open-ports/"},"Otros/Informática-general/Sistemas-operativos/Boot---arranque---live-usb":{"title":"Boot - arranque - live usb","links":[],"tags":[],"content":"Iniciar menú de arranque | boot menu\nOrdenador de casa de mis padres (Asus): Esperar a que salga el mensaje “Acceder a BIOS con F2 o Del” (o algo parecido). Pulsar 1 vez F8\nPortatil Sergio (Asus Tuf Gaming Apu): Antes de encender, mantener pulsado no recuerdo qué tecla y esperar\nPortatil Javi (HP): Antes de encender, mantener pulsado ESC o cuando aparece el logo HP pulsar 1 vez o mantener\nPortatil Papá (Huawei): F8 cuando sale la info de la placa base.\nCosas a tener en cuenta crear LiveUSB\n\n\nSi usamos Rufus: elegir MBR en lugar de GPT. (esto para Windows)\n\n\nDesactivar el secure boot en la BIOS / UEFI\n\n\nDesactivar el boot rápido en BIOS / UEFI\n\n\nPermitir boot tanto UEFI como CSM (depende de la BIOS)\n\n\n\nA Eleni no le funcionaba ninguna de estas soluciones. A ella le daban muchos BSOD y alguna pantalla y negro y demás problemas.\nAl final lo solucionó quitando cosas: gráfica, tarjeta de red, ventilador secundario y cambio el monitor por uno chustero (aunque duda que fuese este último). Básicamente dejó Placa base, cpu, disipador, ram y ssd\nSegún mi padre, la versión 3.21 de Rufus se ha vuelto más sencilla de usar, con esta versión, al menos para instalar Linux, no hace falta hacer ningún cambio.\nEn ocasiones es importante que el pen esté formateado con Fat32\nbibliografía\nsuperuser.com/questions/1705044/my-pc-gets-a-blue-screen-when-booting-windows-installation-wizard-through-a-boot \nEleni\nKeys: LiveUSB Windows Win10 Win Win7 Win11 11 10 7 8 8.1 Ubuntu Mint Linux GNU LiveCD CD iniciar sesión sesion instalar sistema operativo pen drive fat 32"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Mint":{"title":"GNU Linux Mint","links":[],"tags":[],"content":"Cambiar el borde superior para que maximice ventanas\nEstá pagina se refiere a la versión 17.3 Podría no funcionar de esta forma en otras versiones\nConfiguración del sistema &gt; Mosaico de ventanas y volteado &gt; Maximizar en lugar de hacer mosaico"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Ubuntu/(Des)Activar-feedback-micro":{"title":"(Des)Activar feedback micro","links":[],"tags":[],"content":"Activar: pactl load-module module-loopback latency_msec=1\nDestivar: pactl unload-module module-loopback"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Ubuntu/Cambiar-SplashScreen":{"title":"Cambiar SplashScreen","links":[],"tags":[],"content":"sudo update-alternatives —config default.plymouth\nsudo update-initramfs -u"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Ubuntu/Configuracion-correcta-de-micro":{"title":"Configuracion correcta de micro","links":[],"tags":[],"content":"en pavucontrol:\n\n\nDispositivos de entrada:\n\n\nAudio Interno Estereo analogico:\n\n\nPuerto: Microfono interno\n\n\nFrente izquierdo: 0\n\n\nFrente derecho: 70%\n\n\nConfiguracion:\n\n\nAudio Interno:\n\n\nPerfil: Estereo Analogico Duplex\n\n"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Ubuntu/Configuración-inicial":{"title":"Configuración inicial","links":[],"tags":[],"content":"Instalar:\n\n\nGoogle Chrome\n\n\nMailspring\n\n\nShutter y el editor de shutter\n\n\nGIMP\n\n\nVLC\n\n\nYoutube-DLG\n\n\nExtensiones:\n\nSound input &amp; output device chooser\n"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Ubuntu/Reconoce-micro,-feedback-pero-no-va":{"title":"Reconoce micro, feedback pero no va","links":[],"tags":[],"content":"Solución en este enlace: askubuntu.com/questions/878308/ubuntu-16-04-internal-microphone-not-working-ideapad-310\nEn Pavucontrol hacer esto:\n"},"Otros/Informática-general/Sistemas-operativos/GNU-Linux-Ubuntu/Ubuntu,-$@-and-!,-más-rápido!":{"title":"Ubuntu, $@&!, más rápido!","links":[],"tags":[],"content":"Bibliografía\nwww.makeuseof.com/tag/speed-up-gnome-desktop/"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Carpeta-compartida":{"title":"Carpeta compartida","links":[],"tags":[],"content":"Requisitos previos\nLos ordenadores que quieran compartir carpeta deberán ser de la misma red, o bien local o con ZeroTier en mi Drive la versión 1.10.1\nPasos\n\n\nCreamos una carpeta para compartir. Yo voy a crear “MiCompartida” en Documentos\n\n\nBotón derecho en la carpeta &gt; Conceder acceso a &gt; Usuarios específicos\n\n\nAñadimos a “Todos”\n\n\n\n\nLe cambiamos el “Nivel de permisos” a “Lectura y escritura” y Compartir\n\n\n\nOtra vez botón derecho &gt; Propiedades &gt; Compartir &gt; Uso compartido avanzado…\nClick en Permisos y añadimos los que falten\n\n\n\n\n\nAbrimos Administrar configuración avanzada de uso compartido, bajamos desplegamos “Todas las redes” y elegimos la opción de “Desactivar el uso compartido con protección por contraseña”. Esto lo hacemos porque sino pide un usuario y contraseña\n\n\no desde aquí\n\n"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Como-hacer-que-windows-monte-un-iso":{"title":"Como hacer que windows monte un iso","links":[],"tags":[],"content":"Si instalas 7zip, por lo menos con Ninite, te lo pone por defecto para abrir ISO\n\nPara revertir esto, es tan fácil como Abrir como → Explorador de Windows, lo sé, es muy loco\n\nBibliografía\nwww.intowindows.com/fix-mount-option-missing-from-context-menu-in-windows-10/"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Comprobación-de-seguridad-checksum-hashcode":{"title":"Comprobación de seguridad checksum hashcode","links":[],"tags":[],"content":"certutil -hashfile &quot;filename.exe&quot; SHA512\nkeys: certutil sha sha512 sha256 md5 encriptado hashfile verificar rsa"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Cosas-que-deshabilitar-(o-habilitar)-de-Windows-10":{"title":"Cosas que deshabilitar (o habilitar) de Windows 10","links":[],"tags":[],"content":"El equipo de Windows 10 activa un conjunto de configuraciones y aplicaciones que deben ser deshabilitadas por el usuario porque son absolutamente innecesarias\n\nSi inicias sesión en un Win10 con tu cuenta Microsoft, se van a sincronizar una serie de opciones de #@!% super molestas, en qué #@!% están pensando? Si tienes más de un ordenador con la misma cuenta (que es algo que se pasa totalmente por alto, porque no se nota, y para colmo está oculto como cerrar sesión), se empezarán a cambiar ciertas opciones porque la otra persona se está configurando el ordenar…\n\nTan solo hay que ir a Configuración, una vez allí: Opciones &gt; Sincronizar la configuración y desactivar\nPara cerrar sesión, es en el mismo sitio, pero en Tu Información, abajo y uno de los enlaces que aparecen abajo (esta #@!% de SO ahora no me deja iniciar sesión… (parece que ya no)\nAhora tienes que ir a Correo electrónico y cuentas &gt; Click en el correo &gt; Administrar &gt; Eliminar esta cuenta de este dispositivo\nEjecutar la aplicación Microsoft Store &gt; Click en la personita en gris (arriba derecha) &gt; Click en la cuenta &gt;  Cerrar sesión\n\n\n\n\nDeshabilitar el quick start, que hace que el ordenador nunca se apague del todo, qué asco me da eso, #@!%…\n\nPanel de control &gt; Opciones de energía &gt; Elegir el comportamiento \nAhí seleccionamos “Cambiar la configuración actualmente no disponible” y quitamos el inicio rapido\n\n\nPrivacidad en Windows (si es que se puede decir que vayas a tener ni un mínimo…)\n\n\nBusca “Privacidad” en el buscador de Windows\n\n\nDesactivar todo\n\n\nDesinstalar el bloatware\nUna cosa que siempre debe ser activada es el visor de imagenes de Win7 en sustitución de la #@!% esa de MetroUI que es muy basura… Sencillamente hay que ejecutar este archivo en el ordenador\nEliminar el archivo Hiberfil.sys:\nAbrir cmd y ejecutar\npowercfg /h off\nQuitar OneDrive de Explorer \nIr a la dirección HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{018D5C66-4533-4307-9B53-224DE2ED1FE6} y cambiar System.IsPinnedToNameSpaceTree de 1 a 0\n"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Crear-enlaces-en-Todos-los-programas":{"title":"Crear enlaces en Todos los programas","links":[],"tags":[],"content":"Cuando intentas crear un enlace directamente en la carpeta C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs (Ruta de todos los programas) te dice que no se puede crear ahí y si quieres crearlo en el escritorio.\nPara solucionarlo simplemente hay que crear el enlace en otro sitio -.-” y entonces arrastrarlo a la carpeta esta."},"Otros/Informática-general/Sistemas-operativos/Windows-10/El-disco-duro-nunca-se-extrae-con-seguridad":{"title":"El disco duro nunca se extrae con seguridad","links":[],"tags":[],"content":"www.seagate.com/de/de/support/kb/windows-will-not-allow-me-to-safely-remove-my-drive-it-keeps-reporting-the-drive-is-busy-or-in-use-205071en/"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Linea-comandos-Linux-para-Windows":{"title":"Linea comandos Linux para Windows","links":[],"tags":[],"content":"Git trae por defecto una linea de comandos (Git Bash) llamado MINGW64 que simula un directorio / de linux en C:/Program Files/MINGW64\nEs muy básico, pero se le pueden añadir más comandos típicos y útiles de linux gracias a esto gist.github.com/evanwill/0207876c3243bbb6863e65ec5dc3f058"},"Otros/Informática-general/Sistemas-operativos/Windows-10/Que-no-se-comparta-el-audio-por-Discord":{"title":"Que no se comparta el audio por Discord","links":[],"tags":[],"content":"Sonido &gt; Grabar &gt; Microfono (botón derecho) &gt; VoizExp &gt; Cancelación de eco acústico"},"Otros/Obsidian/Cheatsheet-Obsidian-+-Quartz":{"title":"Cheatsheet Obsidian + Quartz","links":["Otros/Obsidian/Cheatsheet-Obsidian-+-Quartz"],"tags":[],"content":"Usar colores\nen vez de\n\nrb.AddForce(direction * Time.deltaTime);\n\nusar\n\nrb.velocity = characterController.velocity;\n\n## Enlaces\nTenemos los wikilinks que sirven para referenciar enlaces dentro de la propia wiki, estos se hacen con doble corchete\n[[Unity/Ejemplos de Unity/Ejemplo corrutina]]\nSi queremos referencia dentro de la misma nota, además del doble corchete se usa almohadilla #\n[[#configuración-en-detalle|Configuración en detalle]]\nEn ambos casos, si queremos que cambiar el título del enlace, se usa barra vertical\n[[#configuración-en-detalle|Indicaciones]]\nImágenes con enlace\nThis is a linked image[![[yourimagename.png]]](&lt;PATH/TO/THE NOTE&gt;)\n\n\n                  \n                  El ejemplo de Unity está roto pero me da pereza corregirlo. Sorry \n                  \n                \n\n[](&lt;Ejemplo corrutina.md&gt;) \nTanto la imagen como el enlace pueden ser online\n[![Google logo](images.com/Google.jpg)](&lt;google.es&gt;)\n\nmás info en la web oficial\nHighlight (Quartz)\n```js {1-3,4} \nexport function trimPathSuffix(fp: string): string { fp = clientSideSlug(fp) let [cleanPath, anchor] = fp.split(&quot;#&quot;, 2) anchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor return cleanPath + anchor}\n```\n\nexport function trimPathSuffix(fp: string): string { \n\tfp = clientSideSlug(fp) \n\tlet [cleanPath, anchor] = fp.split(&quot;#&quot;, 2) \n\tanchor = anchor === undefined ? &quot;&quot; : &quot;#&quot; + anchor \n\t\n\treturn cleanPath + anchor\n}\nquartz.jzhao.xyz/features/syntax-highlighting\nLenguajes de programación aceptados\nprismjs.com/#supported-languages\nNotas\n\n\n                  \n                  NOTE\n                  \n                \n\nUseful information that users should know, even when skimming content.\n\n\n\n\n                  \n                  TIP\n                  \n                \n\nHelpful advice for doing things better or more easily.\n\n\n\n\n                  \n                  IMPORTANT\n                  \n                \n\nKey information users need to know to achieve their goal.\n\n\n\n\n                  \n                  IMPORTANTE! Título personalizado! \n                  \n                \n\nKey information users need to know to achieve their goal.\n\n\n\n\n                  \n                  WARNING\n                  \n                \n\nUrgent info that needs immediate user attention to avoid problems.\n\n\n\n\n                  \n                  CAUTION\n                  \n                \n\nAdvises about risks or negative outcomes of certain actions.\n\n\n\n\n                  \n                  Cuidado!! Título en español! \n                  \n                \n\nAdvises about risks or negative outcomes of certain actions.\n\n\n\n\n                  \n                  Como hacer bloques de estos que se cierran? \n                  \n                \n\nPoniendo un ”-” delante de la selección, es decir &gt; [!importante]-\n\n\nEnlazar a bloques\nPonemos un bloque y le asignamos con ^ un nombre \n\n\n                  \n                  El bloque debe estar separado del texto por, al menos, un espacio \n                  \n                \n\nPara poder referenciarlo, ponemos un enlace normal seguido de #^ y el nombre ^ejemploBloque"},"Otros/Obsidian/Configuración-entorno-Obsidian-+-Gitlab-+-Quartz":{"title":"Configuración entorno Obsidian + Gitlab + Quartz","links":["Otros/Git/CI-CD/GitLab-Implementación-de-CI-CD","Otros/Git/Gitlab"],"tags":[],"content":"Obsidian es el software para tomar notas que uso para WikiJavi.\nQuartz entonces convierte los archivos .md generados en Obsidian y los convierte en una web estática (HTML + CSS + demás).\nEntonces mediante un commit se suben los cambios a Gitlab.\nEntonces Gitlab ejecuta automáticamente unos procesos (Pipelines CI/CD) que son los que ejecutan Quartz y copian los archivos a la carpeta correspondiente. Estos pipelines están configurados mediante un archivo yaml del que hablaremos abajo.\nConfiguración en detalle\nPrimero vamos a clonar el proyecto Quartz ya que dentro de éste es donde debe vivir nuestro Vault.\ngit clone github.com/jackyzha0/quartz.git\ncd quartz\nnpm i\nnpx quartz create\nAhora debemos borrar la carpeta .git que se ha descargado con el clonado e iniciamos el repositorio.\nDentro de la carpeta content, creamos el Vault de Obsidian.\nDentro de la carpeta raíz, debemos crear un archivo llamado .gitlab-ci.yml que contendrá lo siguiente (más info en su nota)\nstages:\n  - build\n  - deploy\n \nimage: node:18\ncache:\n  key: $CI_COMMIT_REF_SLUG\n  paths:\n    - node_modules/\n \nbuild:\n  stage: build\n  script:\n    - npm ci\n    - echo &quot;Building the site...&quot;\n    - npx quartz build \n  artifacts:\n    paths:\n      - public\n \npages:\n  stage: deploy\n  script:\n    - mkdir .public\n    - cp -r * .public\n    - mv .public public\n  artifacts:\n    paths:\n      - public\n  only:\n    - main\n \nEsto será procesado automáticamente por gitlab para que Quartz haga la build (convertir de .md a web) y lo publicará en la gitlab pages\n\n\n                  \n                  Siendo gitlab, probablemente la rama esté protegida \n                  \n                \n\nPara desbloquearla deberás hacer lo indicado en esta página\n\n\nY creo que eso es todo"},"Otros/Obsidian/Extensiones-Obsidian":{"title":"Extensiones Obsidian","links":[],"tags":[],"content":"Abbreviations expander\n\nAdvanced Canvas\nPara añadir más formas, flechas, y en general mayor personalizacion de los canvas\nOmnisearch\nPermite obviar tildes y demás en las búsquedas"},"Otros/Obsidian/Obsidian-index":{"title":"Obsidian index","links":["Otros/Obsidian/Cheatsheet-Obsidian-+-Quartz","Otros/Obsidian/Configuración-entorno-Obsidian-+-Gitlab-+-Quartz","Otros/Obsidian/Extensiones-Obsidian"],"tags":[],"content":"Cheatsheet Obsidian + Quartz\nConfiguración entorno Obsidian + Gitlab + Quartz\nExtensiones Obsidian"},"Otros/Obsidian/Syntax":{"title":"Syntax","links":[],"tags":[],"content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStyleSyntaxExampleOutputBold** ** or __ __**Bold text**Bold textItalic* * or _ _*Italic text*Italic textStrikethrough~~ ~~~~Striked out text~~Striked out textHighlight== ====Highlighted text==Highlighted textBold and nested italic** ** and _ _**Bold text and _nested italic_ text**Bold text and nested italic textBold and italic*** *** or ___ ___***Bold and italic text***Bold and italic text"},"Otros/Programas/GhostScript":{"title":"GhostScript","links":[],"tags":[],"content":"El comando es\ngswin64\nopciones que son obligatorios (ya, contradictorio 🤷‍♂️)\n-sOutputFile=output.pdf -sDEVICE=pdfwrite\ncomando que sugirió ChatGPT para girar un conjunto de páginas\n gswin64 -o output.pdf -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -c &quot;[ /Page /Rotate 180 /PUT ] &lt;&lt; /PageList [ 1 2 3 5 7 ] &gt;&gt; setpagedevice&quot; -f input.pdf\no\ngswin64 -o output.pdf -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress -c &quot;&lt;&lt;/EndPage {2 mod 0 eq {0}{180} setpagedevice} &gt;&gt; setpagedevice&quot; -f input.pdf\nSin embargo, no funcionaron, no sé por qué\n-sPageList=pagenumber\nparece que puedes seleccionar un conjunto de páginas o poner even u odd\nejemplos\n-sPageList=1,3,5 indicates that pages 1, 3 and 5 should be processed.\n-sPageList=5-10 indicates that pages 5, 6, 7, 8, 9 and 10 should be processed.\n-sPageList=1,5-10,12- indicates that pages 1, 5, 6, 7, 8, 9, 10 and 12 onwards should be processed.\n\nBibliografía\nghostscript.com/docs/9.54.0/Use.htm#PDF_stdin"},"Otros/Programas/Programas-index":{"title":"Programas index","links":["Otros/Programas/GhostScript"],"tags":[],"content":"GhostScript"},"Otros/Páginas-a-recordar":{"title":"Páginas a recordar","links":[],"tags":[],"content":"CodeAcademy"},"Otros/index":{"title":"Bienvenido a WikiJavi, una web desarrollada con Obsidian y publicada con Quartz","links":["Otros/Git/0---Git-Index","Programación/Lenguajes-de-programación/CSharp/CSharp-index","Programación/Lenguajes-de-programación/WebDev/WebDev-index","Programación/Lenguajes-de-programación/WPF/WPF-index","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-index","Programación/1--Teoria-Programación/Algoritmica/Algoritmica-index","Programación/1--Teoria-Programación/Optimizaciones-generales/Optimizaciones-generales-Núcleo","Otros/Programas/Programas-index","Unity/Unity-index","Otros/Obsidian/Obsidian-index","Programación/1--Teoria-Programación/Patrones-de-diseño/Patrones-de-diseño-index","Otros/Páginas-a-recordar","Unity/Ejemplos-de-Unity/Ejemplo-corrutina.md-de-Unity/Ejemplo-corrutina"],"tags":[],"content":"Git\n0 - Git Index\nLenguajes de programación\nCSharp index\nWebdev\nWebDev index\nWPF\nWPF index\nPrism\nPrism index\nProgramación\nAlgoritmica index\nOptimizaciones generales Núcleo\nProgramas\nProgramas index\nUnity\nUnity index\nObsidian\nObsidian index\nPatrones de diseño\nPatrones de diseño index\nPaginas a recordar\nPáginas a recordar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"Programación/1--Teoria-Programación/Algoritmica/Algoritmica-index":{"title":"Algoritmica index","links":["Programación/1--Teoria-Programación/Algoritmica/Algorítmica-voraz-algoritmos-voraces"],"tags":[],"content":"Algorítmica voraz algoritmos voraces"},"Programación/1--Teoria-Programación/Algoritmica/Algorítmica-voraz-algoritmos-voraces":{"title":"Algorítmica voraz algoritmos voraces","links":["Programación/1--Teoria-Programación/Algoritmica/Problemas-de-algoritmica"],"tags":[],"content":"Es la solución a un problema mediante un algoritmo que no se para a revisar sus decisiones. Se elige una estrategia de resolución, se seleccionan las ramas y se continúa hasta la hoja (solución) con la esperanza de tener una solución factible y óptima.\nSpoiler, no tiene porqué ser ni una ni otra\nLa parte positiva de estos algoritmos es que son muy eficientes aunque es difícil demostrar que sean correctos\nPara ejemplificar nos vamos a basar en el ejemplo de las monedas\nmás problemas aquí\nQueremos devolver una cantidad de dinero con el menor número de monedas posibles\nPara que funcione la disponibilidad de monedas debe ser infinita.\nTipos de voraz\nFuerza bruta\nConsiste en calcular todas las posibilidades y devolver la óptima. Evidentemente este método se puede ir muchísimo de coste.\nVoraz naif\nEn cualquier orden, seleccionar la cantidad máxima posible. (ejemplo de monedas abajo). No tiene por qué conducir a solución óptima.\nSi ordenamos en sentido ascendente {python}[1, 2, 5, 10], la devolución de 11€ serían 11 monedas, es decir, la peor solución posible.\nMás elaborada\nOrdenar en sentido descendente. La solucion factible y óptima depende del sistema monetario y la cantidad a devolver.\n**A veces no hay solución\n\nSi el sistema monetario es [7, 3], no existe solución factible.\n\nA veces no encuentra la solución óptima aunque la hay\n\n12€ en el sistema [5, 4, 1] devolvería 2 de 5€ y 2 de 1€ (4 monedas) cuando lo óptimo son 3 de 4€\n\nA veces ni siquiera encuentra una solución factible aunque la hay\n\n5€ en el sistema [4, 3, 2], devolvería 4 cuando la solución sería 1 de 3€ y otra de 2€\n\nEsta estrategia funcionaría siempre con monedas de potencias específicas, de base c que incluyan c^0. ejemplo 2^0, 2^1, 2^2…"},"Programación/1--Teoria-Programación/Algoritmica/Analisis-de-eficiencia-de-algoritmos":{"title":"Analisis de eficiencia de algoritmos","links":[],"tags":[],"content":"Benchmark en C#\nPara comparar la diferencia de consumo entre dos métodos hay un framework llamado BenchMarkDotNet, el cual, tras marcar los métodos a comparar con un [Benchmark] te sacará la comparación con el error y la desviación típica\nBig O es una forma simplificada de analizar algoritmos para compararlos y crearnos una idea de su ejecución y toma como referencia el caso peor.\nLa talla del problema (los items que entran en juego) se representan con una n\nNormalmente se habla de:\n\ncaso mejor (cuando todo sale bien, solución trivial o ya encontrada) también llamado Big Omega,\ncaso medio (que es el que se dará con mayor frecuencia) que llamamos big theta\ny caso peor (que analiza el punto más débil del algoritmo, por ejemplo, que nunca tome el mejor pivote en el caso de Quicksort, por ejemplo) que ya hemos comentado que llamamos Big O\n\nReglas generales\nLas constantes no importan\nSi el algoritmo funciona del orden de 5n, pasará a ser O(n), ya que según se haga grande la n, no es suficientemente relevante si es x5,\nLa jerarquía de eficiencia es la siguiente\n\n\nAprender a calcularlo\ntiempo constante\nen la operación x = 5 + (15* 20)\nno depende de la talla de entrada, por tanto O(1)\nCómo sería si ahora tenemos el siguiente trozo de código?\nx = 5 + (15* 20)\n \ny = 15 - 2\n \nprint x + y\nPues que sería O(1) + O(1) + O(1) = O(3)\nPero recordemos que despreciamos las constantes, así que, resultado final O(1)\nTiempo lineal\nPara el siguiente trozo de código tenemos un bucle de n veces\nfor x in range(n):\n    print x\nSabemos que print es O(1), pero como se repite n veces, será n * O(1), por tanto O(n)\nDepende de la talla del problema por eso no se puede despreciar como una constante\nPor último tenemos la siguiente línea de código\ny = 15 - 2     # O(1)\n \nfor x in range(n):  # O(n)\n    print x\n \nO(1) + O(n)\nComo hemos visto en la jerarquía O(n) &gt; O(1), por tanto, resultado O(n). Porque en comparación O(1) es despreciable\nTiempo cuadrático\nfor x in range(n):\n    for y in range(n):\n        print x * y      # O(1)\nTenemos que la operación O(1) se ejecuta n*n veces, por tanto O(n^2)\nOtro ejemplo\nx = 5 + (15* 20)         # O(1) \n \nfor x in range(n):       # O(n)\n    print x * y          # O(1)\n \nfor x in range(n):       # O(n^2)\n    for y in range(n):\n        print x * y      # O(1)\nTenemos O(1) + O(n) + O(n^2). Como domina la n^2, pues el resultado es O(n^2)\nPero qué pasa con las condiciones?\nif x &gt; 0:\n   # O(1)\n \nelif x &lt; 0:\n   # O(log n)\n \nelse:\n   # O(n^2)\nTomaríamos el peor escenario posible: O(n^2)"},"Programación/1--Teoria-Programación/Algoritmica/Problemas-de-algoritmica":{"title":"Problemas de algoritmica","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nProblema de las monedas\nQueremos devolver una cantidad de dinero con el menor número de monedas posibles\nPara que funcione la disponibilidad de monedas debe ser infinita.\nProblema de la mochila\nConsiste en el problema de tener un almacenamiento (mochila, barco, avión, camión…) con un límite de peso y de objetos que puedo transportar. Los objetos tienen diferentes valores (precio) y el objetivo es maximizar el valor sin superar los límites\nExisten dos variantes con o sin fraccionamiento. Es decir, se puede dividir o no la carta en infinitas partes?\nMochila con fraccionamiento\nSupongamos que en la mochila caben W = 20 kg de peso, y que tenemos tres productos (N = 3) con pesos w1 = 18 kg, w2 = 15 kg y w3 = 10 kg. El valor de cada uno de los productos es v1 = 25€, v2 = 24€ y v3 = 15€. Una carga factible de la mochila sería (1/2, 1/3, 1/4). Su peso es de 16.5 kg y el beneficio que nos reporta, de 24.25€. \nNaturalmente, no es la única solución factible. Por ejemplo, (1, 2/15, 0), supone cargar la mochila con un peso de 20 kg y obtener un beneficio de 28.20€. No podemos plantearnos siquiera enumerar todo el conjunto de soluciones factibles para buscar la óptima, una por una, pues su numero es infinito.\nOtro supuesto\nCapacidad = 50, valores = [60, 30, 40, 20, 75], pesos = [40, 30, 20, 10, 50]. \nUna solución óptima es 100% del 3 y 4 y 40% del 5 → peso 50 valor 90\nSolución voraz naif\n100% del primero 33% del segundo. Peso 50, Valor 70.\nEs factible pero no óptimo.\nSolución voraz ordenada\nTenemos 3 formas de ordenar:\na) De mayor a menor valor.\nb) De menor a mayor peso.\nc) De mayor a menor relación valor/peso\nLa última nos da la solución óptima\n\nSelección de actividades"},"Programación/1--Teoria-Programación/Arquitecturas-software/DDD-(Domain-Driven-Design)":{"title":"DDD (Domain Driven Design)","links":[],"tags":[],"content":"Permite que el software acepte más fácilmente las mejoras y tendrá muchas más posibilidades de sobrevivir y prosperar intacto durante años.\nEs un conjunto de ideas, principios y patrones que ayudan a diseñar sistemas de software basados en el modelo subyacente del dominio del negocio. El DDD tiene dos espacios distintos, el espacio del problema y el espacio de la solución.\nEn el espacio del problema, se define la estructura a gran escala del sistema con patrones estratégicos, que se centran en el análisis de un dominio, subdominios y lenguaje ubicuo.\nMientras que en el espacio de la solución, se adoptan patrones tácticos. Estos patrones incluyen el contexto delimitado, el mapeo de contexto, las entidades, los agregados, los eventos de dominio, los servicios de dominio, los servicios de aplicación y la infraestructura. Estos patrones tácticos le ayudarán a diseñar microservicios que estén débilmente acoplados y cohesionados\nContraejemplo:\nProblema: Un registro en una aplicacion SaaS\nSolución: Una clase Cliente, que tiene un método CrearCliente\nEl método SignUpForSaaSSubscription reflejaría mejor la intención\nImplementación\nPor lo que tengo entendido el DDD no define ninguna implementación explícita, es decir, comprende diversas opciones, pero no se cierra a que puedas desarrollar tus propias implementaciones teniendo en mente la forma de funcionar del DDD (es decir, teniendo en cuenta el dominio).\nLas implementaciones más comunes que he encontrado son:\n\nen forma de cebolla (Onion Architecture)\n\n\n\nen forma de capas (N-Layer Architecture)\n\n\nCada una de estas implementaciones tiene sus peculiaridades, que habría que ver específicamente, pero no tienen tanto que ver con el DDD, sino con esa implementación concreta.\nDependencia dentro de un modelo DDD (aplicado a por capas)\n\nDependencias en la arquitectura cebolla\nParece que siempre es de fuera hacia adentro\n\nBibliografía\ncodigoencasa.com/domain-driven-design/ \nxurxodeveloper.blogspot.com/2014/01/ddd-la-logica-de-dominio-es-el-corazon.html \nlearn.microsoft.com/es-es/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice\nKeywords\nDiseño guiado por el dominio"},"Programación/1--Teoria-Programación/Expresiones-regulares":{"title":"Expresiones regulares","links":[],"tags":[],"content":"A(?!B) Negative Lookahead (mirada hacia adelante negativa). La B no la captura, captura aquellas A que NO estén precedidas por B\nEjemplo: AA AB AC, seleccionará la A de AA y la A de AC\nCondicionales\nSigue la clásica estructura if-then-else, con la siguiente sintaxis:\n\n((&lt;condicion-para-then&gt;)|&lt;condicion-para-else&gt;)&lt;aquí puede haber más regex&gt;(?(2)&lt;regex-then&gt;|&lt;regex-else&gt;)\nSi se da la condición en morado, se buscará por la expresión regular en azul, si se da la condición en “rosa” se buscará por la expresión regular en naranja. El ?(2) indica que está comprobando si existe la condición en morado, que está siendo capturada por el grupo 2, en cuyo caso busca en la parte que tiene justo a su derecha, en caso contrario, la que está tras la barra vertical.\nEjemplo:\n\n((a)|b)(?(2)A|B)\nEsta expresión capturará lo siguiente\naA y bB, pero no aB ni bA\nPara cuando tienes problemas con carácteres Unicode usa esta regex [^\\x00-\\x7f]\nKeywords\nRegexp"},"Programación/1--Teoria-Programación/Metologias-de-programación/Programación-extrema":{"title":"Programación extrema","links":[],"tags":[],"content":"\n\nLas cosas que hacemos (prácticas, en este caso, implementar interfaces para casi todo) deben estar fundamentadas sobre unos principios, en este caso para aislar el dominio, que a su vez deben tener una idea base que queremos satisfacer (valor) que en este caso es para otorgar de flexibilidad o simplicidad al proyecto\nEn resumen, la decisión de implementar muchas interfaces en nuestro proyecto está basada en aislar el dominio porque nos aporta el beneficio de la flexibilidad\nLo podemos reformular como “Qué quiero” = flexibilidad, “Cómo lo podemos conseguir?” = Aislando el dominio, “De qué forma puedo aislar el dominio?” = Mediante las interfaces\nPrácticas del eXtreme Programming\nEquipo colocalizado: Se refiere a la situación física del equipo. Nos sentamos juntos? Se comunica el equipo? Está cohesionado? Discutis los problemas?\nEquipo multidisciplinar: Creo que se refiere a que en el equipo haya suficientes integrantes como para que puedan cumplir cualquier requisito\nEspacio útil e informativo: Administrar un sitio para compartir información, como problemas que surjan o el estado del proyecto. Puede ser físico o digital\nTrabajo con impacto (energized work): Cuando te pongas a trabajar, debe ser porque estás en condiciones, que no te duela la cabeza o estés distraído por lo que sea, trabajar estando mal no contribuye y puede afectar negativamente al equipo\nPair programming: \nHistorias de usuario: \nCiclo semanal y trimestrales de planificación: En lugar de documentos gigantes de requisitos, dividir en documentos más manejables y estratégicos\nTiempo de “no ocupación” (Slack time): Es un tiempo tras el trabajo en el que descansas pero no cierras del todo, y al hablar con los compañeros, hablas del proyecto, es una cosa buena, porque reduce el estrés del trabajo intenso y ayuda a aclarar las ideas sobre como enfrentar ciertos problemas del trabajo. Es un momento clave porque muchas veces caes en la cuenta de cosas que te ayudan a desbloquear problemas\nBuilds de 10 mins max: Las builds ya no suelen tardar tanto, pero este principio afecta también a los tests, por ejemplo, un pack de testing no debería tardar toda una noche, por ejemplo, ya que necesitamos un feedback más inmediato\nIntegración continua: \nLos tests primero: Permite crear documentación funcional sobre lo que se quiere construir\nDiseño incremental: Está discutido. Trata sobre si el diseño puede ser flexible y estar abierto a cambios o, por el contrario, debe ser cerrado desde el principio\nPrincipios\nHumanidad, economía, beneficio mútuo, similitud, mejora y otros 9\nValores\nComunicación, simplicidad, feedback, valentía, respeto y otros\nEl espacio de los problemas tiene que quedar claro para que las prácticas tengan sentido\n\nBibliografía\nDescubre eXtreme Programming en 20 minutos @ CodelyTV - Redescubre la programación\nDiseño incremental en eXtremeProgramming @ CodelyTV - Redescubre la programación Este vídeo no está cubierto en esta página pero es interesante. Por ejemplo, análisis de repositorio aquí youtu.be/9JmZ696vmRw"},"Programación/1--Teoria-Programación/OOP":{"title":"OOP","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/1--Teoria-Programación/Optimizaciones-generales/Optimizaciones-generales-Núcleo":{"title":"Optimizaciones generales Núcleo","links":["Programación/Lenguajes-de-programación/CSharp/Punteros-en-CSharp","Programación/1--Teoria-Programación/Optimizaciones-generales/Quicksort","Conceptos-de-algorítmica","Programación/1--Teoria-Programación/Optimizaciones-generales/Programación-dinámica","Programación/1--Teoria-Programación/Algoritmica/Algorítmica-voraz-algoritmos-voraces","Programación/1--Teoria-Programación/Optimizaciones-generales/Programación-asincrónica","Programación/Lenguajes-de-programación/CSharp/Struct"],"tags":[],"content":"Optimizaciones generales\nMira también Analisis de eficiencia. Ahí se explica cómo comparar el coste dos métodos entre sí\nTips generales\nFunción módulo es costosa\nPara calcular par / impar, en lugar de usar módulo, podemos comparar los bits.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n→\nPunteros para evitar la comprobación de los límites del array\nLa mayoría de código que se escribe en C# “código seguro comprobable”. C# permite un contexto unsafe (no seguro), donde el código puede usar punteros, asignar y liberar bloques de memoria y llamar a métodos mediante punteros de función. El código no seguro en C# no es necesariamente peligroso; solo es código cuya seguridad no se puede comprobar.\nSobre punteros aquí\n\nAlgoritmos de ordenación\nQuicksort\nReducir el consumo por el GB Collector / optimización uso memoria\nReservar memoria en listas\nAl crear una lista por defecto, i.e.\nList&lt;int&gt; m_objects = new List&lt;int&gt;()\nestamos creando una lista sin reservar ni un solo hueco en memoria, por lo que al añadir y eliminar, se están creando huecos que la memoria tenderá a limpiar y reordenar para ser reutilizado por otros datos.\nSin embargo, si tenemos idea de cuántos elementos aproximadamente tendrá nuestra lista, es más eficiente asignar un tamaño\nList&lt;int&gt; m_objects = new List&lt;int&gt;(1000)\nesto reservará un espacio equivalente a 1000 elementos de tipo entero (2MB)\n\nQue los métodos NO devuelvan colecciones\nCuándo un método devuelve una lista, e.g:\npublic string[] SortStringArray(string[] unsorted) {\n    return unsorted.Sort();\n}\ngenera faena al GC, para evitarlo, podemos aprovechar el paso por valor que tiene por defecto el array\npublic void SortStringArray(string[] array) {\n    array = array.Sort();\n}\nCachear siempre\nforeach (var obj in objects.ToArray())\n{\n    ...\n}\nforeach (var obj in objects.ToArray())\n{\n    ...\n}\nEn el ejemplo anterior se ve claramente que la lista objetos se está convirtiendo dos veces en array, si lo haces solo una, eso que ahorras\nList&lt;int&gt; cachedObjects = new List&lt;int&gt;(1000);\n \nforeach (var obj in cachedObjects)\n{\n    ...\n}\nforeach (var obj in cachedObjects)\n{\n    ...\n}\nEsto está claramente mejor, pero todavía tiene un problema, y es que, cada vez que llamemos a este método (y es Update xD) va a crearse una lista de 1000 elementos que se va a borrar cada frame. Para evitarlo, debemos subirlo al scope de la clase, para hacerlo permanente entre frames\nCachear info\nNo tener que calcular el valor cada vez\n\n\n\n\n\n\n\n\nl = &#039;abc&#039;for i in range(100):   print(i * len(l))⇒l= &#039;abc&#039;k = len(l)for i in range(100):   print(i * k)\nEvita variables innecesarias\nEs más trabajo para el GC\n\n\n\n\n\n\n\n\ndef function(b,c):   a = sum(b,c)   return a⇒def function(b,c):   return sum(b,c)\nConceptos de algorítmica\nProgramación dinámica\nVer aquí\nAlgorítmica voraz algoritmos voraces\nVer aquí\nProgramación asincrónica\nVer aquí\nPara código frecuentemente ejecutado\nCreo que los cambios que se describen aquí (ref) son hilar más fino, por lo que solo deben aplicarse en código que se ejecuta frecuentemente , en caso contrario, el impacto será mínimo. Debes hacer un estudio sobre la frecuencia de ejecución del código antes de proceder.\nPara hacer el estudio hay que poner modo Release ir a Depurar &gt; Generador de perfiles de rendimiento... Seleccionar Seguimiento de asignación de objetos de .NET y pulsar Iniciar\n\n\n\n\nAl hacer doble click te indica donde ocurren esas asignaciones de memoria\n\nAquí un ejemplo hecho por ellos para probar todos estos cambios\nUna práctica común es pasar de tipo clase a tipo struct cuando sean “estructuras datos críticos” (no sé a qué se refiere). Deben ser, eso sí, objetos pequeños, de 3 palabras o menos (considerando que una palabra es un integer natural), ya que al pasar por valor, deberá crear una copia. Para evitar estos problemas con structs de tamaños más grandes, considera pasarlos por referencia con ref. Antiguamente, para conseguir esta mejora de eficiencia, los programadores tenían que Punteros para evitar la comprobación de los límites del array\nPara comprobar que no está mutando ningún aspecto dentro de un método (y llevar a errores porque esos valores no estén cambiando en el objeto original) simplemente ponemos readonly en la definición del struct. Si el código no se queja, es que no tenemos ese problema.\nDebido a que el objeto pasa a ser no-null, deberemos evitar las variables como EjemploStruct? ejemplo y en los bucles de un array que comprobasemos si un elemento era null, podemos usar un elemento nullable que tenga el struct dentro, por tanto \nif (ejemplo[i] is not null) { // blabla }\nif (ejemplo[i].Nombre is not null) { // blabla }\nO cualquier estrategia que se te ocurra\nAhora toca pasarlo por referencia a todos los métodos que lo requieran para evitar copias. Siempre que puedas, intenta usar in y out en vez de ref\nEn resumen\n\n\nMedir las asignaciones: Determina qué tipos se están asignando más y cuándo puede reducir las asignaciones del montón.\n\n\nConvertir clase en struct: Muchas veces, los tipos pueden convertirse de una clase a una struct. Su aplicación utiliza el espacio de la pila (heap) en lugar de realizar asignaciones al montón.\n\n\nPreservar la semántica: Convertir una clase en una estructura puede afectar a la semántica de los parámetros y valores de retorno. Cualquier método que modifique sus parámetros debe marcarlos con el modificador ref. Esto garantiza que las modificaciones se realizan en el objeto correcto. Del mismo modo, si una propiedad o el valor de retorno de un método debe ser modificado por la persona que llama, ese retorno debe ser marcado con el modificador ref.\n\n\n\nEvite las copias: Cuando pasas una estructura grande como parámetro, puedes marcar el parámetro con el modificador in. Puedes pasar una referencia en menos bytes, y asegurarte de que el método no modifica el valor original. También puedes devolver valores mediante readonly ref para devolver una referencia que no pueda ser modificada.\n\nBibliografía\nmedium.com/swlh/how-to-write-efficient-and-faster-code-67567e74ef87 \ndocs.unity3d.com/Manual/performance-garbage-collection-best-practices.html\nmaherz.medium.com/garbage-collection-essentials-in-c-e31412a5797f\nTips generales (5 (Extreme) Performance Tips in C#) \nlearn.microsoft.com/es-es/dotnet/csharp/language-reference/unsafe-code \nWikiJavi/inform%C3%A1tica/lenguajes-de-programaci%C3%B3n/csharp/punteros-en-c?authuser=0 \nlearn.microsoft.com/en-us/dotnet/csharp/advanced-topics/performance/ \nlearn.microsoft.com/en-us/dotnet/csharp/advanced-topics/performance/ref-tutorial\nKeywords\nGarbageCollector Garbage recolector basura"},"Programación/1--Teoria-Programación/Optimizaciones-generales/Programación-asincrónica":{"title":"Programación asincrónica","links":[],"tags":[],"content":"sites.google.com/d/13BAZX83ZVzuHzEhdp8djpzp8Y_hPuGTi/p/1UYFbDxJTwkypGTWclKBbe1Etye9O5xAy/edit\n#WIP"},"Programación/1--Teoria-Programación/Optimizaciones-generales/Programación-dinámica":{"title":"Programación dinámica","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/1--Teoria-Programación/Optimizaciones-generales/Quicksort":{"title":"Quicksort","links":["tags/WIP"],"tags":["WIP"],"content":"sites.google.com/d/13BAZX83ZVzuHzEhdp8djpzp8Y_hPuGTi/p/13CSMyEJmp_icXvAVhz9zaWSGoioG9p-5/edit\nWIP"},"Programación/1--Teoria-Programación/Patrones-de-diseño/(DI)-Dependency-Inyection":{"title":"(DI) Dependency Inyection","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Dependencias","Unity/3--Programación/Zenject/Unity-Zenject-GUÍA-RÁPIDA","Programación/1--Teoria-Programación/Patrones-de-diseño/patrón-de-diseño-SOLID-design-pattern"],"tags":[],"content":"Este patrón de diseño nos permite que las clases sean independientes de sus dependencias y obtenemos 3 ventajas principales:\n\n\nModularidad\n\n\nMantenibilidad y escalabilidad\n\n\nTestability (capacidad para hacer tests unitarios)\n\n\nPara un ejemplo en Prism (WPF) Prism Dependencias\nPara un ejemplo en Zenject (Unity) Unity Zenject GUÍA RÁPIDA\nDefiniciones\nUna dependencia, es un objeto necesitado por otra clase (dependiente) ej. Una bala para una pistola\nUn dependiente es la clase que depende de un objeto (dependencia) ej. La pistola, que necesita la bala\nEjemplos de uso\nDepender de la abstracción y no de la implementación concreta (Dependency inversion)\nNormalmente las dependecias las introducimos dependiendo de una implementación en concreto, por ejemplo\nEn este caso, todas las clases que pillen AudioService, tendrán la implementación de Audio service\nPero y si hacemos una clase nueva de AudioService con propiedades de Debug?\n\nTendríamos que cambiar la instancia en todas la clase por DebugAudioService()\n\nMolaría que nos llegue el AudioService que hayamos configurado, a todas las clases\n\nPor lo que lo configuramos aquí, y lo recibiremos donde lo necesitemos\nEn este sentido funciona como un Singleton\nPasamos de\n\na\n\nBibliografía\nModels - WPF MVVM TUTORIAL #1 @SingletonSean\nKeywords\nInyección de dependencia"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Clean-Code/10-consejos-de-Clean-Code":{"title":"10 consejos de Clean Code","links":[],"tags":[],"content":"\nUn nivel de indentación por método\nNo uses la palabra clave ELSE\nEnvuelve primitivos\nSe refiere a que crees objetos con las primitivas para que tenga más semántica, sea mejor sintácticamente (te ayuda el ide) y permite añadir métodos\nColecciones como clases de primer orden\ncualquier clase que contenga una colección no debería contener más atributos. Cada coleccion en su propia clase, así tienen lugar otros metodos como ordenacion p.e.\nAplica la Ley de Demeter\nO principio del mejor conocimiento, que cada clase juegue con sus juguetes o los juguetes que otros le dan, nunca con los juguetes de sus juguetes\nNo abrevies\nMantén las entidades pequeñas\nEvita más de dos atributos de instancia\nEvita getters/setters o atributos públicos\nClases con estado, evita métodos estáticos\nvía: keyvanakbary.com/object-calisthenics-mejora-tu-diseno-orientado-a-objetos/\nvía: samuelcasanova.com/2016/09/resumen-clean-code/     PDF\n\nEjemplo Demeter\nPasar de esto\nclass Piece {\n    public $representation;\n}\n \nclass Location {\n    public $currentPiece;\n}\n \nclass Board {\n    public function boardRepresentation() {\n        $representation = &#039;&#039;;\n \n        foreach ($this-&gt;squares() as $location) {\n            $representation .= $location-&gt;currentPiece-&gt;representation[0];\n        }\n \n        return $representation;\n    }\n}\na esto\nclass Piece {\n    private $representation;\n \n    private function character() {\n        return $this-&gt;representation[0];\n    }\n \n    public function addTo($str) {\n        return $str . $this-&gt;character();\n    }\n}\n \nclass Location {\n    public $currentPiece;\n \n    public function addTo($str) {\n        return $this-&gt;currentPiece-&gt;addTo($str);\n    }\n}\n \nclass Board {\n    public function boardRepresentation() {\n        $representation = &#039;&#039;;\n \n        foreach ($this-&gt;squares() as $location) {\n            $representation = $location-&gt;addTo($representation);\n        }\n \n        return $representation;\n    }\n}\n"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Clean-Code/Clean-Code-Núcleo":{"title":"Clean Code Núcleo","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/Clean-Code/10-consejos-de-Clean-Code","Programación/1--Teoria-Programación/Patrones-de-diseño/Clean-Code/Orden-de-aparición-en-los-archivos-de-código"],"tags":[],"content":"Índice\n10 consejos de Clean Code\nOrden de aparición en los archivos de código\nOtros recursos\nOrden de aparición en los archivos de código\nPrincipio de reutilización de abstracciones (RAP Reused Abstraccions Principle)\nConsejos generales\nEliminar el else de la condición (en un método)\nDiccionario en vez de block if-ifelse-else\nMétodos largos\nExtrae funcionalidad (aunque sea solo 1 línea) y pon un nombre descriptivo, de tal forma que será más legible\nProblemas derivados\nVariables locales interfiriendo\nParametros repetitivos\nObtener mucha info de un objeto para pasarla a un método\nVariables demasiado entrelazadas\nCódigo confuso\nIntrincadas condiciones\nPasarse de buenas prácticas\nBibliografía\nKeywords\nOrden de aparición en los archivos de código\nPrincipio de reutilización de abstracciones (RAP Reused Abstraccions Principle) \nEste principio indica que no debemos pasar de crear abstracciones ya que pueden consumir tiempo y no servir realmente para nada.\nPor defecto, si vemos que una clase no va a tener más implementaciones concretas, no se abstrae.\nEjemplo:\nSi tenemos una clase DisableImageInSpecificContext y sabemos que nadie más va a usar los métodos que dicha clase tiene, mejor no hacemos una interfaz\nSin embargo MeteoRef (ejemplo de Dependency Inversion) que es una clase que obtiene la información de diferentes herramientas meteorológicas, debería tener diferentes implementaciones dependiendo de dicha herramienta, por lo que tendría sentido crear una interfaz para que todos los elementos creados a partir de MeteoRef tengan el método Mostrar()\nConsejos generales\nEliminar el else de la condición (en un método)\ndef function():\n  if a == True :\n    #do this\n  else:\n    #do this\n⬇️\ndef function():\n if a == True :\n   #do this\n   return value\n #do this \nDiccionario en vez de block if-ifelse-else\nvariable_one = &#039;variable&#039;\n if variable_one == &#039;a&#039; :\n   variable_two = 1\n elif variable_one == &#039;b&#039; :\n   variable_two = 2\n elif variable_one == &#039;b&#039; :\n   variable_two = 3 \n else:\n   variable_two = 4 \n   ```\n   \n   ⬇️\n   \n```python\nvariable_one = &#039;variable&#039;\ndict_ = {&#039;a&#039; = 1, &#039;b&#039; = 2, &#039;c&#039; = 3}\nvariable_two = dict_.get(variable_one,4) \nMétodos largos\nExtrae funcionalidad (aunque sea solo 1 línea) y pon un nombre descriptivo, de tal forma que será más legible\n\nProblemas derivados\nVariables locales interfiriendo\nCrea un método para que calcule su valor (si no es demasiado costoso computacionalmente)\nfloat TargetSpeed =&gt; baseSpeed * gameSpeed \nParametros repetitivos\nCrea con dichos parámetros un objeto\n\nObtener mucha info de un objeto para pasarla a un método\nPasa el objeto entero al método\n\nVariables demasiado entrelazadas\nConvierte el método en un objeto\nCódigo confuso\nIntrincadas condiciones\nDescomponer las condiciones (sacarlas a un método que se encargue de evaluarlas) y de paso [[#[Extrae funcionalidad](https //refactoring.guru/es/extract-method) (aunque sea solo 1 línea) y pon un nombre descriptivo, de tal forma que será más legible|extrae funcionalidad]] de los then y else\n\nPasarse de buenas prácticas\nHay que tener cuidado al aplicar estas mejoras ya que el exceso de las mismas puede llevar a la anti-refactorización\nLa condición extraída es menos legible (ref [[#[Intrincadas condiciones](https //refactoring.guru/es/decompose-conditional)|Descomponer condiciones]])\n\npatrón de diseño SOLID design pattern \nBibliografía\nrefactoring.guru/es/refactoring\nKeywords\nLegibilidad codigo"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Clean-Code/Orden-de-aparición-en-los-archivos-de-código":{"title":"Orden de aparición en los archivos de código","links":[],"tags":[],"content":"De acuerdo a las reglas de documentación de StyleCop el orden es el siguiente:\nDentro de una clase, estructura o interfaz: (SA1201 y SA1203)\n\nVariables constantes\nVariables\nConstructores\nFinalizadores (Destructores) - Lo que debe hacer la instancia cuando se destruye\nDelegados\nEventos\nEnums\nInterfaces (implementations) - supongo que se refiere a los métodos que toca definit al añadir la interfaz a la clase\nPropiedades - Lo de public Vector3 CurrentPosition ⇒ transform.position;\nIndizadores- permiten que la clase/struct pueda ser accedide como un array (igual que un diccionario) myClaseIndexada[1].ejemplo()\nMetodos\nStructs\nSubclasses\n\nDentro de cada uno de estos grupo, ordenado por acceso: (SA1202)\n\npublic / SerializeField (esta me la he inventado)\ninternal\nprotected internal\nprotected\nprivate\n\nDentro de cada uno de estro grupos, ordenado por estatico: (SA1204)\n\nstatic\nnon-static\n\nDentro de los cuales, ordenado por readonly: (SA1214 y SA1215)\n\nreadonly\nnon-readonly\n\nLa lista sigue hasta unas 130 línes que no voy a detallas, pero algunas de ellas son las siguientes:\n\npublic static methods\npublic methods\ninternal static methods\ninternal methods\nprotected internal static methods\nprotected internal methods\nprotected static methods\nprotected methods\nprivate static methods\nprivate methods\n\nEn la docu indica también que si no viene bien el order, por ejemplo, que necesites declarar varias interfaces cuyos métodos deban agruparse, recomiendan hacer un una clase parcial para agruparlos.\nEjemplo práctico\n// public\n// static\npublic static readonly Pi = 3.14f; //readonly primero\npublic static GameState state;\n// no static\npublic readonly float randomValue = new Random.Range(0, 1); // readonly primero\npublic GameObject prefab;\n  \n// internal, protected internal, protected\n  \n// private\n// static\nprivate static readonly Vector3 finalPosition = new Vector3(0, 0, 0); // readonly primero\nprivate static Vector3 currentPositionToSpawn;\n// no static\nprivate readonly float maxLife; // readonly first\nprivate float currentLife;\n  \n// Delegados\npublic delegate blabla\nprivate delegate balbla2\n  \n// Eventos\npublic static event blabla OnBlabla \npublic event blabla2 OnBlabla2\nprivate static event blabla OnBlablaPrivate\nprivate event blabla2 OnBlabla2Private\n  \n// Enum\npublic enum dirs { Up, Left, Down, Right }\n  \n// Implementación interfaces\npublic void OnPointerClickHandler() { }\n  \n// Propiedades\npublic Vector3 CurrentPosition =&gt; transform.position;\n  \n// Indizadores\nprivate T[] arr = new T[100];\npublic T this[int i]\n{\n    get { return arr[i]; }\n    set { arr[i] = value; }\n}\n  \n// Métodos\n// public\npublic static float Sum(float a, float b) =&gt; a + b;\npublic void Move(Vector3 pos) =&gt; transform.posicion = pos;\n  \n// internal, protected internal, protected\n  \n// private\nprivate static Zombie FindZombieMinLife() =&gt; Zombie.Instance.List.ForEach(/* Mucho código */);\nprivate void Instance() =&gt; _currentLife = MaxLife;\n \nBibliografía\nstackoverflow.com/questions/150479/order-of-items-in-classes-fields-properties-constructors-methods"},"Programación/1--Teoria-Programación/Patrones-de-diseño/MVC-Modelo-Vista-Controlador":{"title":"MVC Modelo Vista Controlador","links":[],"tags":[],"content":"Keywords: Model View Controller\nEsquema explicativo de esta arquitectura\n"},"Programación/1--Teoria-Programación/Patrones-de-diseño/MVVM-Model-View-ViewModel-(ejemplo-con-WPF)":{"title":"MVVM Model View ViewModel (ejemplo con WPF)","links":["Programación/Lenguajes-de-programación/WPF/4--Ejemplo-MVVM"],"tags":[],"content":"Hay que crear 3 carpetas: Model, View y Modelview\nPor cada vista que creemos en View, deberemos crear un script en ModelView\n\nAdemás, se compone de los siguientes elementos para funcionar: Stores, Services, Commands y Navigation\nEste ejemplo contempla una app de reserva de habitación de hotel\nEste ejemplo está más detallado en 4- Ejemplo MVVM\nModel y View\nModelo\n\nNada reseñable del modelo o las vistas. De la vista simplemente resaltar que ha creado una vista principal donde cargará el resto de vistas, pero dudo que sea obligatorio siquiera. Es en la parte del ViewModel donde está el nucleo de esta técnica\nViewModel\nDebemos crear un ViewModelBase que implementará INotifyPropertyChanged del que heredarán el resto de nuestro clases ViewModel. De esta forma, si en el ViewModel en cuestión hubiese un cambio, la vista se actualizaría automáticamente\npublic class ViewModelBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler? PropertyChanged;\n \n    protected void OnPropertyChanged(string propertyName)\n    {\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n    }\n}\nAhora creamos una clase ViewModel por cada vista que tengamos (incluída MainWindow, que tendrá MainViewModel), heredando, como decíamos, de ViewModelBase. Un ejemplo:\npublic class ReservationListingViewModel : ViewModelBase\n{\n    private readonly ObservableCollection&lt;ReservationViewModel&gt; _reservations;\n    public ICommand MakeReservationCommand { get; }\n \n    public IEnumerable&lt;ReservationViewModel&gt; Reservations =&gt; _reservations;\n    public ReservationListingViewModel()\n    {\n        _reservations = new ObservableCollection&lt;ReservationViewModel&gt;();\n \n        // Database loading\n        _reservations.Add(\n            new ReservationViewModel(\n                new Reservation(new RoomID(1, 2), &quot;Persona A&quot;)\n            ));\n \n        _reservations.Add(\n            new ReservationViewModel(\n                new Reservation(new RoomID(1, 3), &quot;Persona B&quot;)\n            ));\n        _reservations.Add(\n            new ReservationViewModel(\n                new Reservation(new RoomID(2, 2), &quot;Persona C&quot;)\n            ));\n    }\n}\nQue hace uso de la siguiente clase\npublic class ReservationViewModel : ViewModelBase\n{\n    // MODEL\n    private readonly Reservation _reservation;\n \n    // VIEW\n    public string RoomID =&gt; _reservation.RoomID?.ToString();\n \n    public string Name =&gt; _reservation.Name;\n    public ReservationViewModel(Reservation reservation)\n    {\n        _reservation = reservation;\n    }\n}\nBibliografía\nyoutu.be/fZxZswmC_BY\nKeywords\nModel View ViewModel (ejemplo con WPF)"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Patron-de-diseño-Mediator":{"title":"Patron de diseño Mediator","links":[],"tags":[],"content":"Un mediador es una clase que coordina a las demás\nPor ejemplo un avión no se puede poner de acuerdo con una veintena de aviones sobre cuál aterriza primero y dónde, en su lugar, los aviones notifican a una torre de control (mediador) y es ésta la que decide\nBibliografía\nrefactoring.guru"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Patron-diseño-Value-Object":{"title":"Patron diseño Value Object","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/patrón-de-diseño-SOLID-design-pattern"],"tags":[],"content":"¿Qué es?\nLos Value Object son objetos en los que encapsulamos variables. Esto nos permite que se autovalide. En el ejemplo, el Email se está validando con una expresión regular en el momento de la instancia\nAdemás nos permite crear otros métodos con los que manejar el objeto. Por ejemplo si quisieramos tener un int, luego podríamos hacer variable.next() y el estado del objeto cambiaría\n\n¿Para qué?\nSirve para poder extraer la funcionalidad que no es realmente de una clase (por ejemplo, la validacion de email, no es responsabilidad del usuario) y así respetar el principio de responsibilidad única\n\nBibliografía\nwww.youtube.com/watch%C3%B3n"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Patrones-de-diseño-index":{"title":"Patrones de diseño index","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/(DI)-Dependency-Inyection","Programación/1--Teoria-Programación/Patrones-de-diseño/MVVM-Model-View-ViewModel-(ejemplo-con-WPF)","Programación/1--Teoria-Programación/Patrones-de-diseño/patrón-de-diseño-SOLID-design-pattern","Programación/1--Teoria-Programación/Patrones-de-diseño/Clean-Code/Clean-Code-Núcleo"],"tags":[],"content":"(DI) Dependency Inyection\nMVVM Model View ViewModel (ejemplo con WPF)\npatrón de diseño SOLID design pattern\nClean Code\nClean Code Núcleo"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Patrón-Observer":{"title":"Patrón Observer","links":[],"tags":[],"content":"Eventos\n\nBibliografía\nrefactoring.guru/es/design-patterns/strategy \nKeywords\nObserver Pattern patron observador"},"Programación/1--Teoria-Programación/Patrones-de-diseño/Patrón-Strategy":{"title":"Patrón Strategy","links":[],"tags":[],"content":"Segrega los algoritmos en scripts diferentes\n\nBibliografía\nrefactoring.guru/es/design-patterns/strategy \nKeywords\nStrategy Pattern patron estrategia"},"Programación/1--Teoria-Programación/Patrones-de-diseño/patrón-de-diseño-SOLID-design-pattern":{"title":"patrón de diseño SOLID design pattern","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/(DI)-Dependency-Inyection"],"tags":[],"content":"Aplicar el patrón de diseño (DI) Dependency Inyection debería cumplir automáticamente los principio de Single Responsibility y Dependency Inversion\nDefiniciones\n\n\nMódulo / clase de alto nivel es aquella que está más cerca del usuario, la que el usuario acciona\n\n\nMódulo / clase de bajo nivel es aquella que subyace, las clases de alto nivel son las que el hacen uso de las de bajo nivel\n\n\nSingle Responsibility\nUna clase se tiene que encargar de solo una tarea.\n\nEse método trata sobre persistencia, no sobre datos\nSolución\nMover el método discordante a otra clase destinada a la persistencia\n\nOpen Close\nEl código debe estar abierto a mejoras pero cerrado a modificaciones\nSegún lo entiendo yo es, gracias a crear la interfaz (Liskov Substitution) si quiere modificar la funcionalidad, crearás una nueva clase que derive de la interfaz en lugar de modificar el código original\nEjemplo mala praxis\n\nEn este ejemplo, por cada clase representando a una figura que añadamos, deberíamos estar editándola.\nSolución\nAbstraer las posibles futuras formas con una interfaz que nos defina el método en la propia figura.\n\n\nLiskov Substitution\nUna clase nunca podrá reducir or sustituir funcionalidad de una clase padre, solo aumentarla / añadir funcionalidad\nEjemplo mala praxis\n\nSe cambia la funcionalidad de Rectangle poniendo el mismo valor a ambas independientemente de si editar altura o anchura\nSolución (en este caso)\nNo heredar, sencillamente añadir un método IsSquare() que nos indica si lo es o no, el resto de la funcionalidad es idéntica.\n\nInterface Segregation\nEs como la de Single Responsability pero aplicado a las interfaces\nEjemplo mala praxis\n\nAl tener una interfaz con métodos tan diversos, nos obliga a implementar métodos vacíos en clases que no lo necesitan, ya que, siguiente este ejemplo…\n… un personaje Goblin, no debería poder disparar o hablar, ya que carecen de estas habilidades\n\nSolución\nDividir esa interfaz en tantas como sea necesario.\n\nDependency Inversion\nNota: Dependiente depende de dependencia. Por tanto Dependiente ⇒ Dependencia\nLa más confusa. Una clase de alto nivel no debe estar acoplada a una de bajo nivel. Sirve para analizar 3 posibles problemas: el nivel de rigidez, la fragilidad y la inmovilidad del sistema.\nLa explicación de qué es alto y bajo nivel, en está Definiciones\nEjemplo mala práxis (1)\n\nUna clase de alto nivel es esa que hace uso de otra de bajo nivel.\nEn este ejemplo EstacioMeteorologica usa Termometro\ntermometro.MostrarTemperaturaActual();\nEn este ejemplo hay 3 cosas mal. Las vemos una a una:\nPor una parte EstacioMeteorologica depende de Termometro y de Console. Por su parte Termometro depende de Console\n\nComo Termometro devuelve el valor, ya no depende de Console, por lo que, de cambiar la implemetación de Console, Termometro ya no se vería afectada\nEvidentemente siempre va a haber dependencias. Pero cuantas menos, mejor\n\nEsta estación meteorológica no es muy útil si solo puede dar la temperatura. Sería interesante abstraer con una interfaz todos los sensores para poder dar flexibilidad a EstacioMeterologica. (Esta implementación se llama patrón de la Fachada)\nLa interfaz nos servirá como contrato para todas las clases que la necesiten\nGracias a esto, hemos desacoplado EstacioMeterologica de la implementación concreta de Termometro, podríamos crear otros tipos de termómetro sin tener que editar EstacioMeterologica\n\nComo creamos el objeto Termometro (dependencia) dentro del método o constructor, nos limita el uso a ese y solo ese termómetro, por que lo suyo es inyectarlo. Hay tres opciones: en el constructor, por un setter o por interfaz\n\nDesde fuera (en el Start()) podríamos crear varios objetos EstacioMeteorologica\nnew EstacioMeteorologica(new Termometro()) \no \nnew EstacioMeteorologica(new Barometro())\n\nEjemplo mala práxis (2)\n\nSolución\nEmplear una interfaz para que cada clase de bajo nivel la implemente\n\nDe tal forma que la clase de alto nivel, no tiene por qué saber cuántas hay ni cuales son las de bajo nivel.\nDe esta forma está desacoplado, puedes añadir tantas de bajo nivel como necesites, eliminar alguna que ya no necesites o editarlas sin que cambie la implementación de la de alto nivel\n\nEjemplo completo usando Unity\nEsta clase se encarga de\n\n\nLanzar un rayo para buscar si choca\n\n\nComprobar si lo chocado es seleccionable\n\n\nAplicar / Retirar el efecto de la selección\n\n\n\nPara poder aplicar Single Resp, debemos sacar toda esta funcionalidad a diferentes clases. Vamos paso a paso\nComenzamos por la de aplicar o retirar el efecto de la selección\nAplicar o retirar el efecto de la selección\nLo primero que podemos hacer es aislar la funcionalidad en un método\n\nCreamos la referencia a la nueva clase, en la clase que la usa\n\nAntes de pasar los métodos a la nueva clase, debemos asegurarnos que tiene todas las variables miembro que necesita. En este caso, le faltan las referencias a defaultMaterial y highlightMaterial\nAsí queda una vez movida esa responsabilidad a la nueva clase.\nSin embargo, todavía no hemos aplicado el principio de Open-Close. ya que si quieramos modificar el comportamiento, pero para ello, vamos a aplicar el principio de sustutición de Liskov.\n\nPara ello vamos a extraer de la nueva clase, una interfaz, sobre la que dependeremos.\nDe esta forma, en vez de depender de la clase concreta, dependemos de la interfaz que puede ejecutar la funcionalidad de cualquier clase concreta que implemente ISelectionResponse\n\nEsto nos permite también cumplir con el principio de inversión de dependencias, ya que, en lugar de depender de lo concreto, dependemos de lo abstracto\n\nAhora SelectionManager está adscrita al principio Open-Close ya que podemos crear la implementación que queramos de ISelectionResponse y funcionará sin editar el código. Ejemplo:\nEn lugar de aplicar un material, coge otro componente y le aplica un cambio\n\nCrear el RayCast\nVamos a hacer lo mismo moviendo esta funcionalidad a una clase y extrayendo de ésta una interfaz\n\nClase nueva (Single Responsibility)\n\nExtraemos la interfaz (Liskov Substitution)\n\nReferencia a la interfaz (Dependency Inversion)\n\nComprobar si lo chocado es seleccionable\nEsta es la parte más complicada\n\n\nPasamos el código a la nueva clase\n\n\nPasamos los miembros que necesita\n\n\nCreamos un método para devolver la selección\n\n\n\nLiskov substitution\n\nDependency Inversion\n\nResultado final\n\nBibliografía\nClean Code Teil 2: Die SOLID Design Prinzipien\ndesarrolloweb.com/articulos/patron-diseno-contenedor-dependencias.html \nyoutu.be/QDldZWvNK_E"},"Programación/1--Teoria-Programación/UML":{"title":"UML","links":["tags/CambiarURL"],"tags":["CambiarURL"],"content":"Significa Unified Modeling Language\n\nComposición\nLa Composición se suele representar en UML con un rombo de color negro en un extremo de las clases.\nUso explicado en OOP: ComposiciónCambiarURL\n\nAgregación\nLa Agregación se suele representar en UML con un rombo de color transparente en un extremo de las clases.\nUso explicado en OOP: Agregación\n\nDependencia\n\nAsociación direccional\n\nInfo a saco\n\nBibliografía\ngeeks.ms/jorge/2017/08/01/agregacion-y-composicion-en-csharp/ \nmodeling-languages.com/best-uml-cheatsheets-and-reference-guides/"},"Programación/Lenguajes-de-programación/Android/Clase-Action":{"title":"Clase Action","links":["Programación/Lenguajes-de-programación/Android/Clase-Intent"],"tags":[],"content":"NO CONFUNDIR CON ACTION DE INTENT Según la wiki de Android es una entrada accionable que se devuelve como resultado de una llamada a android.service.credentials.BeginGetCredentialResponse\nBibliografía\ndeveloper.android.com/reference/androidx/credentials/provider/Action"},"Programación/Lenguajes-de-programación/Android/Clase-Activity":{"title":"Clase Activity","links":["tags/setContentView"],"tags":["setContentView"],"content":"Según la wiki de Android una Activity es algo único y específico que el usuario puede hacer. Casi todas interactúan con el usuario, por tanto, se encarga de crear una ventana en la que poner la interfaz consetContentView \nTal y como yo lo veo, es la interfaz de usuario\nBibliografía\ndeveloper.android.com/reference/kotlin/android/app/Activity"},"Programación/Lenguajes-de-programación/Android/Clase-Context":{"title":"Clase Context","links":["Programación/Lenguajes-de-programación/Android/Clase-Activity","Programación/Lenguajes-de-programación/Android/Clase-Intent"],"tags":[],"content":"Es una clase abstracta con info global sobre el entorno de la app. Permite acceso a recursos y clases así como llamadas a operaciones a nivel de aplicación como ejecutar Activities o lanzar y recibir Intents\nBibliografía\ndeveloper.android.com/reference/android/content/Context"},"Programación/Lenguajes-de-programación/Android/Clase-Fragment":{"title":"Clase Fragment","links":["Programación/Lenguajes-de-programación/Android/Clase-Activity"],"tags":[],"content":"Son una parte reutilizable de la UI. Deben ser posteriormente integrados en una Clase Activity para poderse visualizar. Un Fragment puede contener otros Fragment\nBibliografía\ndeveloper.android.com/guide/fragments"},"Programación/Lenguajes-de-programación/Android/Clase-Intent":{"title":"Clase Intent","links":["Programación/Lenguajes-de-programación/Android/Clase-Activity","Programación/Lenguajes-de-programación/Android/Uri"],"tags":[],"content":"Según la wiki de Android, es la abstracción de una operación, puede iniciar una Clase Activity o iniciar / asociarse con un Servicio\nTal y como yo lo veo, es un iniciador de pantallas (activities)\nContiene una Action - la acción general a ejecutar (ACTION_VIEW, ACTION_EDIT, ACTION_MAIN, etc)\ny data - que es la info con la que va a operar como un registro de una persona de una bbdd de contactos expresado como Uri\nAction\nEs un enumerado que indica a qué se dedica esta intent, existen muchísimos y están descritos en la wiki: developer.android.com/reference/android/content/Intent#standard-activity-actions\nBibliografía\ndeveloper.android.com/reference/android/content/Intent"},"Programación/Lenguajes-de-programación/Android/Clase-R":{"title":"Clase R","links":[],"tags":[],"content":"Es una clase generada dinámicamente durante la build e identifica todos los assets\nBibliografía\nstackoverflow.com/questions/6804053/understand-the-r-class-in-android"},"Programación/Lenguajes-de-programación/Android/Como-subir-una-app-a-la-playstore-y-gestion-de-claves-a-Mayo-'17":{"title":"Como subir una app a la playstore y gestion de claves a Mayo '17","links":[],"tags":[],"content":"Debe haber una clave segura y guardar el certificado en un lugar seguro.\nSe debe usar el mismo certificado durante toda la vida útil de la/s aplicación/es.\nSe recomienda un periodo de validez de la firma de 25 años.\nLos nombres de paquete de los archivos de aplicaciones son únicos y permanentes, por lo que debes elegirlos con cuidado. Además, no se pueden eliminar ni reutilizar en el futuro."},"Programación/Lenguajes-de-programación/Android/Desarrollar-para-android-vlc":{"title":"Desarrollar para android vlc","links":[],"tags":[],"content":"vistas\n&lt;Ruta al repo&gt;\\vlc-android\\application\\vlc-android\\src\\org\\videolan\\vlc\\gui\\view\\\n\nmás vistas (aquí está el SleepTimer)\n&lt;Ruta al repo&gt;\\vlc-android\\application\\vlc-android\\src\\org\\videolan\\vlc\\gui\\dialogs\\\n\nMás info y repo\ncode.videolan.org/videolan/vlc-android\ncode.videolan.org/videolan/vlc-android#build-application"},"Programación/Lenguajes-de-programación/Android/El-adb-ayer-funcionaba-y-hoy-no--_-":{"title":"El adb ayer funcionaba y hoy no -_-","links":[],"tags":[],"content":"Lo más probable es que no se haya encendido si quiera. Ejecuta el comando adb devices\nHuawei desconecta la depuración USB cada vez"},"Programación/Lenguajes-de-programación/Android/Hacer-copia-de-seguridad-adb":{"title":"Hacer copia de seguridad adb","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/Lenguajes-de-programación/Android/SharedPreferences":{"title":"SharedPreferences","links":[],"tags":[],"content":"Creo que es como PlayerPrefs de Unity. Una diferencia es que no es estático :/\ngetInt (String key, int defValue); // getBoolean, Float, Long, String, StringSet, All\npara añadir una variable nueva tenemos que crear un editor\nSharedPreferences.Editor editor = nuestroObjDeVariables.edit();\nCon este objeto ya podremos ejecutar las siguientes métodos:\nputInt(String key, int value) // putBoolean, Float, Long, String, StringSet\nPero antes de acabar, tienes que guardar los cambios (ya, yo tampoco lo entiendo)\n.commit() los guarda y devuelve un bool si lo ha conseguido\n \n.apply() los guarda sin bool\n \n.clear() + . commit() borra todos los valores que tuviese el objeto SharedPreferences, solo quedará los que acabas de meter en el editor\nBibliografía\ndeveloper.android.com/reference/android/content/SharedPreferences"},"Programación/Lenguajes-de-programación/Android/Uri":{"title":"Uri","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/Lenguajes-de-programación/AutoHotKey-AHK":{"title":"AutoHotKey AHK","links":[],"tags":[],"content":"Keys\nCtrl → ^\nAlt → !\nShift → +\nWin → #\nLCtrl → &lt;^\nRCtrl → &gt;^\nBloq Mayusculas → CapsLock\nLista completa: www.autohotkey.com/docs/v2/KeyList.htm \nEjemplo mapeo\n!c::z ; Alt + C pasará a ser Z (notese que z esta en minuscula)\n^!c::^z ; Ctrl + Alt + C pasará a ser Ctrl + Z\nScripts útiles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\neszett.ahkNumAlwaysLock.ahkequisceta.ahkMayusShift.ahkCambia ç por eszettBloqNum siempre activadoalt c → zalt v → xctrl alt c → ctrl zctrl alt v → ctrl xCambia bloqMayus por shift"},"Programación/Lenguajes-de-programación/CSharp/Atributos-interesantes-de-CSharp":{"title":"Atributos interesantes de CSharp","links":[],"tags":[],"content":"[CallerMemberName] sirve para obtener qué metodo es el que ha hecho la llamada a nuestro método\nEn el fichero también se ven CallerFilePath y CallerLineNumber\npublic void DoProcessing()\n{\n    TraceMessage(&quot;Something happened.&quot;);\n}\n \npublic void TraceMessage(string message,\n        [System.Runtime.CompilerServices.CallerMemberName] string memberName = &quot;&quot;,\n        [System.Runtime.CompilerServices.CallerFilePath] string sourceFilePath = &quot;&quot;,\n        [System.Runtime.CompilerServices.CallerLineNumber] int sourceLineNumber = 0)\n{\n    System.Diagnostics.Trace.WriteLine(&quot;message: &quot; + message);\n    System.Diagnostics.Trace.WriteLine(&quot;member name: &quot; + memberName);\n    System.Diagnostics.Trace.WriteLine(&quot;source file path: &quot; + sourceFilePath);\n    System.Diagnostics.Trace.WriteLine(&quot;source line number: &quot; + sourceLineNumber);\n}\n \n// Sample Output:\n//  message: Something happened.\n//  member name: DoProcessing\n//  source file path: c:\\Users\\username\\Documents\\Visual Studio 2012\\Projects\\CallerInfoCS\\CallerInfoCS\\Form1.cs\n//  source line number: 31"},"Programación/Lenguajes-de-programación/CSharp/CSharp-index":{"title":"CSharp index","links":["Programación/Lenguajes-de-programación/CSharp/Punteros-en-CSharp","Programación/Lenguajes-de-programación/CSharp/Snippets","Programación/Lenguajes-de-programación/CSharp/Struct"],"tags":[],"content":"Punteros en CSharp\nSnippets\nStruct"},"Programación/Lenguajes-de-programación/CSharp/CultureInvariant-sustituir-coma-por-punto-en-numeros-decimales":{"title":"CultureInvariant sustituir coma por punto en numeros decimales","links":[],"tags":[],"content":"Keywords: float doble double internationalization internacionalizacion localization localisation localizacion i13n l10n\nSi lo queremos solo para unas pocas conversiones, podemos hacer lo siguiente\nvalorFloat.ToString(System.Globalization.CultureInfo.InvariantCulture).\nSi lo queremos para toda la ejecución, creo que es así, pero no lo he probado\nThread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(&quot;en-GB&quot;);"},"Programación/Lenguajes-de-programación/CSharp/Diferencia-const-y-readonly":{"title":"Diferencia const y readonly","links":[],"tags":[],"content":"La constante solo se puede inicializar a la vez que la declaramos, es decir:\npublic const double PI = 3.14; \nMientras que la de solo lectura, además, la podremos inicializar desde el constructor o una propiedad\npublic readonly double PI; \npublic void MiClase() {\n    PI = 3.14;\n}\nLas constantes son siempre estáticas, pero para que una de solo lectura lo sea, hay que especificarlo\npublic static readonly double PI; \nLa diferencia menos evidente es que el compilador sustituye las referencia de la constante como literales, mientras que las de solo lectura las mantiene. Es decir, si tienes un par de variables (una constante y otra readonly en un dll), aunque ese dll cambie, las que fuesen constantes ya no podrán cambiar, ejemplo:\n1ª ejecución\n\nprint(“Constante: “+dllRef.constPI+” | Readonly: “+dllRef.readonlyPI); // Constante: 3.14 | Readonly: 3.14\nAhora el creador de la dll decide cambiar ambos valores para que tengan más decimales (3.14156)\n\n2ª ejecución\n\n// Constante: 3.14 | Readonly: 3.14156\n\nComo se puede ver, la constante es sustituida por su valor, mientras que la readonly mantiene la referencia\n\nBibliografía\nwww.campusmvp.es/recursos/post/que-diferencia-existe-entre-const-y-readonly-en-el-lenguaje-c.aspx \nKeywords\nread-only read only solo lectura solo-lectura constante"},"Programación/Lenguajes-de-programación/CSharp/Matrices":{"title":"Matrices","links":[],"tags":[],"content":"Existen 2 formas de hacer una matriz (rectangular - todos los vectores que la componen tienen el mismo tamaño - o escalonada - defines el tamaño de cada vector -)\nrectangular:\n\nint[ , ] rect = new int [3 , 4];\n\nescalonada:\n\n\nint[][] esc = new int[2][]; \n\n\nesc[0] = new int[5];\n\n\nesc[1] = new int[2];\n\n"},"Programación/Lenguajes-de-programación/CSharp/Modificadores-de-acceso----herencia":{"title":"Modificadores de acceso  - herencia","links":["tags/CambiarURL"],"tags":["CambiarURL"],"content":"Acceso\ninternal - Para acceso solo desde dentro del assemblyCambiarURL → Unity&gt;Avanzado&gt;Assembly\nprotected - Permite acceso a las propias clases y derivadas\nHerencia\nvirtual - Permite que las clases descendientes (hijas) sobreescriban este método (con override)\noverride - Permite sobreescribir la funcionalidad de la función madre (requiere que la madre sea virtual)\nsealed - La clase a la que se le pone, impedirá que tenga hijas (infertilidad, castración, método anticonceptivo, vasectomía / ligadura de trompas)"},"Programación/Lenguajes-de-programación/CSharp/Número-Formato-de-string":{"title":"Número Formato de string","links":["Programación/Lenguajes-de-programación/CSharp/CultureInvariant-sustituir-coma-por-punto-en-numeros-decimales"],"tags":[],"content":"Para que salgan puntos en lugar de comas, mirar aquí\nPara que salgan ceros a la izquierda de un número es con value.ToString(&quot;D8&quot;) sustituyendo el 8 por el minimo de 0s a la izquierda que quieras\nbibliografía\nlearn.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings \nKeywords\nTrailing ceros zeros Decimal Float Double"},"Programación/Lenguajes-de-programación/CSharp/Punteros-en-CSharp":{"title":"Punteros en CSharp","links":[],"tags":[],"content":"El tipo especificado antes de * en un tipo de puntero se denomina tipo referente. Solo un tipo no administrado puede ser un tipo de referente.\nLos tipos de puntero no heredan de object y no existe ninguna conversión entre tipos de puntero y object. Sin conversiones boxing y unboxing. Sin embargo, puede realizar la conversión entre diferentes tipos de puntero y entre tipos de puntero y tipos enteros.\nint* p1, p2, p3;   // Ok\n \nint *p1, *p2, *p3;   // Inválido en C#\n \nint[] a = [10, 20, 30]\n&amp; obtiene la dirección de una variable (el puntero)\nint* p1 = &amp;a[0]\n* obtiene el valor de un puntero"},"Programación/Lenguajes-de-programación/CSharp/Reflexion-Reflection":{"title":"Reflexion Reflection","links":[],"tags":[],"content":"Ejecutar métodos privados de otras clases\nEsto nos sirve para debug y testing. Es increíblemente fácil y poderoso\nspawner es la instancia de donde queremos ejecutar el método privado\nEl string es el método privado que queremos ejecutar\nEl siguiente argumento (BindingFlags) indicamos que queremos ejecutar un método privado (NonPublic) y de instancia (Instance) es decir, que no es estático.\nPor último, invocamos el método pasandole por argumento que la función requiera.\nSystem.Reflection.MethodInfo method = spawner.GetType().GetMethod(&quot;SpawnZombie&quot;, BindingFlags.NonPublic | BindingFlags.Instance);\nmethod.Invoke(spawner, new object[] { (byte)windowToSpawn });\nAcceder a campos privados de otras clases\nprivate void ShowZombiesList()\n{\n    MonsterList[] monsterLists = typeof(MonsterSpawner).GetField(&quot;_monstersWindows&quot;,\n                        BindingFlags.NonPublic |\n                        BindingFlags.Instance).GetValue(spawner) as MonsterList[];\n    foreach (MonsterList monster in monsterLists)\n    {\n        Debug.Log(monster);\n    }\n}\nTambién parece existir esta otra forma\n    // Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType privateTypeMyClass = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(trafficLight.GetType());\n \n  \n \n    //((SpriteRenderer)privateTypeMyClass.(&quot;spriteRenderer&quot;)).sprite\nBibliografía\nMethod gist.github.com/M1NDOVERFL0W/b56709ebc8a32965c2246448e4e925bd \nField stackoverflow.com/a/8442803"},"Programación/Lenguajes-de-programación/CSharp/Snippets":{"title":"Snippets","links":[],"tags":[],"content":"Lo snippets que he creado yo están en mi carpeta de Drive los deberás meter en la siguiente carpeta, adaptada a tu versión\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC#\\Snippets\\3082\\Visual C#\\\n\nEstos archivos permiten agilizar el desarrollo, ya que te permiten generar código a partir de pequeñas palabra. Ejemplo por defecto ctor + Tab genera el código del constructor automáticamente.\nPor defecto\ndo, enum, for, forr, foreach, if, interface, namespace, class, struct, try, while\nUnity\nPara Unity he creado los siguiente que están en la carpeta del Drive: quality, singleton (don’t destroy on load), print($)\nPara multiplayer he creado onspawn, ondespawn, clientrpc y serverrpc\nC#\nSingletonSean ha compartido el suyo para crear variable de notificación, backup en mi drive\nYo he creado unos cuantos que están en la carpeta del Drive. Incluye event, float, int, str, y sus versiones privadas pfloat, pint, pstr y singleton\nWPF / Prism\nComo en su momento no se me añadieron los snippets de prism, los he reproducido tal y como salen en la web: propp, cmdfull"},"Programación/Lenguajes-de-programación/CSharp/Struct":{"title":"Struct","links":[],"tags":[],"content":"Características\n\n\nObjetos muy pequeños\n\n\nTienen lo mismo que una clase (constructores -obligatorio usar parámetros-, campos, métodos, etc)\n\n\nOcupa menos memoria que un objeto de clase\n\n\nNo dejan herencia pero pueden tomarla de una class\n\n\nNo es necesario usar “new”\n\n\nEjemploStruct os;\nos.x = 2;\n\nLos struct solo se pasan por valor. Es decir, lo que pasamos al método es una copia del original. Eso quiere decir que si pasamos una instancia a un método y editamos sus valores desde el método, el struct original no cambia (a diferencia de lo que pasa con los objetos). Ejemplo:\n\npublic void CambiaValores(EjemploStruct copia) {\n    copia.x = 10;\n}\nEjemploStruct original = new EjemploStruct(1, 2);\nCambiaValores(original);\nprint(original); // (1, 2)\nSin embargo, si uno de los miembros fuera un objeto, por ejemplo un string (que pasa por ref), entonces sí se editará. Ejemplo:\npublic void CambiaValores(EjemploStruct copia) {\n    copia.x = 10;\n    copia.texto = “Javi”;\n}\nEjemploStruct original = new EjemploStruct(1, 2);\nprint(original); // Inicio (1, 2)\nCambiaValores(original);\nprint(original); // Javi (1, 2)\nPuedes, pasar por valor si lo indicas en el método y al pasar el argumento:\npublic void CambiaValores(ref EjemploStruct copia) {\n    copia.x = 10;\n}\nEjemploStruct original = new EjemploStruct(1, 2);\nCambiaValores(ref original);\nprint(original); // (10, 2)\nPodemos crear mutaciones con la palabra clave with \npublic static void Main()\n{\n    var p1 = new Coords(0, 0);\n    Console.WriteLine(p1);  // output: (0, 0)\n    var p2 = p1 with { X = 3 };\n    Console.WriteLine(p2);  // output: (3, 0)\n    var p3 = p1 with { X = 1, Y = 4 };\n    Console.WriteLine(p3);  // output: (1, 4)\n}"},"Programación/Lenguajes-de-programación/Docker":{"title":"Docker","links":[],"tags":[],"content":"¿Qué es un contenedor?\nUna forma de empaquetar nuestras aplicaciones con su código fuente sus dependencias y archivos de config. Y lo hacen portable.\nSe almacenan en un repo de contenedores, como una especie de github, privados y publicos (DockerHub)\nPermite pues que todo el equipo tenga las mismas versiones, porque todos tienen el mismo entorno de trabajo y evita las incompatibilidades tanto de sistema operativo como de versiones\nAhorra tiempo porque el proceso de instalación de cada dependencia / herramienta y sus correspondientes versiones ya está preparada\nDescargar una imagen basada en linux y se instala con un comando, Se pueden tener varias versiones trabajando a la vez sin conflictos\nConclusión\nTal vez me equivoque, pero esto es la caña EN CASO de que se trabaje en equipo, pero para un proyecto pequeñito en solitario, es demasiada complicación y no aporta ninguna ventaja\nBibliografía\nAprende Docker ahora! curso completo gratis desde cero! -HolaMundore"},"Programación/Lenguajes-de-programación/Prism-(WPF)/1--Prism-Crear-proyecto":{"title":"1- Prism Crear proyecto","links":["Programación/Lenguajes-de-programación/WPF/3--WPF-Crear-proyecto"],"tags":[],"content":"Está explicado en 3- WPF Crear proyecto"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Comandos-y-eventos":{"title":"Prism Comandos y eventos","links":["Programación/Lenguajes-de-programación/CSharp/Snippets"],"tags":[],"content":"Consisten en la siguiente estructura (aunque puedes implementar rápidamente uno con los snippets que traen o que he reproducido aquí)\nDelegateCommand\n11-UsingDelegateCommands\nForma básica\nUna propiedad DelegateCommand\nUn método Execute con la acción\nUn método CanExecute que devuelve si es posible ejecutar ese método\nY por último, la instanciación del DelegateCommand, a la cual le pasamos tanto la acción a realizar como la comprobación de si el botón debería estar deshabilitado\npublic DelegateCommand ExecuteDelegateCommand { get; private set; }\n \npublic MainWindowViewModel()\n{\n    ExecuteDelegateCommand = new DelegateCommand(Execute, CanExecute);\n}\n \nprivate void Execute()\n{\n    UpdateText = $&quot;Updated: {DateTime.Now}&quot;;\n}\n \nprivate bool CanExecute()\n{\n    return IsEnabled;\n}\nLa parte negativa de esta implementación es que debemos elevar el evento de que ha habido un cambio manualmente\nprivate bool _isEnabled;\npublic bool IsEnabled\n{\n    get { return _isEnabled; }\n    set\n    {\n        SetProperty(ref _isEnabled, value);\n        ExecuteDelegateCommand.RaiseCanExecuteChanged();\n    }\n}\nA partir de aquí, son modificaciones de la estructura\nCanExecute sin desencadenar evento (raise event)\nTenemos 2 formas de hacer esto.\n\\1. Mediante ObserveProperty\nDelegateCommandObservesProperty = new DelegateCommand(Execute, CanExecute).ObservesProperty(() =&gt; IsEnabled);\n\\2. Mediante ObserveCanExecute\nEsta opción además, nos permite eliminar el método CanExecute\nDelegateCommandObservesCanExecute = new DelegateCommand(Execute).ObservesCanExecute(() =&gt; IsEnabled);\nComando genérico\nEste nos permite pasar una variable por argumento\nSe implementaría así\nExecuteGenericDelegateCommand = new DelegateCommand&lt;string&gt;(ExecuteGeneric).ObservesCanExecute(() =&gt; IsEnabled);\nprivate void ExecuteGeneric(string parameter)\n{\n    UpdateText = parameter;\n}\nY el argumento llegaría mediante la propiedad CommandParameter en el xaml\n &lt;Button Command=&quot;{Binding ExecuteGenericDelegateCommand}&quot; CommandParameter=&quot;Passed Parameter&quot; Content=&quot;DelegateCommand Generic&quot; Margin=&quot;10&quot;/&gt;\nComandos compuestos\n12-UsingCompositeCommands\nSirven para combinar tanto los Execute de varios comandos, como sus CanExecute\nPara este caso, se ha creado una vista para que vaya en 3 pestañas (TabControl)\nEn el OnInitialized de ModuleAModule se han instanciado la vista de las 3 pestañas y añadido al TabControl a través de la Region, que estará en la MainWindow\nModuleAModule\npublic void OnInitialized(IContainerProvider containerProvider)\n{\n    var regionManager = containerProvider.Resolve&lt;IRegionManager&gt;();\n    IRegion region = regionManager.Regions[&quot;ContentRegion&quot;];\n \n    var tabA = containerProvider.Resolve&lt;TabView&gt;();\n    SetTitle(tabA, &quot;Tab A&quot;);\n    region.Add(tabA);\n \n    var tabB = containerProvider.Resolve&lt;TabView&gt;();\n    SetTitle(tabB, &quot;Tab B&quot;);\n    region.Add(tabB);\n \n    var tabC = containerProvider.Resolve&lt;TabView&gt;();\n    SetTitle(tabC, &quot;Tab C&quot;);\n    region.Add(tabC);\n}\nAl hacer el Resolve de las vistas (paso anterior), se están instanciando sus correspondientes ViewModel, por lo que sus constructores se están ejecutando y, por tanto, registrando los comandos en el CompositeCommand, que está en ApplicationCommands (lo veremos a continuación).\npublic TabViewModel(IApplicationCommands applicationCommands)\n{\n    _applicationCommands = applicationCommands;\n \n    UpdateCommand = new DelegateCommand(Update).ObservesCanExecute(() =&gt; CanUpdate);\n \n    _applicationCommands.SaveCommand.RegisterCommand(UpdateCommand);\n}\nAquí está ApplicationCommands, que es básicamente un CompositeCommand en el que vamos a añadir todos los Command que queramos sincronizar\npublic interface IApplicationCommands\n{\n    CompositeCommand SaveCommand { get; }\n}\n \npublic class ApplicationCommands : IApplicationCommands\n{\n    private CompositeCommand _saveCommand = new CompositeCommand();\n    public CompositeCommand SaveCommand\n    {\n        get { return _saveCommand; }\n    }\n}\nRequisito para hacer esto (tanto ApplicationCommands como TabView están en Modulos diferentes (en total tenemos 3 modulos))\nprotected override void ConfigureModuleCatalog(IModuleCatalog moduleCatalog)\n{\n    moduleCatalog.AddModule&lt;ModuleA.ModuleAModule&gt;();\n}\n \nprotected override void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterSingleton&lt;IApplicationCommands, ApplicationCommands&gt;();\n}\nCanExecute dinámico\n13-IActiveAwareCommands\nSe debe implementar IActiveAware allá donde estas registrando los comandos\nY ya, de hecho creo que ni el IsActiveChanged?.Invoke hace falta\nbool _isActive;\npublic bool IsActive\n{\n    get { return _isActive; }\n    set\n    {\n        _isActive = value;\n        OnIsActiveChanged();\n    }\n}\nprivate void OnIsActiveChanged()\n{\n    UpdateCommand.IsActive = IsActive;\n \n    IsActiveChanged?.Invoke(this, new EventArgs());\n}\n \npublic event EventHandler IsActiveChanged;\nIEventAggregator EventAggregator\n14-UsingEventAggregator\nEste ejemplo consiste en un lado que ejecuta un evento con un mensaje y el otro que se suscribe al evento y lo añade a una lista\nCrea una clase vacía solo para heredar PubSubEvent\npublic class MessageSentEvent : PubSubEvent&lt;string&gt;\n{\n}\nUn lado se suscribe al evento\nIEventAggregator _ea;\n \npublic MessageListViewModel(IEventAggregator ea)\n{\n    _ea = ea;\n    Messages = new ObservableCollection&lt;string&gt;();\n \n    _ea.GetEvent&lt;MessageSentEvent&gt;().Subscribe(MessageReceived);\n}\n \nprivate void MessageReceived(string message)\n{\n    Messages.Add(message);\n}\nEl otro lado lanza el evento\nIEventAggregator _ea;\n \npublic DelegateCommand SendMessageCommand { get; private set; }\n \npublic MessageViewModel(IEventAggregator ea)\n{\n    _ea = ea;\n    SendMessageCommand = new DelegateCommand(SendMessage);\n}\n \nprivate void SendMessage()\n{\n    _ea.GetEvent&lt;MessageSentEvent&gt;().Publish(Message);\n}\nFiltrado\n15-FilteringEvents\nPodemos filtrar la recepción de los eventos. Para ello, simplemente le pasamos un par de argumentos y una función lambda o un método que devuelva un bool (los argumentos 2 y 3 son opcionales)\n_ea.GetEvent&lt;MessageSentEvent&gt;().Subscribe(MessageReceived, ThreadOption.PublisherThread, false, (filter) =&gt; filter.Contains(&quot;Brian&quot;));\nBibliografía\nCerrar tab modo Prism (sin x:Name) stackoverflow.com/questions/42652206/close-dynamically-added-tab-items-using-prism-wpf"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Crear-propiedades":{"title":"Prism Crear propiedades","links":["Programación/Lenguajes-de-programación/CSharp/Snippets"],"tags":[],"content":"El ViewModel debe heredar de BindableBase y mediante el snippet propp creas una propiedad (si el snippet no está, puede agregarlo desde aquí), pero básicamente se vería así\nprivate string _updateText;\npublic string UpdateText\n{\n    get { return _updateText; }\n    set { SetProperty(ref _updateText, value); }\n}"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Crear-proyecto":{"title":"Prism Crear proyecto","links":["tags/WIP"],"tags":["WIP"],"content":"\nAl final debes tener Prism.Wpf y Prism.Core\nEn el vídeo instala tambien Prism.Dryloc pero eso dudo que haga falta\nWIP\nBibliografía\nyoutu.be/GdtWMQgQ96U"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-DataContext":{"title":"Prism DataContext","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-ViewModelLocator"],"tags":[],"content":"El método Prism ViewModelLocator, te hará por defecto una asociación de DataContext con la vista en concreto\nPodemos asociar información al DataContext de una vista, de esta forma\nTabView es la vista (un xaml) y TabViewModel es el ViewModel asociado a dicha vista\nvoid SetTitle(TabView tab, string title)\n{\n    (tab.DataContext as TabViewModel).Title = title;\n}"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Dependencias":{"title":"Prism Dependencias","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/(DI)-Dependency-Inyection"],"tags":[],"content":"Para info general del patrón de diseño (DI) Dependency Inyection,\nEn el ejemplo de prismlibrary.com/docs/wpf/getting-started.html crean una dependencia entre MainWindowViewModel y una interfaz random llama ICostumerStore. Para que su implementación pueda ser manejada por el contenedor de dependencias, se debe registrar en App.xaml.cs en el método RegisterTypes:\nprotected override void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterSingleton&lt;IMessageService, MessageService&gt;();\n    containerRegistry.Register&lt;Services.ICustomerStore, Services.DbCustomerStore&gt;();\n}\nBibliografía\nweb.archive.org/web/20220730142511/https://prismlibrary.com/docs/wpf/getting-started.html"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-DialogService":{"title":"Prism DialogService","links":[],"tags":[],"content":"Ventanas modales\n26-UsingDialogService\nDeberemos registrar nuestra UserControl como dependencia en el RegisterTypes de App.xaml.cs\nApp.xaml.cs\nprotected override void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterDialog&lt;NotificationDialog, NotificationDialogViewModel&gt;();\n}\nEn el constructor podemos recibir el servicio de dialogos.\nEl método ShowDialog nos devuelve una variable del tipo IDialogResult con el resultado de la modal (aunque sospecho que podríamos recibir el tipo que queramos, ya que viene dado por un Action que definiremos en seguida)\npublic MainWindowViewModel(IDialogService dialogService)\n{\n    _dialogService = dialogService;\n}\n \nprivate void ShowDialog()\n{\n    var message = &quot;This is a message that should be shown in the dialog.&quot;;\n    //using the dialog service as-is\n    _dialogService.ShowDialog(&quot;NotificationDialog&quot;, new DialogParameters($&quot;message={message}&quot;), r =&gt;\n    {\n        if (r.Result == ButtonResult.None)\n            Title = &quot;Result is None&quot;;\n        else if (r.Result == ButtonResult.OK)\n            Title = &quot;Result is OK&quot;;\n        else if (r.Result == ButtonResult.Cancel)\n            Title = &quot;Result is Cancel&quot;;\n        else\n            Title = &quot;I Don&#039;t know what you did!?&quot;;\n    });\n}\nMientras tanto, en el ViewModel del propio dialogo, deberíamos implementar IDialogAware y toda la lógica para determinar cuál fue el resultado\nNotificationDialogViewModel.cs\npublic event Action&lt;IDialogResult&gt; RequestClose;\n \nprotected virtual void CloseDialog(string parameter)\n{\n    ButtonResult result = ButtonResult.None;\n \n    if (parameter?.ToLower() == &quot;true&quot;)\n        result = ButtonResult.OK;\n    else if (parameter?.ToLower() == &quot;false&quot;)\n        result = ButtonResult.Cancel;\n \n    RaiseRequestClose(new DialogResult(result));\n}\n \npublic virtual void RaiseRequestClose(IDialogResult dialogResult)\n{\n    RequestClose?.Invoke(dialogResult);\n}\n \npublic virtual bool CanCloseDialog()\n{\n    return true;\n}\n \npublic virtual void OnDialogClosed()\n{\n \n}\n \npublic virtual void OnDialogOpened(IDialogParameters parameters)\n{\n    Message = parameters.GetValue&lt;string&gt;(&quot;message&quot;);\n}\nY por último, los botones de aceptar y cancelar\nNotificationDialog.xaml\n&lt;TextBlock Text=&quot;{Binding Message}&quot; HorizontalAlignment=&quot;Stretch&quot; VerticalAlignment=&quot;Stretch&quot; Grid.Row=&quot;0&quot; TextWrapping=&quot;Wrap&quot; /&gt;\n&lt;StackPanel Orientation=&quot;Horizontal&quot; HorizontalAlignment=&quot;Right&quot; Margin=&quot;0,10,0,0&quot; Grid.Row=&quot;1&quot; &gt;\n    &lt;Button Command=&quot;{Binding CloseDialogCommand}&quot; CommandParameter=&quot;true&quot; Content=&quot;OK&quot; Width=&quot;75&quot; Height=&quot;25&quot; IsDefault=&quot;True&quot; /&gt;\n    &lt;Button Command=&quot;{Binding CloseDialogCommand}&quot; CommandParameter=&quot;false&quot; Content=&quot;Cancel&quot; Width=&quot;75&quot; Height=&quot;25&quot; Margin=&quot;10,0,0,0&quot; IsCancel=&quot;True&quot; /&gt;\n&lt;/StackPanel&gt;\nDarle estilo\n27-StylingDialog\nNótese que es una etiqueta propia de prism\nNotificationDialog.xaml\n&lt;prism:Dialog.WindowStyle&gt;\n    &lt;Style TargetType=&quot;Window&quot;&gt;\n        &lt;Setter Property=&quot;prism:Dialog.WindowStartupLocation&quot; Value=&quot;CenterScreen&quot; /&gt;\n        &lt;Setter Property=&quot;ResizeMode&quot; Value=&quot;NoResize&quot;/&gt;\n        &lt;Setter Property=&quot;ShowInTaskbar&quot; Value=&quot;False&quot;/&gt;\n        &lt;Setter Property=&quot;SizeToContent&quot; Value=&quot;WidthAndHeight&quot;/&gt;\n    &lt;/Style&gt;\n&lt;/prism:Dialog.WindowStyle&gt;\nVentana de dialogo personalizada (modal personalizada)\n28-UsingCustomWindow\nAdemás de registrar nuestra UserControl como dependencia en el RegisterTypes de App.xaml.cs tal y como hacíamos al principio de esta pagina, deberemos registrar también la nueva Window. Que creo que es la que servirá como soporte para que nuestra UserControl se ubique en lugar de usar la de por defecto\nApp.xaml.cs\nprotected override void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterDialogWindow&lt;MyCustomWindow&gt;();\n    containerRegistry.RegisterDialog&lt;NotificationDialog, NotificationDialogViewModel&gt;();\n}\nTodo lo demás es completamente idéntico, porque al registrarlo como DialogWindow en las dependencias, la usará por defecto"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Modulos":{"title":"Prism Modulos","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Regions"],"tags":[],"content":"Puedes crear un proyecto como modulo para ser compilado como librería dll y luego ser cargado por la aplicación principal\nAunque también puedes evitar crear la librería si haces la carga manual que se explica después, pero supongo que lo suyo es compilar que será más óptimo\nModuleA es el que será cargado y Modules es la aplicación principal\n\nSi accedemos a las propiedades de ModuleA (csproj), deberemos cambiar ciertos valores, entre los que se encuentran poner el Tipo de resultado como Biblioteca de clases\n\nY en la sección de evento hay que añadir la linea \nxcopy &quot;$(TargetDir)*.*&quot; &quot;$(SolutionDir)\\$(SolutionName)\\bin\\Debug\\net6.0-windows\\&quot; /Y \n\ntal y como se ve en la captura\n\nCargar con App.config\nGracias a lo que hemos hecho, cuando compilemos, nos generará una librería dll que luego tendremos que cargar en Modulos\nPara ello, deberemos añadir un archivo App.config con el siguiente contenido\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;configuration&gt;\n  &lt;configSections&gt;\n    &lt;section name=&quot;modules&quot; type=&quot;Prism.Modularity.ModulesConfigurationSection, Prism.Wpf&quot; /&gt;\n  &lt;/configSections&gt;\n  &lt;startup&gt;\n  &lt;/startup&gt;\n  &lt;modules&gt;\n    &lt;module assemblyFile=&quot;ModuleA.dll&quot; \n\t\t\tmoduleType=&quot;ModuleA.ModuleAModule, ModuleA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; \n\t\t\tmoduleName=&quot;ModuleAModule&quot; \n\t\t\tstartupLoaded=&quot;True&quot; /&gt;\n  &lt;/modules&gt;\n&lt;/configuration&gt;\nEn App.xaml.cs añadimos esto\nprotected override IModuleCatalog CreateModuleCatalog()\n{\n    return new ConfigurationModuleCatalog();\n}\nCargar con código\nEn App.xaml.cs añadimos esto\nprotected override void ConfigureModuleCatalog(IModuleCatalog moduleCatalog)\n{\n    moduleCatalog.AddModule&lt;ModuleA.ModuleAModule&gt;();\n}\nCargar mediante carpeta / directorio\nEn App.xaml.cs le indicamos que la carpeta donde está el dll está en la raíz\\Modules (bin\\Debug\\net6.0-windows\\Modules). Esta ubicación se la indicamos en las propiedades del proyecto (botón derecho en ModuleA(csproj) &gt;Propiedades)\nprotected override IModuleCatalog CreateModuleCatalog()\n{\n    return new DirectoryModuleCatalog() { ModulePath = @&quot;.\\Modules&quot; };\n}\nCarga manual (sin librería dll)\nModules.csproj\n&lt;ItemGroup&gt;\n    &lt;ProjectReference Include=&quot;..\\ModuleA\\ModuleA.csproj&quot; /&gt;\n&lt;/ItemGroup&gt;\nEn App.xaml.cs añadimos esto\nprotected override void ConfigureModuleCatalog(IModuleCatalog moduleCatalog)\n{\n    var moduleAType = typeof(ModuleAModule);\n    moduleCatalog.AddModule(new ModuleInfo()\n    {\n        ModuleName = moduleAType.Name,\n        ModuleType = moduleAType.AssemblyQualifiedName,\n        InitializationMode = InitializationMode.OnDemand\n    });\n}\nY esto a MainWindow.xaml.cs\nIModuleManager _moduleManager;\n \npublic MainWindow(IModuleManager moduleManager)\n{\n    InitializeComponent();\n    _moduleManager = moduleManager;\n}\n \nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n    _moduleManager.LoadModule(&quot;ModuleAModule&quot;);\n}\nCarga mediante catalogo\nPartiendo del método App.config, en lugar de  realizar la carga con new ConfigureModuleCatalog(), que entiendo que te lo crea por defecto, creamos uno propio mediante un archivo xaml con el siguiente contenido\n&lt;m:ModuleCatalog xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n                    xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;\n                    xmlns:m=&quot;clr-namespace:Prism.Modularity;assembly=Prism.Wpf&quot;&gt;\n \n    &lt;m:ModuleInfo ModuleName=&quot;ModuleAModule&quot; \n                  ModuleType=&quot;ModuleA.ModuleAModule, ModuleA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; /&gt;\n \n&lt;/m:ModuleCatalog&gt;\ny creando nuestra referencia al ModuleCatalog en App.xaml.cs\nprotected override IModuleCatalog CreateModuleCatalog()\n{\n    return new XamlModuleCatalog(new Uri(&quot;/Modules;component/ModuleCatalog.xaml&quot;, UriKind.Relative));\n}\nPara asociar el contexto de estos módulos, ver  asociación de datos en Regions"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Navigation":{"title":"Prism Navigation","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Comandos-y-eventos"],"tags":[],"content":"Por defecto\n24-NavigationJournal (entre otras)\nPara situar una vista por defecto, podemos hacer una request en el OnInitialized\nModuleAModule.cs\npublic void OnInitialized(IContainerProvider containerProvider)\n{\n    var regionManager = containerProvider.Resolve&lt;IRegionManager&gt;();\n    regionManager.RequestNavigate(&quot;ContentRegion&quot;, &quot;PersonList&quot;);\n} \nNavegación entre regiones\n17-BasicRegionNavigation\nPara poder navegar entre las vistas, es necesario registrarlo para la navegación RegisterForNavigation\nModuleAModule.cs\npublic void RegisterTypes(IContainerRegistry containerRegistry)\n{\n    containerRegistry.RegisterForNavigation&lt;ViewA&gt;();\n    containerRegistry.RegisterForNavigation&lt;ViewB&gt;();\n}\nOpcionalmente, se puede añadir una callback a la request\nMainWindowViewModel.cs\npublic DelegateCommand&lt;string&gt; NavigateCommand { get; private set; }\n \npublic MainWindowViewModel(IRegionManager regionManager)\n{\n    _regionManager = regionManager;\n \n    NavigateCommand = new DelegateCommand&lt;string&gt;(Navigate);\n}\n \nprivate void Navigate(string navigatePath)\n{\n    if (navigatePath != null)\n        _regionManager.RequestNavigate(&quot;ContentRegion&quot;, navigatePath);\n}\nMainWindow.xaml\n&lt;StackPanel Orientation=&quot;Horizontal&quot; DockPanel.Dock=&quot;Top&quot; Margin=&quot;5&quot; &gt;\n    &lt;Button Command=&quot;{Binding NavigateCommand}&quot; CommandParameter=&quot;ViewA&quot; Margin=&quot;5&quot;&gt;Navigate to View A&lt;/Button&gt;\n    &lt;Button Command=&quot;{Binding NavigateCommand}&quot; CommandParameter=&quot;ViewB&quot; Margin=&quot;5&quot;&gt;Navigate to View B&lt;/Button&gt;\n&lt;/StackPanel&gt;\n&lt;ContentControl prism:RegionManager.RegionName=&quot;ContentRegion&quot; Margin=&quot;5&quot;  /&gt;\nINavigationAware\n19-NavigationParticipation\nLas ViewModel pueden implementar INavigationAware, en la que en estos métodos podemos ampliar funcionalidades\nEn este caso tenemos una propiedad en la clase llamada PageViews, que luego se muestra en la vista\nSi IsNavigationTarget devuelve False, crea una nueva vista (o eso me ha parecido entender del ejemplo 20-NavigateToExistingViews)\nViewAViewModel.cs\npublic void OnNavigatedTo(NavigationContext navigationContext)\n{\n    PageViews++;\n}\n \npublic bool IsNavigationTarget(NavigationContext navigationContext)\n{\n    return true;\n}\n \npublic void OnNavigatedFrom(NavigationContext navigationContext)\n{\n            \n}\nPasar parámetros al navegar\n21-PassingParameters\nAl hacer click a un Command con una persona como argumento, se ejecuta este método, y sencillamente, agregamos un NavigationParameters junto a la petición\nModuleA&gt;PersonListViewModel.cs\nprivate void PersonSelected(Person person)\n{\n    var parameters = new NavigationParameters();\n    parameters.Add(&quot;person&quot;, person);\n \n    if (person != null)\n        _regionManager.RequestNavigate(&quot;PersonDetailsRegion&quot;, &quot;PersonDetail&quot;, parameters);\n}\nEsta info está siendo recogida y usada en PersonDetailViewModel, que implementa INavigationAware. Entonces tanto OnNavigatedTo, OnNavigatedFrom como IsNavigationTarget reciben un contexto NavigationContext entre los argumentos\nModuleA &gt; PersonDetailViewModel.cs\npublic void OnNavigatedTo(NavigationContext navigationContext)\n{\n    var person = navigationContext.Parameters[&quot;person&quot;] as Person;\n    if (person != null)\n        SelectedPerson = person;\n}\n \npublic bool IsNavigationTarget(NavigationContext navigationContext)\n{\n    var person = navigationContext.Parameters[&quot;person&quot;] as Person;\n    if (person != null)\n        return SelectedPerson != null &amp;&amp; SelectedPerson.LastName == person.LastName;\n    else\n        return true;\n}\nInteresante a mencionar de este ejemplo es que crea pestañas pidiendo navegar, lo cual es poco intuitivo\nHe modificado posteriormente este ejemplo para que las pestañas puedan cerrarse.\nUtiliza para ello una propiedad de los Comandos mediante el cual se puede pasar el propio objeto a eliminar\nPersonList.xaml\n&lt;TabControl Grid.Row=&quot;1&quot; Margin=&quot;10&quot; prism:RegionManager.RegionName=&quot;PersonDetailsRegion&quot;&gt;\n    &lt;TabControl.ItemTemplate&gt;\n        &lt;DataTemplate&gt;\n            &lt;DockPanel Width=&quot;Auto&quot;&gt;\n                &lt;Button Command=&quot;{Binding DataContext.DataContext.CloseTabCommand, RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}&quot;\n        CommandParameter=&quot;{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}&quot;\n        Content=&quot;X&quot;\n        Cursor=&quot;Hand&quot;\n        DockPanel.Dock=&quot;Right&quot;\n        Focusable=&quot;False&quot;\n        FontFamily=&quot;Courier&quot;\n        FontWeight=&quot;Bold&quot;\n        Margin=&quot;4,0,0,0&quot;\n        FontSize=&quot;10&quot;\n        VerticalContentAlignment=&quot;Center&quot;\n        Width=&quot;15&quot; Height=&quot;15&quot; /&gt;\n \n                &lt;ContentPresenter Content=&quot;{Binding DataContext.DataContext.HeaderText, RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}&quot; /&gt;\n            &lt;/DockPanel&gt;\n        &lt;/DataTemplate&gt;\n    &lt;/TabControl.ItemTemplate&gt;\n&lt;/TabControl&gt;\npublic DelegateCommand&lt;object&gt; CloseTabCommand { get; }\n \nprivate void OnExecuteCloseCommand(object tabItem)\n{\n    _regionManager.Regions[&quot;PersonDetailsRegion&quot;].Remove(tabItem);\n}\n \npublic PersonDetailViewModel(IRegionManager regionManager)\n{\n    _regionManager = regionManager;\n    CloseTabCommand = new DelegateCommand&lt;object&gt;(OnExecuteCloseCommand);\n}\nConfirmar/Cancelar navegación\n22-ConfirmCancelNavigation\nPodemos implementar IConfirmNavigationRequest para cancelar la navegación\nViewAViewModel.cs\npublic void ConfirmNavigationRequest(NavigationContext navigationContext, Action&lt;bool&gt; continuationCallback)\n{\n    bool result = true;\n \n    if (MessageBox.Show(&quot;Do you to navigate?&quot;, &quot;Navigate?&quot;, MessageBoxButton.YesNo) == MessageBoxResult.No)\n        result = false;\n \n    continuationCallback(result);\n}\nIRegionMemberLifetime\n23-RegionMemberLifetime\nTras instancia inicializar y añadir una vista a la región destino, ésta se convierte en la activa, y desactiva a la anterior. En ocasiones querrás que esa vista, se elimine de la región, implementando IRegionMemberLifetime podremos definir si la vista se elimina o no\nViewAViewModel.cs\npublic bool KeepAlive\n{\n    get\n    {\n        return false;\n    }\n}\nNavegación palante patrás (adelante y atrás, avanzar retroceder, abrir cerrar, entrar salir, journal, página)\n24-NavigationJournal\nRecibimos siempre dentro de nuestro NavigationContext (Contexto de navegación) el objeto Journal…\npublic void OnNavigatedTo(NavigationContext navigationContext)\n{\n    _journal = navigationContext.NavigationService.Journal;\n \n    var person = navigationContext.Parameters[&quot;person&quot;] as Person;\n    if (person != null)\n        SelectedPerson = person;\n}\n…que será el que podremos luego emplear para echar para atrás si lo necesitamos\nprivate void GoBack()\n{\n    _journal.GoBack();\n}"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Problems/Prism-Titulo-Header-en-Pestaña-Tab":{"title":"Prism Titulo Header en Pestaña Tab","links":[],"tags":[],"content":"Como las TabItem se crean programáticamente, si quieres asociar un nombre al Header, deberás hacerlo como recurso de la ventana…\n…para ello debes incluir esto en el mismo xaml donde esté tu TabControl\n&lt;Window.Resources&gt;\n    &lt;Style TargetType=&quot;TabItem&quot;&gt;\n        &lt;Setter Property=&quot;Header&quot; Value=&quot;{Binding DataContext.Title}&quot; /&gt;\n    &lt;/Style&gt;\n&lt;/Window.Resources&gt;\nAunque también podrías hacerlas de forma imperativa\n&lt;TabControl&gt;\n    &lt;TabItem prism:RegionManager.RegionName=&quot;MusicRegion&quot; Header=&quot;Music&quot; /&gt;\n    &lt;TabItem prism:RegionManager.RegionName=&quot;Visualizer3DRegion&quot; Header=&quot;3D Viewer&quot; /&gt;\n    &lt;TabItem prism:RegionManager.RegionName=&quot;DataManagingRegion&quot; Header=&quot;Data Manager&quot; /&gt;\n&lt;/TabControl&gt;"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Regions":{"title":"Prism Regions","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Navigation"],"tags":[],"content":"Contenedores de UI. Pueden ser por ejemplo un TabControl o un ContentControl\nLos RegionManager pueden crear regiones tanto en el Xaml como en el código, identificados por el RegionManager.RegionName.\nLos region pueden tener datos dinámicos.\nUn módulo puede contener contenido UI presentado como un UserControl, un tipo de dato que está asociado a un DataTemplate, un CustomControl o cualquier combinación de estas.\nImportante\nLa Window que está siendo cargada aquí…:\nprotected override Window CreateShell()\n{\n    return Container.Resolve&lt;MainWindow&gt;();\n}\nTendrá inyectados los diferentes tipos, que podremos obtener a través del constructor: IContainerExtension, IRegionManager…\nDos opciones de constructores diferentes para MainWindow (tomado de dos ejemplos diferente, dudo que puedan funcionar ambos simultaneamente)\npublic MainWindow(IRegionManager regionManager)\n{\n    InitializeComponent();\n    //view discovery\n    regionManager.RegisterViewWithRegion(&quot;ContentRegion&quot;, typeof(ViewA));\n}\n \npublic MainWindow(IContainerExtension container, IRegionManager regionManager)\n{\n    InitializeComponent();\n    _container = container;\n    _regionManager = regionManager;\n}\nLas regiones que queramos que se puedan visualizar deberemos resolverlas y añadirlas a la región\nprivate void MainWindow_Loaded(object sender, RoutedEventArgs e)\n{\n    _viewA = _container.Resolve&lt;ViewA&gt;();\n    _viewB = _container.Resolve&lt;ViewB&gt;();\n \n    _region = _regionManager.Regions[&quot;ContentRegion&quot;];\n \n    _region.Add(_viewA);\n    _region.Add(_viewB);\n}\nDespues podemos activarlas o desactivarlas según necesitemos\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n    //activate view a\n    _region.Activate(_viewA);\n}\n \nprivate void Button_Click_1(object sender, RoutedEventArgs e)\n{\n    //deactivate view a\n    _region.Deactivate(_viewA);\n}\nCrear y asociar una región\nComo se comentaba al principio, para crear una región, simplemente en el xaml ponemos el nombre\nMainWindow.xaml\n&lt;Grid&gt;\n        &lt;ContentControl prism:RegionManager.RegionName=&quot;ContentRegion&quot; /&gt;\n&lt;/Grid&gt;\nMainWindow.xaml.cs\npublic MainWindow(IRegionManager regionManager)\n{\n    InitializeComponent();\n    //view discovery\n    regionManager.RegisterViewWithRegion(&quot;ContentRegion&quot;, typeof(ViewA));\n}\nInyección de vista\nprivate void Button_Click(object sender, RoutedEventArgs e)\n{\n    var view = _container.Resolve&lt;ViewA&gt;();\n    IRegion region = _regionManager.Regions[&quot;ContentRegion&quot;];\n    region.Add(view);\n}\nContextos / asociación de datos\nDe un módulo a un región\n16-RegionContext\nModuleAModule.cs\npublic void OnInitialized(IContainerProvider containerProvider)\n{\n    var regionManager = containerProvider.Resolve&lt;IRegionManager&gt;();\n    regionManager.RegisterViewWithRegion(&quot;ContentRegion&quot;, typeof(PersonList));\n    regionManager.RegisterViewWithRegion(&quot;PersonDetailsRegion&quot;, typeof(PersonDetail));\n}\nNavegación entre regiones\nPara ver la Navegación entre regiones visitar Prism Navigation"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-ViewModelLocator":{"title":"Prism ViewModelLocator","links":[],"tags":[],"content":"Nada de esto hace falta saberlo, porque si creas las vistas con la plantilla de Prism, se creará todo automáticamente. En caso de querer cambiar esta convención. mirar al final\nPero si hubiera alguna necesidad, se hace así:\nEn la cada vista / usercontrol que creemos (MainWindow.xaml) añadimos prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot; y deberá existir un script en el namespace ViewModels con el mismo nombre sufijado con &quot;ViewModel&quot;. \nExcepción, si el nombre de la vista acaba en “View”, el sufijo no duplicará “View” y añadirá simplemente “Model” al final\n&lt;Window x:Class=&quot;ViewModelLocator.Views.MainWindow&quot;\n        xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:prism=&quot;prismlibrary.com/&quot;\n        prism:ViewModelLocator.AutoWireViewModel=&quot;True&quot;\n        Title=&quot;{Binding Title}&quot; Height=&quot;350&quot; Width=&quot;525&quot;&gt;\n    &lt;Grid&gt;\n        &lt;ContentControl prism:RegionManager.RegionName=&quot;ContentRegion&quot; /&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\nLo cual buscará si existe un equivalente acabado en ViewModel\n\nCambiar convención\n09 - ChangeConvention\nDeberemos incluir esto en App.xaml.cs\nprotected override void ConfigureViewModelLocator()\n{\n    base.ConfigureViewModelLocator();\n \n    ViewModelLocationProvider.SetDefaultViewTypeToViewModelTypeResolver((viewType) =&gt;\n    {\n        var viewName = viewType.FullName;\n        var viewAssemblyName = viewType.GetTypeInfo().Assembly.FullName;\n        var viewModelName = $&quot;{viewName}ViewModel, {viewAssemblyName}&quot;;\n        return Type.GetType(viewModelName);\n    });\n}\n10 - CustomRegistration\nPodemos combinar una vista y un ViewModel que cuyos nombres no coincidan de estas 4 formas diferentes\nApp.xaml.cs\nprotected override void ConfigureViewModelLocator()\n{\n    base.ConfigureViewModelLocator();\n \n    // type / type\n    //ViewModelLocationProvider.Register(typeof(MainWindow).ToString(), typeof(CustomViewModel));\n \n    // type / factory\n    //ViewModelLocationProvider.Register(typeof(MainWindow).ToString(), () =&gt; Container.Resolve&lt;CustomViewModel&gt;());\n \n    // generic factory\n    //ViewModelLocationProvider.Register&lt;MainWindow&gt;(() =&gt; Container.Resolve&lt;CustomViewModel&gt;());\n \n    // generic type\n    ViewModelLocationProvider.Register&lt;MainWindow, CustomViewModel&gt;();\n}\nBibliografía\nprismlibrary.com/docs/viewmodel-locator.html"},"Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-index":{"title":"Prism index","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/1--Prism-Crear-proyecto","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Comandos-y-eventos","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Crear-propiedades","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Crear-proyecto","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-DataContext","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Dependencias","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-DialogService","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Modulos","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Navigation","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Regions","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-ViewModelLocator","Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Problems/Prism-Titulo-Header-en-Pestaña-Tab"],"tags":[],"content":"1- Prism Crear proyecto\nPrism Comandos y eventos\nPrism Crear propiedades\nPrism Crear proyecto\nPrism DataContext\nPrism Dependencias\nPrism DialogService\nPrism Modulos\nPrism Navigation\nPrism Regions\nPrism ViewModelLocator\nTengo un problema\nPrism Titulo Header en Pestaña Tab"},"Programación/Lenguajes-de-programación/Python/0--Python-index":{"title":"0- Python index","links":["Programación/Lenguajes-de-programación/Python/1--Fundamental","Programación/Lenguajes-de-programación/Python/Arrays,-listas-y-diccionarios","Programación/Lenguajes-de-programación/Python/Tratamiento-de-strings-(cadenas-de-caracteres)","Programación/Lenguajes-de-programación/Python/regex","Programación/Lenguajes-de-programación/Python/Matemáticas","Programación/Lenguajes-de-programación/Python/Numpy","Programación/Lenguajes-de-programación/Python/Tratamiento-de-bits","Programación/Lenguajes-de-programación/Python/Google-Colab"],"tags":[],"content":"1- Fundamental\nArrays, listas y diccionarios\nTratamiento de strings (cadenas de caracteres)\nregex\nMatemáticas\nNumpy\nTratamiento de bits\nGoogle Colab"},"Programación/Lenguajes-de-programación/Python/1--Fundamental":{"title":"1- Fundamental","links":["Programación/Lenguajes-de-programación/Python/Arrays,-listas-y-diccionarios"],"tags":[],"content":"Para el tratamiento de listas, he creado su propia página Arrays, listas y diccionarios\nimportar paquetes\nLos paquetes son como objetos que contiene una lista de métodos. Podemos importar un paquete entero y acceder a sus métodos\nimport random\nrandom.randint(1, 10)\no podemos importar aquellos métodos que nos interesen para usarlos directamente\nfrom random import randint\n \nrandint(1, 10)\nfunciones\ndef suma(a, b):\n    return a+b\n\n\n                  \n                  devolver más de un solo elemento \n                  \n                \n\ndef suma_y_resta (a, b):\n    return a+b, a-b\n \nsuma, resta = suma_y_resta(5, 3)\nprint(suma) # 8\nprint(resta) # 2\nEntrada estándar (de teclado, por consola)\nvalor = input()\n \n \nExcepciones\ntry:\n        respuesta_usuario = float(input(&quot;¿Cuál es la nueva cifra de cambio total? &quot;).replace(&quot;,&quot;, &quot;.&quot;))\n    except ValueError:\n        print(&quot;Por favor, introduce un número válido.&quot;)\n        return\noperador ternario\nes diferente a otros lenguajes, funciona como\nvalor_si_true if condición else valor_si_false\nvalor = 100\n \na = 200\nb = 50\n \nprint(&quot;menor que 100&quot; if a &lt; valor else &quot;mayor que 100&quot;) # mayor que 100\nprint(&quot;menor que 100&quot; if b &lt; valor else &quot;mayor que 100&quot;) # menor que 100\nnums aleatorios\nimport random\n \nrandom.uniform(1, 100) # genera un numero entre 1 y 100 (ambos inclusive)\nrandom.uniform(1.2, 2.5) # igual, pero entre 1.5 y 2.5 (ambos inclusive) \nrandom.randint(1, 100) # genera un ENTERO entre 1 y 100 (ambos inclusive)\nrandom.randrange(2) # genera un ENTERO entre 0 y el numero (SIN incluir), en este caso, solo 0 o 1\nElegir un elemento de una lista\nfrom random import choice\n \nchoice([&#039;win&#039;, &#039;lose&#039;, &#039;draw&#039;])\nMezclar elementos de una lista\n\n\n                  \n                  Cuidado \n                  \n                \n\nShuffle modifica la lista y devuelve None, por lo que, para que tenga efecto, debes hacer como sigue\n\n\nfrom random import shuffle\n \nlista = [&#039;win&#039;, &#039;lose&#039;, &#039;draw&#039;]\nshuffle(lista)\nprint(lista) # [&#039;draw&#039;, &#039;lose&#039;, &#039;win&#039;]"},"Programación/Lenguajes-de-programación/Python/Arrays,-listas-y-diccionarios":{"title":"Arrays, listas y diccionarios","links":[],"tags":[],"content":"Las listas son objetos de tipo colección\nparece que es equivalente\npeople = [&#039;Jon&#039;, &#039;Marcos&#039;, &#039;Maria&#039;, &#039;Ana&#039;]\npoeple = list([&#039;Jon&#039;, &#039;Marcos&#039;, &#039;Maria&#039;, &#039;Ana&#039;])\nCualquier elemento iterable se puede descomponer con list\nres = list(&quot;Erika Vikman&quot;)\nprint(res) # [&#039;E&#039;, &#039;r&#039;, &#039;i&#039;, &#039;k&#039;, &#039;a&#039;, &#039; &#039;, &#039;V&#039;, &#039;i&#039;, &#039;k&#039;, &#039;m&#039;, &#039;a&#039;, &#039;n&#039;]\nDiccionario\nDiccionario con clave texto\ndct = dict(pepe=2, juan=7)\nprint(dct[&quot;pepe&quot;]) # 2\n \njugador = {\n\t&quot;Nombre&quot;: &quot;Blinky&quot;,\n\t&quot;Pais&quot;: &quot;Francia&quot;,\n\t&quot;Porcentaje_victoria&quot;: 72 \n}\n \n \nprint(jugador[&quot;Porcentaje_victoria&quot;]) # 72\n \n \nDiccionario con clave número\ndictPorIndice =  {\n\t3:&quot;Tres&quot;,\n\t1:&quot;Uno&quot;,\n\t2:&quot;Dos&quot;\n}\n \nprint(dictPorIndice[2]) # Dos\nComprobar si existe\nprint(jugador.Contains(&quot;Velocidad&quot;)) # False\nAñadir elemento\nse puede añadir un nuevo elemento directamente\ndictPorIndice[4] = &quot;Cuatro&quot;\nprint(dictPorIndice[4]) # &quot;Cuatro&quot;\n \njugador[&quot;Velocidad&quot;] = 12\nprint(jugador[&quot;Velocidad&quot;])\nBibliografía\nellibrodepython.com/diccionarios-en-python#m%C3%A9todos-diccionarios-python\nelpythonista.com/listas-python"},"Programación/Lenguajes-de-programación/Python/Google-Colab":{"title":"Google Colab","links":[],"tags":[],"content":"formularios\ntext = &quot;texto actual&quot;  #@param{type:&quot;string&quot;}"},"Programación/Lenguajes-de-programación/Python/Matemáticas":{"title":"Matemáticas","links":["Programación/Lenguajes-de-programación/Python/Numpy"],"tags":[],"content":"Para matemáticas más complejas, probablemente sea mejor Numpy\nredondear un número\n# sin argumentos, redondea al entero más cercano\nvalor = round(0.5555)\nprint(valor) # 1\n \nvalor = round(0.4999999)\nprint(valor) # 0\n \nvalor = round(0.5555, 2) # el 2 es para los decimales\nprint(valor) # 0.56"},"Programación/Lenguajes-de-programación/Python/Numpy":{"title":"Numpy","links":[],"tags":[],"content":"numpy.arange\nDevuelve un intervalo uniformemente espaciado\nnumpy.arange([_start_, ]_stop_, [_step_, ]_dtype=None_, _*_, _device=None_, _like=None_)\nEjemplo, si quieres los pares entre 2 y 12 (sin incluir el 12, pues\nnumpy.arange(2, 12, 2),\nesto devolverá  [2 4 6 8 10]\nSolo es obligatorio un numero, pues por defecto start es 0 y step es 1\nnumpy.arange(12)\ndevolverá\n[0 1 2 3 4 5 6 7 8 9 10 11]"},"Programación/Lenguajes-de-programación/Python/Tratamiento-de-bits":{"title":"Tratamiento de bits","links":[],"tags":[],"content":"En realidad, es equivalente a multiplicar por 2 (o dividir entre 2)\nDe binario a entero\na=int(&#039;101&#039;,2)\nprint(a) # 5\n \nb=int(&#039;1100000000000000000000&#039;, 2)\nprint(b) # 3145728\nDe entero a binario\na=int(&#039;101&#039;,2)\nprint(a) # 5\n \nb=bin(a) # a que está en decimal lo pasamos a binario\nprint(b) # 0b101\nMover un bit a la izquierda\n\n\n                  \n                  Siempre se añade un 0 \n                  \n                \n\na &lt;⇐ 1 añade un 0 al lado derecho\n\n\na=int(&#039;101&#039;,2)\nprint(a) # 5\n \na &lt;&lt;= 1\nprint(a) # 10, es decir 1010 en binario\nMover un bit a la derecha\na=int(&#039;101&#039;,2)\nprint(a) # 5\n \na &lt;&lt;= 1\nprint(a) # 2 se pierde el bit de la derecha, por eso es 10 en binario, 2 en decimal"},"Programación/Lenguajes-de-programación/Python/Tratamiento-de-carpetas,-archivos,-rutas":{"title":"Tratamiento de carpetas, archivos, rutas","links":[],"tags":[],"content":"Como separador independiente del SO tenemos os.sep, para unir una ruta y el archivo, se usa el siguiente comando \nos.sep.join([path, filename])\nPara obtener el nombre de archivo a partir de una ruta se hace lo siguiente \nos.path.basename(original_path)\nPara obtener una ruta sin nombre de archivo \nos.path.dirname(original_path)\nPara saber si una ruta es archivo\nos.path.isfile(path)\nPara saber si una ruta es carpeta\nos.path.isdir(path)"},"Programación/Lenguajes-de-programación/Python/Tratamiento-de-strings-(cadenas-de-caracteres)":{"title":"Tratamiento de strings (cadenas de caracteres)","links":[],"tags":[],"content":"Interpolación de strings (cadenas de carácteres)\nname = &quot;Javi&quot;\n \ntext = f&#039;Hola, {name}&#039;\nCadena multilinea\nname = &quot;Javi&quot;\n \ntext = f&quot;&quot;&quot;\nHola,\n{name}\n&quot;&quot;&quot;\nCadenas r (raw)\nSirven para que no se interprete nada. Por ejemplo, cuando se usa la contrabarra (\\), deja de servir para escapar para significar contrabarra\n# Sin la r, hace falta contrabarra doble\nprint(&#039;path\\\\to\\\\the\\\\thing&#039;) # path\\to\\the\\thing\n \n# Con la r, se interpreta la \\ como literal\nprint(r&#039;path\\to\\the\\thing&#039;) # path\\to\\the\\thing\nstr.replace()\n\n\n                  \n                  Reemplaza de forma case-sensitive todas las ocurrencia \n                  \n                \n\ntext = &quot;aDd mdu&quot;\nsustituir=&quot;d&quot;\npor = &quot;x&quot;\nres= text.replace(sustituir, por)\nprint(res) # aDx mxu\nBibliografía\nwww.datacamp.com/es/tutorial/python-string-interpolation\npacketpushers.net/blog/what-does-an-r-before-a-string-mean-in-python/#:~:text=R%20Means%20’Raw%20String’,a%20literal%20(raw)%20character."},"Programación/Lenguajes-de-programación/Python/regex":{"title":"regex","links":[],"tags":[],"content":"re.match (comprobar si existe)\nimport re\n \ntext = &quot;12A&quot;\nnumbersAndALetter = re.match(&quot;\\d+[A-Za-z]&quot;, text)\nEn caso de contener, devuelve un objeto con la captura:\nnumbersAndALetter.span()  #(0, 3) - Esto \ny podemos usarlo como condición\nif numbersAndALetter:\n\tdoIfTrue()\nelse:\n\tdoIfFalse()\nre.compile (crea objeto regex para usarlo luego cómodamente)\nPara más info se usa compile\nimport re\n \ncapturadorDeNumeros = re.compile(&quot;(\\d+)&quot;)\n \n#...\n \nnums = capturadorDeNumeros.findall(&quot;lnfaslkn3knfal6k&quot;) # nums = [&#039;3&#039;, &#039;6&#039;]\nre.split (separar en base a la expresión regular)\nre.findAll (busca todas las ocurrencias de una exp reg)\nimport re\n \ncapturadorDeNumeros = re.compile(&quot;.*\\d+.*&quot;)\n \n#...\n \nnums = capturadorDeNumeros.findall(&quot;lnfaslkn3knfalk&quot;)\n \n \nKeywords\nRegexp regular expressions"},"Programación/Lenguajes-de-programación/SQL":{"title":"SQL","links":["Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/SQLite-en-JS"],"tags":[],"content":"Para ver cómo funciona SQLite en JS ve a esta nota\nJoins\nBibliografía"},"Programación/Lenguajes-de-programación/SQL/Común":{"title":"Común","links":[],"tags":[],"content":"Crear / Create table\nCREATE TABLE Ingredients (id INTEGER PRIMARY KEY AUTOINCREMENT, date TEXT, name TEXT, image TEXT)\nwww.w3schools.com/sql/sql_create_table.asp\nSeleccionar / Select\nSELECT * from Ingredients\nwww.w3schools.com/sql/sql_select.asp\nAñadir / Insert into\nINSERT INTO table_name (column1, column2, column3, ...)  \nVALUES (value1, value2, value3, ...);\nSi estás añadiendo para todas las columnas, no tienes que especificarlas. Pero evidentemente se tienes que añadirlas en el orden en que están dispuestas las columnas!!\nINSERT INTO table_name\nVALUES (value1, value2, value3, ...);\nActualizar / Update\nSQLite\nUPDATE Ingredients SET date = ? WHERE id = ?\nUPDATE Ingredients  \nSET column1 = value1, column2 = value2, ...  \nWHERE id = ?;\nwww.w3schools.com/sql/sql_update.asp\nBorrar / Delete\nDELETE FROM table_name WHERE _condition_;"},"Programación/Lenguajes-de-programación/SQL/Joins":{"title":"Joins","links":[],"tags":[],"content":"¿Por qué los ejemplos que salen de LEFT y RIGHT JOIN no son lo mismo que hacer sencillamente SELECT * FROM A o SELECT * FROM B respectivamente?\nPorque añade la info que hay en B\nMejor poner un ejemplo ilustrativo\nA = Personas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNombreEdadJuan45Luisa32\nB = Localidades\n\n\n\n\n\n\n\n\n\n\n\nNombreValencia\nJuan vive en Valencia, pero Luisa no tiene asignada una localidad\nEn el resultado al hacer A LEFT JOIN B el resultado sería\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNombreEdadLocalidadJuan45ValenciaLuisa32Si este mismo ejemplo fuera INNER JOIN daría el siguiente resultado\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNombreEdadLocalidadJuan45Valencia\n7 uniones SQL que debes conocer\n➡️ Unión interna: recupera registros con valores coincidentes en ambas tablas.\n➡️ Unión izquierda: recupera todos los registros de la tabla izquierda y los registros coincidentes de la tabla derecha.\n➡️ Combinación izquierda con comprobación nula: filtra solo los registros en los que no hay ninguna coincidencia en la tabla derecha (valores NULL).\n➡️ Combinación a la derecha: recupera todos los registros de la tabla derecha y los registros coincidentes de la tabla izquierda.\n➡️ Combinación derecha con comprobación nula: filtra solo los registros en los que no hay coincidencia en la tabla izquierda (valores NULL).\n➡️ Unión completa: recupera todos los registros cuando hay una coincidencia en la tabla izquierda o derecha.\n➡️ Combinación completa con comprobación nula: filtra solo los registros en los que no hay coincidencia ni en la tabla izquierda ni en la derecha (valores NULL).\nIT-TALENT Headhunter SENIOR IT\nChumi-IT Portal de empleos IT Latam\nCortesía imagen amigoscode.com\n\n\nBibliografía\nAaron Wright  (Cogido de LinkedIn)\nMarco Muñoz (Cogido de LinkedIn)\nwww.w3schools.com/sql/\nEleni"},"Programación/Lenguajes-de-programación/SQL/SQL-Ejemplos/Calcular-edades-con-fechas-timestamp":{"title":"Calcular edades con fechas timestamp","links":[],"tags":[],"content":"SELECT TIMESTAMPDIFF( YEAR, ‘1994-02-20’, CURDATE( ) ) AS age"},"Programación/Lenguajes-de-programación/SQL/SQL-Ejemplos/Contar-numero-registros-por-rangos":{"title":"Contar numero registros por rangos","links":[],"tags":[],"content":"SELECT count(*), concat(rango, &quot; - &quot;, (rango + 9)) AS Rango\n \nFROM (\n \n SELECT FLOOR(number / 10) * 10 AS rango\n \n        FROM table\n \n) AS t\n \nGROUP BY rango"},"Programación/Lenguajes-de-programación/WPF/1--WPF-Importante":{"title":"1- WPF Importante","links":["WPF-GUI-XAML"],"tags":[],"content":"Datos interesantes\n\n\nLa raíz del proyecto se encuentra en la misma carpeta donde esté el csproj\n\n\nEn ejecución, la raíz es la misma carpeta en donde esté el ejecutable (.exe). En Debug: %userprofile%\\source\\repos\\MultiApp\\MultiApp\\MultiApp\\bin\\Debug\\net6.0-windows\n\n\nCreo que IContainerProvider es el contenedor de dependencias, por lo que ahí se resuelve todo lo que necesites: ejemplo IRegionManager\n\n\nLas vistas con User Control. Mas sobre vistas en WPF GUI XAML\n\n\n"},"Programación/Lenguajes-de-programación/WPF/2--Terminología-WPF":{"title":"2- Terminología WPF","links":[],"tags":[],"content":"Elemento o Control es cada componente que añades a la interfaz, lo que en terminología de Unity sería un GameObject\nLos atributos proporcionan una manera de asociar la información con el código de manera declarativa. También pueden proporcionar un elemento reutilizable que se puede aplicar a diversos destinos. Son los típicos [ObsoleteAttribute(&quot;Use NewMethod instead&quot;)] o [UnityTest] o [SerializeField]\nEl código donde está la lógica y que está asociado con el XAML es conocido como “code-behind”\nLas plantillas o Templates (si no me equivoco) son los bloques con los que compone la interfaz, existen de dos tipos:\nControl\nSe trata de la clase base para los elementos de interfaz (UI)\nControlTemplate\nEspecifica la estructura visual y los aspectos de comportamiento de un control que se pueden compartir entre varias instancias del control.\nDataTemplate\nte permite especificar la apariencia del contenido de un control\nPropiedad \nen el contexto de XAML son las características que configuras dentro de las etiquetas; \nEjemplo:\n&lt;Label\n==Height=“20” Content=“Mi etiqueta”==\n/&gt;\nen el contexto de C# la de crear ese mix entre variable y método\nEjemplo:\npublic string Name {get; set;}\nBibliografía\nlearn.microsoft.com/en-us/dotnet/api/system.windows.controls.control\nlearn.microsoft.com/en-us/dotnet/api/system.windows.controls.controltemplate\nlearn.microsoft.com/en-us/dotnet/desktop/wpf/overview/"},"Programación/Lenguajes-de-programación/WPF/3--WPF-Crear-proyecto":{"title":"3- WPF Crear proyecto","links":["Programación/Lenguajes-de-programación/Prism-(WPF)/Prism-Crear-proyecto","tags/WIP"],"tags":["WIP"],"content":"\nSi quieres que incluya Prism ve a Este enlace\nWIP"},"Programación/Lenguajes-de-programación/WPF/4--Ejemplo-MVVM":{"title":"4- Ejemplo MVVM","links":[],"tags":[],"content":"Modelo\n\n\nnamespace Reservoom.Models\n{\n    public class Hotel\n    {\n        private readonly ReservationBook _reservationBook;\n \n        public string Name { get; }\n \n        public Hotel(string name, ReservationBook reservationBook)\n        {\n            Name = name;\n            _reservationBook = reservationBook;\n        }\n    }\n}\nnamespace Reservoom.Models\n{\n    public class Reservation\n    {\n        public RoomID RoomID { get; }\n        public DateTime StartTime { get; }\n        public DateTime EndTime { get; }\n \n        public TimeSpan Length =&gt; EndTime.Subtract(StartTime);\n \n        public Reservation(RoomID roomID, DateTime startTime, DateTime endTime)\n        {\n            RoomID = roomID;\n            StartTime = startTime;\n            EndTime = endTime;\n        }\n    }\n}\nnamespace Reservoom.Models\n{\n    public class ReservationBook\n    {\n        private readonly Dictionary&lt;RoomID, IList&lt;Reservation&gt;&gt; _roomsToReservations;\n \n        public ReservationBook()\n        {\n            _roomsToReservations = new Dictionary&lt;RoomID, List&lt;Reservation&gt;&gt;();\n        }\n}\nnamespace Reservoom.Models\n{\n    public class RoomID\n    {\n        public int FloorNumber { get; }\n        public int RoomNumber { get; }\n \n        public RoomID(int floorNumber, int roomNumber)\n        {\n            FloorNumber = floorNumber;\n            RoomNumber = roomNumber;\n        }\n        \n\t    public override bool Equals(object obj)\n        {\n            return obj is RoomID roomID &amp;&amp;\n                FloorNumber == roomID.FloorNumber &amp;&amp;\n                RoomNumber == roomID.RoomNumber;\n        }\n    \n\t    public override int GetHashCode()\n        {\n            return HashCode.Combine(FloorNumber, RoomNumber);\n        }\n    }\n}\nMakeReservationView.xaml\n&lt;UserControl\n\t\t\t \nPara cargar la vista por defecto, la pone dentro del grid en MainWindows.xaml\n&lt;Window\n\t\t...\n&gt;\n\t&lt;Grid&gt;\n\t\t&lt;views:MakeReservationView /&gt;\n\t&lt;/Grid&gt;\n&lt;/Window&gt;"},"Programación/Lenguajes-de-programación/WPF/WPF-Crear-estilos-y-plantillas":{"title":"WPF Crear estilos y plantillas","links":["Programación/Lenguajes-de-programación/WPF/WPF-Referenciar-recursos"],"tags":[],"content":"Para referenciar las plantillas que creemos usaremos StaticResource como se explica en la sección WPF Referenciar recursos\nBindings\nTemplateBinding es una forma optimizada de enlazar plantillas. Util para enlazar partes de una plantilla a propiedades de un control. Ejemplo: Cada control tiene una propiedad BorderThickness. Puedes usar un TemplateBinding para manejar qué elemento en la plantilla se ve afectada por esta configuración del control.\nContentControl e ItemsControl\nSi el ContentPresenter está declarado en el ControlTemplate, enlazará automáticamente las propiedades del ControlTemplate y del Content. De la misma forma, si está presente el ItemPresenter en el ControlTemplate, éste enlazará las propiedades del ItemTemplate y de los Items automáticamente\nDataTemplates\nSe trata de otro recurso, pero en vez de ser gráfico, es de datos. Se debe incluir la propiedad DataType, que es el equivalente a TargetType del Style o ControlTemplate\nPuedes omitir el x:Key para que la info se aplique a todos los DataType que hayas que correspondan\nPara ver como tratar con datos y archivos leer esta página\nPasar estilos a archivos separados\nDeberemos crear en App.xaml un diccionario combinado con cada archivo representado por su ruta (incluida la extensión) en la propiedad Source\nApp.xaml\n&lt;Application x:Class=&quot;ImageViewer.App&quot;\n             xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:local=&quot;clr-namespace:ImageViewer&quot;\n             StartupUri=&quot;MainWindow.xaml&quot;&gt;\n    &lt;Application.Resources&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;ResourceDictionary.MergedDictionaries&gt;\n                &lt;ResourceDictionary Source=&quot;Theme/MenuButtonTheme.xaml&quot; /&gt;\n                &lt;ResourceDictionary Source=&quot;Theme/TextBoxTheme.xaml&quot; /&gt;\n            &lt;/ResourceDictionary.MergedDictionaries&gt;\n        &lt;/ResourceDictionary&gt;\n    &lt;/Application.Resources&gt;\n&lt;/Application&gt;\nBibliografía\nlearn.microsoft.com/en-us/dotnet/desktop/wpf/controls/styles-templates-overview \ngithub.com/microsoft/WPF-Samples/tree/master/Styles%20%26%20Templates/IntroToStylingAndTemplating"},"Programación/Lenguajes-de-programación/WPF/WPF-Datos-y-archivos":{"title":"WPF Datos y archivos","links":[],"tags":[],"content":"Hay 3 formas diferentes de obtener archivos para la app\n\n\nArchivos recurso: Archivos que se encuentran compilados, o bien en el ejecutable o en una librería de ensamblaje WPF y no necesitas que se actualicen\n\n\nArchivos de contenido: Ficheros independientes que tienen una asociación explícita con el ensamblaje de un ejecutable WPF\n\n\nArchivos lugar de origen: Ficheros independientes no tienen asociación con el ensamblaje de un ejecutable WPF (se copian junto con el ejecutable al compilar)\n\n\nArchivos recurso\nEste tipo de archivos estarán compilados dentro del ensamblador (assembly) del ejecutable. Es la única forma de garantizar al 100% que este archivo estará disponible\nPara que esto ocurra se deben seleccionar los archivos en Visual Studio &gt; Botón derecho &gt; Propiedades y marcar\n\nAcción de compilación: Recurso\n\n\nEs necesario crear un uri siguiendo sus reglas\nMultiApp/MusicModule/Views/PlayerView.xaml\n&lt;BitmapImage UriSource=&quot;pack://application:,,,/MusicModule;component/Icons/IconPlay.png&quot; /&gt;\nDesde el código se hace así, igual que antes, pero podríamos necesitar el reader concreto acorde al tipo que necesitemos cargar\nUri uriModel = new Uri(@&quot;pack://application:,,,/Visualizer3D;component/Models3D/montserra.obj&quot;);\nStreamResourceInfo info = Application.GetResourceStream(uriModel);\n// Se usa el reader que corresponda al tipo de archivo que deseemos cargar\nSelectedModel = _helixObjReader.Read(info.Stream);\nArchivos de contenido\nEste tipo de archivos están distruídos de forma poco acoplada a lo largo del ensamblado del ejecutable. Aunque no están compilados en el assembly. Éste está compilado con un metadato que establece una asociación con estos archivos\nCargar estos archivos es idéntico a Archivos Recurso\nArchivos lugar de origen\nEste tipo de archivos se copiarán a la carpeta del ejecutable.\nPara que esto ocurra, se deben seleccionar los archivos en Visual Studio &gt; Botón derecho &gt; Propiedades y marcar \n\n\nAcción de compilación: ninguna y \n\n\nCopiar en el directorio de salida: Copiar siempre\n\n\n\nBibliografía\nlearn.microsoft.com/en-us/dotnet/desktop/wpf/app-development/wpf-application-resource-content-and-data-files\nKeywords\nResource Content Site of Origin Files Data Source"},"Programación/Lenguajes-de-programación/WPF/WPF-Ejemplo-ModernUI":{"title":"WPF Ejemplo ModernUI","links":[],"tags":[],"content":"\nPreambulos\nElimina el título, porque esta interfaz no los usa, el tamaño de la ventana lo cambia por 600Hx920W y añade WindowStyle=&quot;None&quot; ResizeMode=&quot;NoResize&quot; Background=&quot;Transparent&quot; AllowsTransparency=&quot;True&quot;\nCrea las siguientes carpetas: Core, Fonts, Images, Theme, MVVM, MVVM/Model, MVVM/View, MVVM/ViewModel\nMainWindow.xaml Implementación parcial\n&lt;Window x:Class=&quot;ModernUI.MainWindow&quot;\n        xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:ModernUI&quot;\n        mc:Ignorable=&quot;d&quot;\n        Height=&quot;600&quot; Width=&quot;920&quot;\n        WindowStyle=&quot;None&quot;\n        ResizeMode=&quot;NoResize&quot;\n        Background=&quot;Transparent&quot;\n        AllowsTransparency=&quot;True&quot;&gt;\n    \n&lt;/Window&gt;\nObservableObject\nEn Core crea una clase llamada ObservableObject que implementa INotifyPropertyChanged\n[CallerMemberName] es para tener el nombre de la función que lo llama\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n \nnamespace ModernUI.Core\n{\n    internal class ObervableObject : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler? PropertyChanged;\n        \n        protected void OnPropertyChanged([CallerMemberName] string? name = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n        }\n    }\n}\nRelayCommand\nComenta que ya existe uno por defecto, pero que es un tanto inflexible y quiere crear el suyo propio\nusing System;\nusing System.Windows.Input;\n \nnamespace ModernUI.Core\n{\n    class RelayCommand : ICommand\n    {\n        public event EventHandler? CanExecuteChanged\n        {\n            add { CommandManager.RequerySuggested += value; }\n            remove { CommandManager.RequerySuggested -= value; }\n        }\n \n        private Action&lt;object&gt; _execute;\n        private Func&lt;object, bool&gt; _canExecute;\n \n        public RelayCommand(Action&lt;object&gt; execute, Func&lt;object, bool&gt; canExecute = null)\n        {\n            _execute = execute;\n            _canExecute = canExecute;\n        }\n \n        public bool CanExecute(object? parameter)\n        {\n            return _canExecute == null || _canExecute(parameter);\n        }\n \n        public void Execute(object? parameter)\n        {\n            _execute(parameter);\n        }\n    }\n}\nRejilla y menu lateral\nMainWindow.xaml Implementación parcial\n&lt;Window x:Class=&quot;ModernUI.MainWindow&quot;\n        xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n        xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;\n        xmlns:d=&quot;schemas.microsoft.com/expression/blend/2008&quot;\n        xmlns:mc=&quot;schemas.openxmlformats.org/markup-compatibility/2006&quot;\n        xmlns:local=&quot;clr-namespace:ModernUI&quot;\n        mc:Ignorable=&quot;d&quot;\n        Height=&quot;600&quot; Width=&quot;920&quot;\n        WindowStyle=&quot;None&quot;\n        ResizeMode=&quot;NoResize&quot;\n        Background=&quot;Transparent&quot;\n        AllowsTransparency=&quot;True&quot;&gt;\n    &lt;Border Background=&quot;#272537&quot;\n            CornerRadius=&quot;20&quot;&gt;\n        &lt;Grid&gt;\n            &lt;Grid.ColumnDefinitions&gt;\n                &lt;ColumnDefinition Width=&quot;200&quot; /&gt;\n                &lt;ColumnDefinition /&gt;\n            &lt;/Grid.ColumnDefinitions&gt;\n            &lt;Grid.RowDefinitions&gt;\n                &lt;RowDefinition Height=&quot;75&quot;/&gt;\n                &lt;RowDefinition /&gt;\n            &lt;/Grid.RowDefinitions&gt;\n \n            &lt;TextBlock HorizontalAlignment=&quot;Left&quot;\n                       Margin=&quot;20, 0, 0, 0&quot;\n                       VerticalAlignment=&quot;Center&quot;\n                       FontSize=&quot;25&quot;\n                       Foreground=&quot;White&quot;&gt;JaviApp&lt;/TextBlock&gt;\n            &lt;StackPanel Grid.Row=&quot;1&quot;&gt;\n                &lt;RadioButton Content=&quot;Home&quot;\n                             Height=&quot;50&quot;\n                             Foreground=&quot;White&quot; \n                             FontSize=&quot;14&quot;/&gt;\n            &lt;/StackPanel&gt;\n        &lt;/Grid&gt;\n    &lt;/Border&gt;\n&lt;/Window&gt;\nEstilo reutilizable (ResourceDictionary)\nMenuButtonTheme.xaml (explicado parte a parte abajo)\n&lt;ResourceDictionary xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n                    xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;&gt;\n    &lt;Style BasedOn=&quot;{StaticResource {x:Type ToggleButton}}&quot;\n            TargetType=&quot;RadioButton&quot;\n            x:Key=&quot;MenuButtonTheme&quot;&gt;\n        &lt;Style.Setters&gt;\n            &lt;Setter Property=&quot;Template&quot;&gt;\n                &lt;Setter.Value&gt;\n                    &lt;ControlTemplate&gt;\n                        &lt;Grid VerticalAlignment=&quot;Stretch&quot;\n                        HorizontalAlignment=&quot;Stretch&quot;\n                        Background=&quot;{TemplateBinding Background}&quot;&gt;\n                            &lt;TextBlock Text=&quot;DefaultText&quot;\n                                VerticalAlignment=&quot;Center&quot;\n                                Margin=&quot;50, 0, 0, 0&quot;/&gt;\n                        &lt;/Grid&gt;\n                    &lt;/ControlTemplate&gt;\n                &lt;/Setter.Value&gt;\n            &lt;/Setter&gt;\n \n            &lt;Setter Property=&quot;Background&quot; Value=&quot;Transparent&quot; /&gt;\n            &lt;Setter Property=&quot;BorderThickness&quot; Value=&quot;0&quot; /&gt;\n        &lt;/Style.Setters&gt;\n \n        &lt;Style.Triggers&gt;\n            &lt;Trigger Property=&quot;IsChecked&quot; Value=&quot;True&quot;&gt;\n                &lt;Setter Property=&quot;Background&quot; Value=&quot;#22202f&quot; /&gt;\n            &lt;/Trigger&gt;\n        &lt;/Style.Triggers&gt;\n    &lt;/Style&gt;\n&lt;/ResourceDictionary&gt;\nEn esta etiqueta heredamos gracias a  BasedOn el estilo que tiene un elemento en concreto (en este caso ToggleButton)\nDefinimos a qué tipo de elemento se lo aplicaremos (en este caso a los RadioButton)\nY le ponemos nombre para luego poder referenciarlo a la hora de aplicarlo\nStaticResource permite obtener contenido que esté definido en otra parte (en algún nivel de la página, la aplicación, los temas de control y los recursos externos disponibles, o los recursos del sistema). Para cargarlo se deberá utilizar el nombre (ResourceKey) especificado en x:Key\nMenuButtonTheme.xaml\n&lt;Style BasedOn=&quot;{StaticResource {x:Type ToggleButton}}&quot;\n        TargetType=&quot;RadioButton&quot;\n        x:Key=&quot;MenuButtonTheme&quot;&gt;\n \n    ...\n \n&lt;/Style&gt;\nDentro del Style tenemos 2 secciones: los Setters que aplican un valor a una propiedad concreta del elemento al que el Style haga referencia\nY los Triggers que definen básicamente una condición para aplicar otro Setter diferente\nEn la sección de Setters tenemos estos simples\nMenuButtonTheme.xaml\n&lt;Setter Property=&quot;Background&quot; Value=&quot;Transparent&quot; /&gt;\n&lt;Setter Property=&quot;BorderThickness&quot; Value=&quot;0&quot; /&gt;\nY este que es bastante más complejo ya que se aplica al template completo\nControlTemplate parece una etiqueta que define una parte reutilizable, lo que en terminología Unity sería (aprox) un Prefab\nTemplateBinding establece para esa propiedad en concreto, al valor del control de la plantilla\nMenuButtonTheme.xaml\n&lt;Setter Property=&quot;Template&quot;&gt;\n    &lt;Setter.Value&gt;\n        &lt;ControlTemplate&gt;\n            &lt;Grid VerticalAlignment=&quot;Stretch&quot;\n                        HorizontalAlignment=&quot;Stretch&quot;\n                        Background=&quot;{TemplateBinding Background}&quot;&gt;\n                &lt;TextBlock Text=&quot;DefaultText&quot;\n                                VerticalAlignment=&quot;Center&quot;\n                                Margin=&quot;50, 0, 0, 0&quot;/&gt;\n            &lt;/Grid&gt;\n        &lt;/ControlTemplate&gt;\n    &lt;/Setter.Value&gt;\n&lt;/Setter&gt;\nSe entiende que al activarse el evento IsChecked, el Background del RadioButton será cambiado a #22202F\nMenuButtonTheme.xaml\n&lt;Style.Triggers&gt;\n    &lt;Trigger Property=&quot;IsChecked&quot; Value=&quot;True&quot;&gt;\n        &lt;Setter Property=&quot;Background&quot; Value=&quot;#22202f&quot; /&gt;\n    &lt;/Trigger&gt;\n&lt;/Style.Triggers&gt;\nPor último, para que este diccionario se pueda utilizar es necesario referenciarlo en el archivo App.xaml\nApp.xaml\n&lt;Application x:Class=&quot;ModernUI.App&quot;\n             xmlns=&quot;schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n             xmlns:x=&quot;schemas.microsoft.com/winfx/2006/xaml&quot;\n             xmlns:local=&quot;clr-namespace:ModernUI&quot;\n             StartupUri=&quot;MainWindow.xaml&quot;&gt;\n    &lt;Application.Resources&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;ResourceDictionary.MergedDictionaries&gt;\n                &lt;ResourceDictionary Source=&quot;Theme/MenuButtonTheme.xaml&quot; /&gt;\n            &lt;/ResourceDictionary.MergedDictionaries&gt;\n        &lt;/ResourceDictionary&gt;         \n    &lt;/Application.Resources&gt;\n&lt;/Application&gt;\nPor último lo aplicamos con Style=“{StaticResource MenuButtonTheme}”, pero hay un problema, y es que todos los RadioButton a los que le apliquemos este estilo, tendrán el texto por defecto DefaultText que le pusimos antes. Debemos cambiarlo\n&lt;TextBlock Text=&quot;{TemplateBinding Content}&quot;\n                                VerticalAlignment=&quot;Center&quot;\n                                Margin=&quot;50, 0, 0, 0&quot;/&gt;\nSin embargo da error, ya que nos falta añadir en ControlTemplate TargetType=“RadioButton” y quedaría:\nMenuButtonTheme.xaml\n&lt;ControlTemplate TargetType=&quot;RadioButton&quot;&gt;\n    &lt;Grid VerticalAlignment=&quot;Stretch&quot;\n    HorizontalAlignment=&quot;Stretch&quot;\n    Background=&quot;{TemplateBinding Background}&quot;&gt;\n        &lt;TextBlock Text=&quot;{TemplateBinding Content}&quot;\n            VerticalAlignment=&quot;Center&quot;\n            Margin=&quot;50, 0, 0, 0&quot;/&gt;\n    &lt;/Grid&gt;\n&lt;/ControlTemplate&gt;\nBibliografía\nwww.youtube.com/watch"},"Programación/Lenguajes-de-programación/WPF/WPF-Mostrar-listado-de-datos":{"title":"WPF Mostrar listado de datos","links":["Programación/Lenguajes-de-programación/WPF/4--Ejemplo-MVVM"],"tags":[],"content":"Hay 3 formas: ListView, ListBox y DataGrid. Siendo esta última la más sencilla\nPrimero diferenciar entre ListView y ListBox. La primera hereda de ListBox y además te permite mayor control sobre cómo se va a presentar la info\nEntonces, para cosas simples ListBox, para cosas más complejas ListView\nDebemos crear una propiedad de tipo ObservableCollection con la info que quieras mostrar. Lo suyo es crear un objeto o hacerlo de string\nY hay que sobreescribir el ToString del objeto para que sea el valor que muestre en la lista\nObtener el elemento seleccionado de la lista\nDebemos poner el x:Name en el ListView que luego referenciaremos en el CommandParameter\n&lt;ListView ItemsSource=&quot;{Binding MusicList}&quot;\n            Grid.Column=&quot;1&quot;\n            x:Name=&quot;_listOfMusic&quot;&gt;\n    &lt;i:Interaction.Triggers&gt;\n        &lt;i:EventTrigger EventName=&quot;SelectionChanged&quot;&gt;\n            &lt;prism:InvokeCommandAction Command=&quot;{Binding SongSelectedCommand}&quot; \n                                        CommandParameter=&quot;{Binding SelectedItem, ElementName=_listOfMusic}&quot; /&gt;\n        &lt;/i:EventTrigger&gt;\n    &lt;/i:Interaction.Triggers&gt;\n&lt;/ListView&gt;\nEste ejemplo viene del 4- Ejemplo MVVM\n&lt;ListView&gt;\n&lt;!-- ListViewItem son placeholders (creo) --&gt;\n    &lt;ListViewItem /&gt;\n    &lt;ListViewItem /&gt;\n    &lt;ListViewItem /&gt;\n    &lt;ListView.View&gt;\n        &lt;GridView&gt;\n            &lt;GridViewColumn Header=&quot;Room ID&quot;&gt;\n                &lt;GridViewColumn.CellTemplate&gt;\n                    &lt;DataTemplate&gt;\n                        &lt;TextBlock Text=&quot;12&quot;/&gt;\n                    &lt;/DataTemplate&gt;\n                &lt;/GridViewColumn.CellTemplate&gt;\n            &lt;/GridViewColumn&gt;\n        &lt;/GridView&gt;\n    &lt;/ListView.View&gt;\n&lt;/ListView&gt;\nmás completo\n&lt;ListView ItemsSource=&quot;{Binding Reservations}&quot; Visibility=&quot;{Binding HasReservations, Converter={StaticResource BooleanToVisibilityConverter}}&quot;&gt;\n                        &lt;ListView.ItemContainerStyle&gt;\n                            &lt;Style TargetType=&quot;ListViewItem&quot;&gt;\n                                &lt;Setter Property=&quot;HorizontalContentAlignment&quot; Value=&quot;Stretch&quot; /&gt;\n                                &lt;Setter Property=&quot;AutomationProperties.AutomationId&quot; Value=&quot;{Binding RoomID, StringFormat={}{0}_ReservationListingItem}&quot; /&gt;\n                            &lt;/Style&gt;\n                  &lt;!-- Esto es para dar estilo a los items de la lista --&gt;\n                        &lt;/ListView.ItemContainerStyle&gt;\n                        &lt;ListView.View&gt;\n                            &lt;GridView&gt;\n                                &lt;GridViewColumn Header=&quot;Room ID&quot;&gt;\n                                    &lt;GridViewColumn.CellTemplate&gt;\n                                        &lt;DataTemplate&gt;\n                                            &lt;TextBlock HorizontalAlignment=&quot;Center&quot; Text=&quot;{Binding RoomID}&quot; /&gt;\n                                        &lt;/DataTemplate&gt;\n                                    &lt;/GridViewColumn.CellTemplate&gt;\n                                &lt;/GridViewColumn&gt;\n \n\t\t\t&lt;!-- He puesto solo Start Date por resumir --&gt;\n                                &lt;GridViewColumn Header=&quot;Start Date&quot;&gt;\n                                    &lt;GridViewColumn.CellTemplate&gt;\n                                        &lt;DataTemplate&gt;\n                                            &lt;TextBlock Padding=&quot;0,0,20,0&quot; Text=&quot;{Binding StartDate}&quot; /&gt;\n                                        &lt;/DataTemplate&gt;\n                                    &lt;/GridViewColumn.CellTemplate&gt;\n                                &lt;/GridViewColumn&gt;\n                            &lt;/GridView&gt;\n                        &lt;/ListView.View&gt;\n                    &lt;/ListView&gt;\n                ``` \n            \n# Bibliografía\n \n[www.wpftutorial.net/DataGrid.html](www.wpftutorial.net/DataGrid.html)"},"Programación/Lenguajes-de-programación/WPF/WPF-Referenciar-recursos":{"title":"WPF Referenciar recursos","links":[],"tags":[],"content":"Recursos estáticos\nSon más eficientes, pero el recurso tiene que existir antes de ejecutar la app. No soporta referencias hacia adelante (Forward References). Cargan al inicio de la aplicción\n\n\nRecursos que no serán reevaluados, como recargar la página\n\n\nQue no sean DependencyObject o Freezable\n\n\nCuando estás creando una librería de recursos en una DLL\n\n\nPara temas / controles personalizados (según entiendo, de hacerlo dinámico te arriesgas a la posibilidad de que cambie de nombre el recurso)\n\n\nUsando recursos para configurar un gran numero de propiedades de dependencia\n\n\nQuieres cambiar el recurso subyacente para todos los clientes, o quieres mantener instancias editables separadas para cada cliente usando el atributo x:Shared\n\n\nRecursos dinámicos\nUsamos los dinámicos cuando el valor se genera en tiempo de ejecución. Por ejemplo: SystemFonts. No se cargan hasta que no se necesitan.\n\n\nTienes una estructura de recursos compleja que tiene interdependencias donde se requiera una referencia hacia adelante (Forward Reference). Estas referencias no están soportadas por las referencias estáticas\n\n\nPara recursos grandes que puedan no necesitarse inmediatamente (los recursos dinámicos se cargan solo cuando se necesitan)\n\n\nElementos que podrían cambiar de parenting\n\n\nSe han omitido algunos. Más info en este enlace\nBibliografía\nlearn.microsoft.com/en-us/dotnet/desktop/wpf/systems/xaml-resources-overview\nKeywords\nStaticResource DynamicResource Library Dictionary Style Brush Brushes Theme Themes Estático Dinámico MergeDiccionaries MergedDictionaries Resources"},"Programación/Lenguajes-de-programación/WPF/WPF-Tengo-un-problema":{"title":"WPF Tengo un problema","links":[],"tags":[],"content":"No puedo cambiar el namespace a ninguna clase “code behind”\nLas clases code behind son parciales, comparten implementación con el xaml, de tal forma que, el nombre de la clase y el namespace deben coincidir. Para solucionarlo, debes ir al xaml y cambiar x:Class=&quot;namespace.NombreClase&quot; por tu nueva ruta\nMe da error en un assembly (p.e System.Windows.Media) en un servicio. En Internet dicen que añada una referencia (p.e. PresentationCore.dll) pero no sale listada\nDebes incluir la etiqueta true en el/los proyecto/s del servicio donde deseas usar ese assembly. Y asegúrate que el TargetFramework es net6.0-windows: \n\\&lt;TargetFramework&gt;net6.0-windows\\&lt;/TargetFramework&gt;"},"Programación/Lenguajes-de-programación/WPF/WPF-distinguir-build-y-debug":{"title":"WPF distinguir build y debug","links":[],"tags":[],"content":"&lt;PropertyGroup Condition=&quot;&#039;$(Configuration)|$(Platform)&#039;==&#039;Release|Win32&#039;&quot;&gt;\n  &lt;PreBuildEventUseInBuild&gt;true&lt;/PreBuildEventUseInBuild&gt;\n  &lt;PreLinkEventUseInBuild&gt;true&lt;/PreLinkEventUseInBuild&gt;\n  &lt;PostBuildEventUseInBuild&gt;true&lt;/PostBuildEventUseInBuild&gt;\n&lt;/PropertyGroup&gt;\n \n&lt;PropertyGroup Condition=&quot;&#039;$(Configuration)|$(Platform)&#039;==&#039;Debug|Win32&#039;&quot;&gt;\n  &lt;PreBuildEventUseInBuild&gt;false&lt;/PreBuildEventUseInBuild&gt;\n  &lt;PreLinkEventUseInBuild&gt;false&lt;/PreLinkEventUseInBuild&gt;\n  &lt;PostBuildEventUseInBuild&gt;false&lt;/PostBuildEventUseInBuild&gt;\n&lt;/PropertyGroup&gt;\nBibliografía\nlearn.microsoft.com/en-us/cpp/build/how-to-use-build-events-in-msbuild-projects"},"Programación/Lenguajes-de-programación/WPF/WPF-index":{"title":"WPF index","links":["Programación/Lenguajes-de-programación/WPF/1--WPF-Importante","Programación/Lenguajes-de-programación/WPF/2--Terminología-WPF","Programación/Lenguajes-de-programación/WPF/3--WPF-Crear-proyecto","Programación/Lenguajes-de-programación/WPF/4--Ejemplo-MVVM","Programación/Lenguajes-de-programación/WPF/WPF-Crear-estilos-y-plantillas","Programación/Lenguajes-de-programación/WPF/WPF-Datos-y-archivos","Programación/Lenguajes-de-programación/WPF/WPF-distinguir-build-y-debug","Programación/Lenguajes-de-programación/WPF/WPF-Ejemplo-ModernUI","WPF-GUI-XAML","Programación/Lenguajes-de-programación/WPF/WPF-Mostrar-listado-de-datos","Programación/Lenguajes-de-programación/WPF/WPF-Referenciar-recursos","Programación/Lenguajes-de-programación/WPF/WPF-Tengo-un-problema"],"tags":[],"content":"1- WPF Importante\n2- Terminología WPF\n3- WPF Crear proyecto\n4- Ejemplo MVVM\nWPF Crear estilos y plantillas\nWPF Datos y archivos\nWPF distinguir build y debug\nWPF Ejemplo ModernUI\nWPF GUI XAML\nWPF Mostrar listado de datos\nWPF Referenciar recursos\nWPF Tengo un problema"},"Programación/Lenguajes-de-programación/WebDev/Angular/Angular-Núcleo":{"title":"Angular Núcleo","links":["Programación/Lenguajes-de-programación/WebDev/Angular/Configuración-entorno-Angular"],"tags":[],"content":"Manual basado en v18\nConfig entorno\nEn Configuración entorno Angular\nIntro\nSe basa en componentes de 3 partes:\n\nTypeScript class\nHTML template\nCSS styles\n\nInterpolación\nSe hace con {{ expresion }}\ntemplate: `Hello {{ city }}, {{ 1 + 1 }}`,\n// city es una variable\nComponente\nPara crear uno automáticamente se tiene que ejecutar\nng generate component home\nEste comando generará una carpeta llamada home con un archivo home.component.ts\nEs un css y una clase TypeScript con:\n\nselector: el nombre\ntemplate: el html / la vista\nstandalone indica si el componente requiere un NgModule\n\nEn el export podemos indicar valores (entiendo que por defecto) de los que luego dispondrá el componente\nhome.component.ts\nimport { Component } from &#039;@angular/core&#039;;\n \n@Component({\n  selector: &#039;app-home&#039;,\n  standalone: true,\n  imports: [],\n  template: `&lt;p&gt;home works!&lt;/p&gt;`,\n  styles: ``\n})\nexport class HomeComponent {}\nUsando ese selector (e importando la clase en ‘imports’ sería)\napp.component.ts\nimport { HomeComponent } from &#039;./home/home.component&#039;;\n \n@Component({\n  selector: &#039;app-root&#039;,\n  template: `&lt;app-home /&gt;`,\n  standalone: true,\n  imports: [MiComponente],\n})\nInterfaces\nEn el contexto de angular, se refiere a tipo de dato\nSe crea con el comando ng\nng generate interface housinglocation\nInput\nLos input son la forma en la que se pasa info de padres a hijos\n\n\n                  \n                  Es necesario importarlo \n                  \n                \n\nhousing-location.component.ts\nimport {Component, Input} from &#039;@angular/core&#039;;\nCreamos la clave mediante la que pasaremos la info housingLocation y definiremos el tipo de dato HousingLocation\nhousing-location.component.ts\nexport class HousingLocationComponent {\n  @Input() housingLocation!: HousingLocation;\n}\nLuego se pasa la info desde el template así\nLa parte entre corchetes es el nombre “key” que espera el componente app-housing-location. housingLocationVar es el “value” que recibe el componente\nhome.component.ts\n&lt;app-housing-location [housingLocation]=&quot;housingLocationVar&quot;&gt;&lt;/app-housing-location&gt;\nhousingLocationVar es un objeto que hemos creado en el export\nhome.component.ts\nexport class HomeComponent {\n  readonly baseUrl = &#039;angular.dev/assets/images/tutorials/common&#039;;\n  housingLocationVar: HousingLocation = {\n    id: 9999,\n    name: &#039;Test Home&#039;,\n    city: &#039;Test city&#039;,\n    state: &#039;ST&#039;,\n    photo: `${this.baseUrl}/example-house.jpg`,\n    availableUnits: 99,\n    wifi: true,\n    laundry: false,\n  };\n}\nngFor\nLa parte entre corchetes es el nombre “key” que espera el componente app-housing-location. housingLocationUnit es el elemento actual de la lista, el “value” que recibe el componente\nhome.component.ts\n&lt;app-housing-location\n    *ngFor=&quot;let housingLocationUnit of housingLocationList&quot;\n    [housingLocation]=&quot;housingLocationUnit&quot;&gt;\n&lt;/app-housing-location&gt;\nServicios e Inyección de Dependencias\nUn servicio es un proveedor de funciones que debe poder ser inyectado y usado por varios componentes diferentes. Los servicios son las dependencias de los componentes. Es decir, los componentes dependen de los servicios (nunca al revés). Componentes = alto nivel, Servicios = Bajo nivel\nCrear el servicio\nPara crear un servicio (sin tests)\nng generate service housing --skip-tests\nHemos añadido los datos y métodos en la clase\nhousing.service.ts\nexport class HousingService {\n \n\thousingLocationList: HousingLocation[] = [\n\t    {\n\t      id: 0,\n\t      name: &#039;Acme Fresh Start Housing&#039;,\n\t      ...\n\t    },\n\t    ...\n\t];\n\tgetAllHousingLocations(): HousingLocation[] {\n\t    return this.housingLocationList;\n\t}\n\t\n\tgetHousingLocationById(id: number): HousingLocation | undefined {\n\t    return this.housingLocationList.find((housingLocation) =&gt; housingLocation.id === id);\n\t}\n \n\tconstructor() { }\n}\nComponente\nAhora hay que inyectar y usar el servicio\nImportar el inject (y demás dependencias que hubiese, en este caso HousingLocation)\nhome.component.ts\nimport { Component, inject } from &#039;@angular/core&#039;;\nImportar el servicio\nhome.component.ts\nimport {HousingService} from &#039;../housing.service&#039;;\nY usarlo en la clase\nhome.component.ts\nexport class HomeComponent {\n  housingService: HousingService = inject(HousingService);\n  housingLocationList: HousingLocation[] = []\n \n  \n  constructor() {\n    this.housingLocationList = this.housingService.getAllHousingLocations();\n  }\n}\nCreo que main.ts importa el objeto routerConfig y se lo pasa al proveedor para que lo procese. Por una parte le pasa todos lo\nRutas Routes Routing Rutear\nConfiguración\nSe crea un archivo routes.ts en la carpeta app donde pondremos las rutas\nEn main.ts debemos importar router\nAprovechamos para importar routes.ts aunque todavía dará error por no ser un módulo\nmain.ts\nimport {provideRouter} from &#039;@angular/router&#039;;\nimport routeConfig from &#039;./app/routes&#039;;\ny en el mismo archivo, debemos incluir al bootstrap el proveedor con provideRouter(routeConfig)\nmain.ts\nbootstrapApplication(AppComponent, {\n  providers: [provideProtractorTestingSupport(), provideRouter(routeConfig)],\n}).catch((err) =&gt; console.error(err));\nImportamos el modulo Router al componente App\napp.component.ts\nimport {RouterModule} from &#039;@angular/router&#039;;\nLo añadimos a las dependencias de app\napp.component.ts\nimports: [HomeComponent, RouterModule],\ndebemos sustituir \\&lt;app-home&gt; del template por &lt;router-outlet&gt;\napp.component.ts\n&lt;section class=&quot;content&quot;&gt;\n    &lt;router-outlet /&gt;\n&lt;/section&gt;\n\n\n                  \n                  Opcional \n                  \n                \n\nY convertimos la imagen en un enlace para poder volver a home\napp.components.ts\n\n\n&lt;a [routerLink]=&quot;[&#039;/&#039;]&quot;&gt;\n &lt;header class=&quot;brand-name&quot;&gt;\n   &lt;img class=&quot;brand-logo&quot; src=&quot;/assets/logo.svg&quot; alt=&quot;logo&quot; aria-hidden=&quot;true&quot; /&gt;\n &lt;/header&gt;\n&lt;/a&gt;\nEn el archivo que creamos al inicio de esta sección routes.ts, importamos el router y los componentes que harán de páginas\nroutes.ts\nimport {Routes} from &#039;@angular/router&#039;;\nimport {HomeComponent} from &#039;./home/home.component&#039;;\nimport {DetailsComponent} from &#039;./details/details.component&#039;;\nY definimos las rutas / y /details/9999\nroutes.ts\nconst routeConfig: Routes = [\n  {\n    path: &#039;&#039;,\n    component: HomeComponent,\n    title: &#039;Home page&#039;,\n  },\n  {\n    path: &#039;details/:id&#039;,\n    component: DetailsComponent,\n    title: &#039;Home details&#039;,\n  },\n];\nexport default routeConfig;\nNavegación dinámica\nLe hemos añadido un &#039;details/:id&#039; pero ahora debemos crear un botón para que nos lleve al id correspondiente\nhousing-location.component.ts\n&lt;a [routerLink]=&quot;[&#039;/details&#039;, housingLocation.id]&quot;&gt;Learn More&lt;/a&gt;\npero debemos importar dos cosas\nhousing-location.component.ts\nimport {RouterModule, RouterLink} from &#039;@angular/router&#039;;\nY añadir RouterLink a las dependencias del componente\nhousing-location.component.ts\n  imports: [CommonModule, RouterLink],\nObtener info del router\nEl componente al que vas debe recibir info, en este caso, cuál es el id de la casa seleccionada\nEse dato lo proporciona el servicio ActivatedRoute, que podemos inyectar de la siguiente forma\ndetails.component.ts\nroute: ActivatedRoute = inject(ActivatedRoute);\nY accedemos al dato a través de lo siguiente\ndetails.component.ts\nthis.route.snapshot.params[&#039;id&#039;]\n\n\n                  \n                  Los datos vienen en string \n                  \n                \n\nPor lo que ellos lo convierten a número con Number(this.route.snapshot.params[&#039;id&#039;]);pero evidentemente no es obligatorio\n\n\nFormularios\nPara el ejemplo, se va a imprimir los datos de un formulario en details por consola usando un método del servicio que ya tenemos\nhousing.service.ts\nsubmitApplication(firstName: string, lastName: string, email: string) {\n    console.log(\n      `Homes application received: firstName: ${firstName}, lastName: ${lastName}, email: ${email}.`,\n    );\n  }\nImportamos toda la mandanga de formularios\ndetails.component.ts\nimport {FormControl, FormGroup, ReactiveFormsModule} from &#039;@angular/forms&#039;;\n \nimports: [CommonModule, ReactiveFormsModule],\n\n\n                  \n                  FormGroup y FormControl \n                  \n                \n\nSe trata de tipos de dato para manejar formularios. Representa los diferentes campos\n\n\nAñadimos la variables de formulario con sus campos en la clase DetailsComponent, justo antes del contructor\ndetails.components.ts\napplyForm = new FormGroup({\n    firstName: new FormControl(&#039;&#039;),\n    lastName: new FormControl(&#039;&#039;),\n    email: new FormControl(&#039;&#039;),\n  });\nY después del contructor, ponemos el submit\ndetails.component.ts\nsubmitApplication() {\n    this.housingService.submitApplication(\n      this.applyForm.value.firstName ?? &#039;&#039;,\n      this.applyForm.value.lastName ?? &#039;&#039;,\n      this.applyForm.value.email ?? &#039;&#039;,\n    );\n  }\nAhora añadimos el html\nEspecial atención a que hemos puesto applyForm (el nombre de nuestra variable) en el formGroup, el submit va entre parentesis porque es un evento\ndetails.component.ts\n&lt;form [formGroup]=&quot;applyForm&quot; (submit)=&quot;submitApplication()&quot;&gt;\n  &lt;label for=&quot;first-name&quot;&gt;First Name&lt;/label&gt;\n  &lt;input id=&quot;first-name&quot; type=&quot;text&quot; formControlName=&quot;firstName&quot; /&gt;\n  &lt;label for=&quot;last-name&quot;&gt;Last Name&lt;/label&gt;\n  &lt;input id=&quot;last-name&quot; type=&quot;text&quot; formControlName=&quot;lastName&quot; /&gt;\n  &lt;label for=&quot;email&quot;&gt;Email&lt;/label&gt;\n  &lt;input id=&quot;email&quot; type=&quot;email&quot; formControlName=&quot;email&quot; /&gt;\n  &lt;button type=&quot;submit&quot; class=&quot;primary&quot;&gt;Apply now&lt;/button&gt;\n&lt;/form&gt;\nFuncionalidad de búsqueda\nVamos a añadir una variable de plantilla (template variable) #filter en el input\nhome.component.ts\n&lt;input type=&quot;text&quot; placeholder=&quot;Filter by city&quot; #filter /&gt;\nEsa variable nos permitirá acceder al valor desde el propio template\nhome.component.ts\n&lt;button class=&quot;primary&quot; type=&quot;button&quot; (click)=&quot;filterResults(filter.value)&quot;&gt;Search&lt;/button&gt;\nImplementamos el método filterResults\nfilterResults(text: string) {\n    if (!text) {\n      this.filteredLocationList = this.housingLocationList;\n      return;\n    }\n    this.filteredLocationList = this.housingLocationList.filter((housingLocation) =&gt;\n      housingLocation?.city.toLowerCase().includes(text.toLowerCase()),\n    );\n  }\nSi lo dejamos así, cuando pulsemos enter se recargará la página y, por tanto, perderá la búsqueda. He abordado el tema en Al pulsar enter en un input se recarga la página\nPor supuesto ahora tienes que cambiar la lista mostrada a la que está filtrada\nhome.component.ts\n&lt;app-housing-location *ngFor=&quot;let housingLocation of filteredLocationList&quot; [housingLocation]=&quot;housingLocation&quot;&gt;&lt;/app-housing-location&gt;\nDatos\nParece ser que RouterModule incluye tanto RouterLink como RouterOutlet. Entiendo que es una buena práctica que solo importes como dependencia el que necesites y no ambos (es decir, importando RouterModule)\nTengo un problema\nAl pulsar enter en un input se recarga la página\nSi lo dejamos así, cuando pulsemos enter se recargará la página y, por tanto, perderá la búsqueda\nAparentemente esto se debe a que el form se encarga del evento antes que &lt;input&gt;. Una solución es permitir al propio input gestionar el evento (nótese que ahora pasamos $event)\n&lt;input (keydown.enter)=&quot;filterResults($event, filter.value)&quot; type=&quot;text&quot; placeholder=&quot;Filter by city&quot; #filter /&gt;\n \n&lt;button class=&quot;primary&quot; type=&quot;button&quot; (click)=&quot;filterResults($event, filter.value)&quot;&gt;Search&lt;/button&gt;\ny en el método hacemos preventDefault()\nfilterResults(event: Event, text: string) {\n    event.preventDefault();\n    if (!text) {\n      this.filteredLocationList = this.housingLocationList;\n      return;\n    }\n    this.filteredLocationList = this.housingLocationList.filter((housingLocation) =&gt;\n      housingLocation?.city.toLowerCase().includes(text.toLowerCase()),\n    );\n  }\nComunicación HTTP / Peticiones API\nCosas raras\nLa exclamación le indica al compilador de TS que, no debe ser null, a esa exclamación se la llama el non-null assertion operator\nhousing-location.component.ts\nexport class HousingLocationComponent {\n  @Input() housingLocation!: HousingLocation;\n}"},"Programación/Lenguajes-de-programación/WebDev/Angular/Configuración-entorno-Angular":{"title":"Configuración entorno Angular","links":["Programación/Lenguajes-de-programación/WebDev/NodeJS"],"tags":[],"content":"Debes tener instalado NodeJS\nEl proyecto debe tener un package.json (de NodeJS) donde estarán las dependencias para que se instalen\nEste es el que ofrece el equipo de Angular\n{\n  &quot;name&quot;: &quot;angular.dev&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;scripts&quot;: {\n    &quot;ng&quot;: &quot;ng&quot;,\n    &quot;start&quot;: &quot;NG_BUILD_PARALLEL_TS=0 ng serve&quot;,\n    &quot;build&quot;: &quot;ng build&quot;,\n    &quot;watch&quot;: &quot;ng build --watch --configuration development&quot;\n  },\n  &quot;private&quot;: true,\n  &quot;dependencies&quot;: {\n    &quot;@angular/animations&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/common&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/compiler&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/core&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/forms&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/platform-browser&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/router&quot;: &quot;^18.0.0&quot;,\n    &quot;rxjs&quot;: &quot;~7.8.0&quot;,\n    &quot;tslib&quot;: &quot;^2.3.0&quot;,\n    &quot;zone.js&quot;: &quot;~0.14.0&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;@angular-devkit/build-angular&quot;: &quot;^18.0.1&quot;,\n    &quot;@angular/cli&quot;: &quot;^18.0.0&quot;,\n    &quot;@angular/compiler-cli&quot;: &quot;^18.0.0&quot;,\n    &quot;@types/jasmine&quot;: &quot;~5.1.0&quot;,\n    &quot;@types/node&quot;: &quot;^16.11.35&quot;,\n    &quot;copyfiles&quot;: &quot;^2.4.1&quot;,\n    &quot;jasmine-core&quot;: &quot;~5.3.0&quot;,\n    &quot;jasmine-marbles&quot;: &quot;~0.9.2&quot;,\n    &quot;jasmine-spec-reporter&quot;: &quot;~7.0.0&quot;,\n    &quot;karma&quot;: &quot;~6.4.0&quot;,\n    &quot;karma-chrome-launcher&quot;: &quot;~3.2.0&quot;,\n    &quot;karma-coverage&quot;: &quot;~2.2.0&quot;,\n    &quot;karma-jasmine&quot;: &quot;~5.1.0&quot;,\n    &quot;karma-jasmine-html-reporter&quot;: &quot;~2.1.0&quot;,\n    &quot;protractor&quot;: &quot;~7.0.0&quot;,\n    &quot;ts-node&quot;: &quot;~10.9.0&quot;,\n    &quot;typescript&quot;: &quot;~5.5.0&quot;\n  }\n}"},"Programación/Lenguajes-de-programación/WebDev/AngularJS--and--Ionic--and--Cordova":{"title":"AngularJS & Ionic & Cordova","links":[],"tags":[],"content":"Webs\nCreating and showing pdf in Ionic\nRegister and receive push notifications (deprecated)\nangularjs - POST an array of objects(JSON data) to a PHP page\nAngularJS: how to implement a simple file upload with multipart form?\nUsing CocoaPods stops iOS build using ionic Project\nOneSignal-Cordova-SDK\nThe 9 most common mistakes that Ionic developers make\nAngularJS\nQue un dato sea estático {{::nombre}}\nPor lo poco que he mirado aquí los dos puntos dentro de la expresión hacen que sea imposible cambiar el primer dato que toma del controller, es decir:\n$scope.nombre = &quot;Javi&quot;;\n \n \nfunction cambiarNombre() {\n    $scope.nombre = &quot;prueba&quot;;\n}\npese a ejecutar la funcion de arriba, el nombre siempre será Javi\nng-class\nVa con un corchete\nng-class=”{‘nombre-clase’: expresion}” ⇒ Si expresión es true, se aplica ‘nombre-clase’ en la clase de ese elemento\nng-class=“variable” ⇒ Apartentemente evalúa que una variable no sea undefined (o similares) y en tal caso, aplica el texto que en ella se contenga\nComo pasar un objeto por params (no hay error, entra en el método, pero la vista no se aplica)\nCuando le pasas un objeto por params de state, se le pone por defecto null, ya que undefined es como si no existiera, y se ralla.\n.state(&#039;estado&#039;, {\n        url: &#039;/urlEstado&#039;,\n        templateUrl: &#039;templates/estado.html&#039;,\n        controller: &#039;estadoCtrl&#039;,\n        params: {\n            parametro: null\n        }\n        ``` \n \n# ionic\n \n## Actualizar plataformas\n \n  \n \nEjecutar este comando que desinstalará y volverá a instalar la plataforma (en este caso Android) pero con los nuevos plugins\n \n```shell\nionic platform update android\nVista dinámica\nionicScrollDelegate tiene una función que permite el recalculado del tamaño de la vista -&gt; ionicScrollDelegate.resize();"},"Programación/Lenguajes-de-programación/WebDev/Asincronía-en-desarrollo-web-Async-dev":{"title":"Asincronía en desarrollo web Async dev","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/Lenguajes-de-programación/WebDev/Babel":{"title":"Babel","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/Lenguajes-de-programación/WebDev/CSS/CSS-Núcleo":{"title":"CSS Núcleo","links":["Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Especificidad","Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Foco","Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Funciones","Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Herencia","Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Selectores","Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Unidades","Programación/Lenguajes-de-programación/WebDev/CSS/Posicionamiento-y-cajas/Centrado-moderno","Programación/Lenguajes-de-programación/WebDev/CSS/Posicionamiento-y-cajas/Flex","Programación/Lenguajes-de-programación/WebDev/CSS/Posicionamiento-y-cajas/Posicionamiento-absoluto-dentro-de-un-elemento","Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Animaciones-y-transiciones","Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Colores","Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Gradiente","Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Puntos-en-una-lista","Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Sombras"],"tags":[],"content":"Índice\nConceptos\nEspecificidad\nFoco\nFunciones\nHerencia\nSelectores\nUnidades\nPosicionamiento y cajas\nCentrado moderno\nFlex\nPosicionamiento absoluto dentro de un elemento\nPropiedades\nAnimaciones y transiciones\nColores\nGradiente\nPuntos en una lista\nSombras\nTrucos de CSS\ncss-tricks.com/tag/css/\nEnlazado\nEl atributo rel es obligatorio\n&lt;link href=&#039;./style.css&#039; rel=&#039;stylesheet&#039;&gt; \nSelectores\nSobreescritura\nel siguiente selector sobreescribe al anterior, es decir, los css se procesan de arriba a abajo, si encuentra un selector nuevo en conflicto con uno ya existente, prevalece el nuevo\n* { font-size:1px; }\n \nh1 { font-size: 20px }\nTodas los textos menos los h1 serán de 1px.\nPero si el nivel de especifidad (Specificity) es mayor, entonces prevalece ese, es decir, un id siempre va a sobreescribir una clase, y una clase siempre sobreescribirá a un elemento\nAtributos y valores\nPodemos seleccionar por atributos\n[href]{\n   color: magenta;\n} \nY podemos seleccionar por valores, ejemplo: imágenes que contengan la palabra “winter”\nimg[src*=&#039;winter&#039;] {\n  height: 50px;\n}\n \nimg[src*=&#039;summer&#039;] {\n  height: 100px;\n}\nPseudo-clases\nDe todos los elementos se pueden seleccionar, al menos, alguna pseudo-clases\np:hover { background-color: darkorange; }\nEl modelo de caja (BoxModel Box Model)\nLos navegadores cargan elementos HTML con valores de posición predeterminados. Esto a menudo conduce a una experiencia de usuario inesperada y no deseada, al tiempo que limita las vistas que puede crear.\n\nUtil\ncentrar\nmargin: 0 auto;\nPosicionamientos y centrados\nPosicionamiento absoluto dentro de un elemento\n[](Posicionamiento%20y%20cajas/Posicionamiento%20absoluto%20dentro%20de%20un%20elemento.md de programación/WebDev/CSS/Posicionamiento absoluto dentro de un elemento&gt;)\nCentrado moderno\n\nBibliografía\nwww.codecademy.com/learn/learn-css/modules/syntax-and-selectors/cheatsheet"},"Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Especificidad":{"title":"Especificidad","links":["tags/id"],"tags":["id"],"content":"En este orden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nuniversal*0pelementos y pseudoelementosdiv / ::selection1pclase, pseudoclase o attr.clase / :hover / [href=’#‘]10pidid100pinline&lt;div style=&quot;color: red&quot;&gt;&lt;/div&gt;1000p!important!important10000p\nSi quieres mejorar la puntuación, puedes duplicar\n.my-button.my-button {  /* 20p */\n\tbackground: blue;\n}\n \n.my-button {            /* 10p */\n\tbackground: red;\n}\n \n/* Resultado: Fondo azul */\nEn igualdad de puntos, el que más abajo aparezca, prevalece\n.my-button {            /* 10p */\n\tbackground: blue;\n}\n \n.my-button {            /* 10p */\n\tbackground: red;\n}\n \n/* Resultado: Fondo rojo */\nBibliografía\nweb.dev/learn/css/specificity"},"Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Foco":{"title":"Foco","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nBibliografía\nweb.dev/learn/css/focus"},"Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Funciones":{"title":"Funciones","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nBibliografía\nweb.dev/learn/css/functions"},"Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Herencia":{"title":"Herencia","links":[],"tags":[],"content":"inherit\nHace que herede la propiedad del padre, aunque le correspondía otro valor\nstrong { /* Todas las strong a 900 */\n  font-weight: 900;\n}\n.my-component {  \n\tfont-weight: 500;\n}\n.my-component strong { /* pero las que estén en my-componente, siguen a 500 */\n  font-weight: inherit;\n}\ninitial\nHace que se ponga el valor por defecto\naside strong { /* en lugar de 900, ahora está a 700 (por defecto) */\n  font-weight: initial;\n}\nunset\nSi propiedad es heredable ⇒ unset = inherit\nSi no heredable ⇒ unser = initial\nRecordar qué propiedades CSS son heredables puede ser difícil, pero unset puede ser útil en ese contexto. Por ejemplo, color es heredable, pero margin no lo es, por lo que puede escribir esto:\n/* Estilos de color globales para párrafos en CSS creado */\np {\n  margin-top: 2em;\n  color: goldenrod;\n}\n \n/* La p debe restablecerse en asides, para que pueda usar unset */\naside p {\n  margin: unset;\n  color: unset;\n}\n\nAhora, el margin se elimina y el color vuelve a ser el valor calculado heredado.\nBibliografía\nweb.dev/learn/css/inheritance"},"Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Selectores":{"title":"Selectores","links":[],"tags":[],"content":".clase\n#id\n::pseudoelemento (::selection)\n:pseudoclase (:hover)\n[atributo] ([onclick])\nvarios a la vez (aplica a los strong, a los em, la clase my-class y los que contengan la clave lang)\nstrong,\nem,\n.my-class,\n[lang] {\n  color: red;\n}\np &gt; strong { color: blue; }\nSolo para los descendientes directos de p que sean strong\np strong { color: blue; }\npara cualquier descendiente aunque no sea directo\nBibliografía\nweb.dev/learn/css/selectors"},"Programación/Lenguajes-de-programación/WebDev/CSS/Conceptos/Unidades":{"title":"Unidades","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nBibliografía\nweb.dev/learn/css/sizing"},"Programación/Lenguajes-de-programación/WebDev/CSS/Posicionamiento-y-cajas/Centrado-moderno":{"title":"Centrado moderno","links":[],"tags":[],"content":"El padre: text-align: center\nEl hijo: position: inline-block\njsfiddle.net/Javi_/t4w69ad8/1/\n&lt;div class=&quot;padre&quot;&gt;\n  &lt;div class=&quot;hijo&quot;&gt;\n    &lt;div class=&quot;prueba&quot;&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n.padre {\n  text-align: center;\n}\n \n.hijo {\n  display: inline-block\n}\n \n.prueba {\n  border: 1px red solid;\n}"},"Programación/Lenguajes-de-programación/WebDev/CSS/Posicionamiento-y-cajas/Flex":{"title":"Flex","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\n\nEl contenedor deberá tener display: flex\n.flex-container {\n\tdisplay: flex;\n}\nPodemos tener varios contenedores con display flex y, por defecto, se alinearán\n.flex-container {\n\tdisplay: flex;\n}\n \n.flex-container2 {\n\tdisplay: flex;\n}\nSi al primer container le ponemos justify-content: space-between se distribuirá el total del ancho de la página entre los dos contenedores\nTengo un problema\nMi imagen se ha aplastado\nPuedes resolver eso con align-items: center;\nBibliografía\nweb.dev/learn/css/flexbox"},"Programación/Lenguajes-de-programación/WebDev/CSS/Posicionamiento-y-cajas/Posicionamiento-absoluto-dentro-de-un-elemento":{"title":"Posicionamiento absoluto dentro de un elemento","links":[],"tags":[],"content":"El problema que tenía es que quería que dando igual la cantidad de archivos que se añadiesen (crece en altura) el botón estuviera siempre abajo derecha, por encima de los premios, por lo que no podía ser relative ya que no podía hacer right: 0; bottom: 0; (son cualidades del absolute) ni tampoco podía ponerlo en absoluto ya que tomaría como espacio disponible todo la vista, y yo quería que se apoyase en los premios (más o menos mitad de la vista)\n\nEsta situación se ha solucionado creando un div que englobe los documentos y el propio botón pero seguía tomando el tamaño de la vista completa, la solución a esto ha sido poner este div como relative sin ningún posicionamiento, por alguna razon css ahora este div como un contenedor con sus límites y puede utilizar tranquilamente el posicionamiento absoluto dentro\n\nEn conclusión, se pone el objeto que quieres con absolute y su contenedor con relative"},"Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Animaciones-y-transiciones":{"title":"Animaciones y transiciones","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nBibliografía\nweb.dev/learn/css/animations\nweb.dev/learn/css/transitions"},"Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Colores":{"title":"Colores","links":[],"tags":[],"content":"\nPalettes\n"},"Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Gradiente":{"title":"Gradiente","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nBibliografía\nweb.dev/learn/css/gradients"},"Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Puntos-en-una-lista":{"title":"Puntos en una lista","links":["tags/pseudo-element"],"tags":["pseudo-element"],"content":"Se hace con el pseudo-elementopseudo-element ::marker\n::marker {\n\tcolor: blue;\n\tfont-size: 1.2em\n}"},"Programación/Lenguajes-de-programación/WebDev/CSS/Propiedades/Sombras":{"title":"Sombras","links":[],"tags":[],"content":"html-css-js.com/css/generator/box-shadow/\nLa forma básica es con\n-webkit-box-shadow: 5px 5px 15px 5px #000000; \nbox-shadow: 5px 5px 15px 5px #000000;\nEl orden de los atributos es:\nMovimiento horizontal (mover a la derecha)\nMovimiento vertical (move abajo)\nExpandir (Spread) - Hacer más grande el cuadrado usado antes de emborronar\nEmborronar (Blur)\nColor y Opacidad (rgba(r, g, b, a) de 0 a 250 y a de 0 a 1 o formato html #ffffff)"},"Programación/Lenguajes-de-programación/WebDev/ESLint":{"title":"ESLint","links":[],"tags":[],"content":"Es un proyecto open source que ayuda a encontrar y solucionar problemas con JavaScript\nFunciona rollo el corrector ortográfico del word"},"Programación/Lenguajes-de-programación/WebDev/Fastify":{"title":"Fastify","links":["tags/WIP","Programación/Lenguajes-de-programación/WebDev/Handlebars"],"tags":["WIP"],"content":"Configuración mínima\nconst fastify = require(&quot;fastify&quot;)({\n  // Set this to true for detailed logging:\n  logger: false,\n});\n \nfastify.listen(\n  { port: process.env.PORT, host: &quot;0.0.0.0&quot; },\n  function (err, address) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    console.log(`Your app is listening on ${address}`);\n  }\n);\nAñadir rutas\nfastify.get(&quot;/&quot;, function (request, reply) {\n \n});\nfastify.post(&quot;/&quot;, function (request, reply) {\n \n});\n\n\n                  \n                  Otras opciones \n                  \n                \n\nAdemás de get y post tenemos put y delete. Creo que todas funcionan igual\nPara ver como gestionar y responder a la petición se usan request y reply respectivamente\n\n\n\n\n                  \n                  Return \n                  \n                \n\nDebes hacer return al final de si quieres que carge la web con view\nreturn reply.view(&quot;index.html&quot;);\n\n\nRequest\nWIP\nReply\nreturn reply.view(&quot;/src/pages/index.hbs&quot;, params);\n\n\n                  \n                  View es dependencia \n                  \n                \n\nPara poder usar view debes tener instalado @fastify/view\n\n\nVistas\nEs obligatorio usar un engine. Ejemplo con Handlebars\nfastify.register(require(&quot;@fastify/view&quot;), {\n  engine: {\n    handlebars: require(&quot;handlebars&quot;),\n  },\n});\nUna lista de los engine que soporta aquí\nAcceso estático\nPara registrar un acceso estatico a archivos se usa @fastify/static\n// Setup our static files\nfastify.register(require(&quot;@fastify/static&quot;), {\n  root: path.join(__dirname, &quot;public&quot;),\n  prefix: &quot;/&quot;, // optional: default &#039;/&#039;\n});\npara lo cual necesitamos importar path\nconst path = require(&quot;path&quot;);\n\n\n                  \n                  Static es dependencia \n                  \n                \n\nPara poder usar static debes tener instalado @fastify/static\n\n\nConfiguración de SEO\n// Load and parse SEO data\nconst seo = require(&quot;./src/seo.json&quot;);\nif (seo.url === &quot;glitch-default&quot;) {\n  seo.url = `https://${process.env.PROJECT_DOMAIN}.glitch.me`;\n}\nLuego en los verbos HTML (enrutado), i.e. POST, GET, PUT… se añade\nlet params = { seo: seo };\n \n \nparams = {\n      color: colors[currentColor],\n      colorError: null,\n      seo: seo,\n    };\n \nreturn reply.view(&quot;/src/pages/index.hbs&quot;, params);\nTengo un problema\nAl hacer reply.view(“index.html”) me sale todo en blanco pero ningún error\nDebes hacer return\nreturn reply.view(&quot;index.html&quot;)\nBibliografía\nglitch.com/edit/#!/ash-stump-potato\nwww.npmjs.com/package/@fastify/view"},"Programación/Lenguajes-de-programación/WebDev/Favicon":{"title":"Favicon","links":[],"tags":[],"content":"&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;/images/favicon.ico&quot;&gt;"},"Programación/Lenguajes-de-programación/WebDev/Glitch":{"title":"Glitch","links":["Programación/Lenguajes-de-programación/WebDev/NodeJS"],"tags":[],"content":"En el archivo package.json está el comando que se utiliza para iniciar el servidor, en mi caso pone:\n&quot;scripts&quot;: {\n\t&quot;start&quot;: &quot;node server.js&quot;\n},\nEste archivo sirve también para indicar qué software vamos a usar (dependecias). Para desinstalar una dependencia, la borras y guardas, para añadirla, desde el botón de arriba que pone Add package\npara el contenido de server.js puedes visitar su entrada en la nota de NodeJS\nKeywords\nGlitch.com Glitch.me"},"Programación/Lenguajes-de-programación/WebDev/Gulp":{"title":"Gulp","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Programación/Lenguajes-de-programación/WebDev/HTML":{"title":"HTML","links":[],"tags":[],"content":"&lt;Base&gt;\nEl elemento HTML &lt;base&gt; especifica la dirección URL base que se utilizará para todas las direcciones URL relativas contenidas dentro de un documento. Sólo puede haber un elemento  en un documento.\n&lt;meta name=“viewport” content=“width=device-width, initial-scale=1”&gt;\nSirve para una mejor experiencia responsive\nA la izquierda sin etiqueta, a la derecha con etiqueta\n"},"Programación/Lenguajes-de-programación/WebDev/Handlebars":{"title":"Handlebars","links":["tags/WIP"],"tags":["WIP"],"content":"Bucles\n&lt;ul class=&quot;people_list&quot;&gt; \n\t{{#each people}} \n\t&lt;li&gt;{{this}}&lt;/li&gt; \n\t{{/each}} \n&lt;/ul&gt;\nEjemplo\nconst ingredients = [\n  { id: 1, date: &#039;29-11-2024&#039;, name: &#039;sucuk&#039;, image: null },\n  { id: 3, date: &#039;&#039;, name: &#039;salami&#039;, image: null }\n]\n{{#each ingredients}}  \n    {{#with this}}  \n        &lt;p&gt;{{name}}&lt;/p&gt;  \n        &lt;p&gt;{{date}}&lt;/p&gt;  \n        &lt;p&gt;{{id}}&lt;/p&gt;\n        &lt;img src=&quot;{{image}}&quot; alt=&quot;{{name}}&quot;/&gt;\n    {{/with}}  \n{{/each}}\nBibliografía\nhandlebarsjs.com/\nhandlebarsjs.com/guide/builtin-helpers.html#each\nWIP"},"Programación/Lenguajes-de-programación/WebDev/JQuery":{"title":"JQuery","links":[],"tags":[],"content":"Tengo un problema con JQuery\nUncaught ReferenceError: $ is not defined\nProbablemente hayas puesto el script de JQuery despues del script en el que es usado\nEjemplo con error\n&lt;script src=&quot;js/util.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;  \nEjemplo solucionado\n&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;  \n&lt;script src=&quot;js/util.js&quot;&gt;&lt;/script&gt;\nBibliografía\nstackoverflow.com/questions/2075337/uncaught-referenceerror-is-not-defined"},"Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Cors":{"title":"Cors","links":[],"tags":[],"content":"const cors = require(&#039;cors&#039;);  \napp.use(cors());"},"Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/JS-Cheatsheet":{"title":"JS Cheatsheet","links":["tags/WIP"],"tags":["WIP"],"content":"string[index]\nvar str = &quot;HELLO WORLD&quot;;  \nstr.charAt(0);            // returns H\nstr[0];                   // returns H\ntrim\nvar str = &quot;       Hello World!        &quot;;  \nalert(str.trim());\nArray map\nvar numbers1 = [45, 4, 9, 16, 25];  \nvar numbers2 = numbers1.map(myFunction);  \n  \nfunction myFunction(value) {  \n  return value * 2;  \n}\nArray filter\nvar numbers = [45, 4, 9, 16, 25];  \nvar over18 = numbers.filter(myFunction);  \n  \nfunction myFunction(value) {  \n  return value &gt; 18;  \n}\nlet\nSolo para el bloque\nvar x = 10;  \n// Here x is 10  \n{  \n  let x = 2;  \n  // Here x is 2  \n}  \n// Here x is 10\nPromesa (Promise)\nEs una función asincrónica, se resolverá cuando haya finalizado el trabajo\nconst myPromise = new Promise(function(myResolve, myReject) {\n  if (Date.now() &amp; 1) { // Si es impar, se considera fallido\n  \tsetTimeout(function(){ \n\t  \tmyReject(&quot;It&#039;s me not you...&quot;); }\n\t, 3000);\n  } else { \n  \tsetTimeout(function(){ \n\t  \tmyResolve(&quot;I love You !!&quot;); }\n\t, 3000);\n  }\n});\nmyPromise.then(function(value) {\n\tdocument.getElementById(&quot;demo&quot;).innerHTML = value;\n}).catch(function(error) {\n\tdocument.getElementById(&quot;demo&quot;).innerHTML = error;\n});\n \ndocument.getElementById(&quot;demo&quot;).innerHTML = &quot;Prueba&quot;;\n\n\n                  \n                  Cuidado! \n                  \n                \n\nTienen que ir en orden\n\n\n\n\n                  \n                  Atención \n                  \n                \n\nPrimero se mostrará “Prueba” y a los 3 segundos (cuando se complete el setTimeout), se sustituirá por el resultado\n\n\nWIP\nBibliografía\nwww.w3schools.com/js/js_es5.asp"},"Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/JavaScript-Núcleo":{"title":"JavaScript Núcleo","links":["Programación/Lenguajes-de-programación/WebDev/PowerUp-para-Trello","Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Modulos","Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Tengo-un-problema-en-JS"],"tags":[],"content":"Para un PowerUp para Trello click aquí\nVersiones\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVerOfficial NameDescriptionES1ECMAScript 1 (1997)First editionES2ECMAScript 2 (1998)Editorial changesES3ECMAScript 3 (1999)Added regular expressions  Added try/catch  Added switch  Added do-whileES4ECMAScript 4Never releasedES5ECMAScript 5 (2009)    Read MoreAdded “strict mode”  Added JSON support  Added String.trim()  Added Array.isArray()  Added Array iteration methods  Allows trailing commas for object literalsES6ECMAScript 2015    Read MoreAdded let and const  Added default parameter values  Added Array.find()  Added Array.findIndex()ECMAScript 2016    Read MoreAdded exponential operator (**)  Added Array.includes()ECMAScript 2017    Read MoreAdded string padding  Added Object.entries()  Added Object.values()  Added async functions  Added shared memory  Allows trailing commas for function parametersECMAScript 2018    Read MoreAdded rest / spread properties  Added asynchronous iteration  Added Promise.finally()  Additions to RegExpECMAScript 2019    Read MoreString.trimStart()  String.trimEnd()  Array.flat()  Object.fromEntries  Optional catch bindingECMAScript 2020    Read MoreThe Nullish Coalescing Operator (??)\nES6\nES6 corresponde con ECMAScript. ECMAScript fue creada para estandarizar JS, ES6 es la 6ª versión. Como fue publicada en 2015, se la conoce también como ECMAScript 2015\nClases\nclass Car {\n  constructor(name) {\n    this.brand = name;\n  }\n}\n \nconst mycar = new Car(&quot;Ford&quot;);\nMétodos\npresent() {\n    return &#039;I have a &#039; + this.brand;\n}\n \nconsole.log(car.present())\nHerencia\nclass Model extends Car {\n  constructor(name, mod) {\n    super(name);\n    this.model = mod;\n  }  \n  show() {\n      return this.present() + &#039;, it is a &#039; + this.model\n  }\n}\nconst mycar = new Model(&quot;Ford&quot;, &quot;Mustang&quot;);\nconsole.log(mycar.show());\nArrow (funciones lambda)\nhello = function(text) {\n  return `Hello ${text}!`;\n}\npasa a ser\nhello = (text) =&gt; {\n  return `Hello ${text}$!`;\n}\no incluso (si solo tiene una línea)\nhello = (text) =&gt; `Hello ${text}$!`;\nEn realidad si solo hay 1 arg puedes hacer\nhello = val =&gt; &quot;Hello &quot; + val;\n⚠️ This\n\n\n                  \n                  Uso de This! \n                  \n                \n\nSi usas this en una función normal, hace referencia al objeto que la llamó, si lo haces en una Arrow siempre representa al objeto que define la función arrow\n\n\nEjemplos\nEn este caso mostrará los objetos window y button respectivamente\nclass Header {\n  constructor() {\n    this.color = &quot;Red&quot;;\n  }\n \n//Regular function:\n  changeColor = function() {\n    document.getElementById(&quot;demo&quot;).innerHTML += this;\n  }\n}\n \nconst myheader = new Header();\n \n//The window object calls the function:\nwindow.addEventListener(&quot;load&quot;, myheader.changeColor);\n \n//A button object calls the function:\ndocument.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, myheader.changeColor);\nEn este caso mostrará dos veces el objeto Header\nclass Header {\n  constructor() {\n    this.color = &quot;Red&quot;;\n  }\n \n//Arrow function:\n  changeColor = () =&gt; {\n    document.getElementById(&quot;demo&quot;).innerHTML += this;\n  }\n}\n \nconst myheader = new Header();\n \n \n//The window object calls the function:\nwindow.addEventListener(&quot;load&quot;, myheader.changeColor);\n \n//A button object calls the function:\ndocument.getElementById(&quot;btn&quot;).addEventListener(&quot;click&quot;, myheader.changeColor);\nVariables\nvar, let, and const\nvar\nSi usas var fuera de una función, pertenece al ámbito global.\nSi usa var dentro de una función, pertenece a esa función.\nSi usa var dentro de un bloque, ejemplo, un bucle for, la variable todavía estará disponible fuera de ese bloque.\nlet\nSiempre de bloque\nconst\nSu valor nunca cambia. No quiere decir que sea un valor constante sino que su referencia a un valor es constante.\nPor tanto NO puedes:\nReasignar un valor constante\nReasignar una matriz constante\nReasignar un objeto constante\n\npero PUEDES:\nCambiar los elementos de la matriz constante.\nCambiar las propiedades del objeto constante.\n\nDestructurar (Destructuring)\nconst vehicles = [&#039;mustang&#039;, &#039;f-150&#039;, &#039;expedition&#039;];\n \nconst [car, truck, suv] = vehicles;\nSi no necesitamos el truck\nconst vehicles = [&#039;mustang&#039;, &#039;f-150&#039;, &#039;expedition&#039;];\n \nconst [car,, suv] = vehicles;\nUtil para pasar datos (sin orden específico)\nconst vehicleOne = {\n  brand: &#039;Ford&#039;,\n  model: &#039;Mustang&#039;,\n  type: &#039;car&#039;,\n  year: 2021, \n  color: &#039;red&#039;\n}\n \nmyVehicle(vehicleOne);\n \nfunction myVehicle({type, color, brand, model}) {\n  const message = &#039;My &#039; + type + &#039; is a &#039; + color + &#039; &#039; + brand + &#039; &#039; + model + &#039;.&#039;;\n}\nSintaxis expandida (Spread)\nEs como que extrae el contenido de los array u objetos\nconst numbersOne = [1, 2, 3];\nconst numbersTwo = [4, 5, 6];\nconst numbersCombined = [...numbersOne, ...numbersTwo];\nCombinando Spread con Destructuring\nconst numbers = [1, 2, 3, 4, 5, 6];\n \nconst [one, two, ...rest] = numbers;\n\n\n                  \n                  Fíjate \n                  \n                \n\nEste ejemplo asigna los numeros 1 y 2 a las varibles correspondientes, el resto los deja en un array\n\n\nEn el siguiente ejemplo, se combinan las propiedades de ambos objetos\nconst myVehicle = {\n  brand: &#039;Ford&#039;,\n  model: &#039;Mustang&#039;,\n  color: &#039;red&#039;\n}\n \nconst updateMyVehicle = {\n  type: &#039;car&#039;,\n  year: 2021, \n  color: &#039;yellow&#039;\n}\n \nconst myUpdatedVehicle = {...myVehicle, ...updateMyVehicle}\n\n\n                  \n                  Fíjate \n                  \n                \n\nLas propiedades iguales, se sobreescriben con la ultima, es decir, “color” de updateMyVehicle sobreescribirá a “color” de myVehicle en el objeto resultante\n\n\nModulos (Importar librerías)\nMovido a su propia nota\nOperador ternario\nFunciona igual que en la mayoría de lenguajes\nauthenticated ? renderApp() : renderLogin();\nTengo un problema\nEsta sección se ha movido a su propia nota\nBibliografía\nSpread syntax\nVersiones JS\nwww.w3schools.com/react/react_es6.asp"},"Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Modulos":{"title":"Modulos","links":["Programación/Lenguajes-de-programación/WebDev/NodeJS","Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Tengo-un-problema-en-JS"],"tags":[],"content":"Existen 3 formas de importar librerías:\n\nesm (ES6) (works with import syntax — recommended)\numd (works with &lt;script&gt; tags or RequireJS)\ncjs (works with require() syntax)\n\nPuedes exportar una función o variable de cualquier archivo\nHay dos tipos de exportado: Por nombre (named) o por defecto (default)\n\n\n                  \n                  No confundir con Node.js \n                  \n                \n\nmodule.exports es de NodeJS\n\n\nExportar\nPor nombre\nOpción 1 (en línea)\nexport const name = &quot;Jesse&quot;\nexport const age = 40\nOpción 2 (de golpe)\nconst name = &quot;Jesse&quot;\nconst age = 40\n \nexport { name, age }\nPor defecto\nSolo se puede uno por archivo\nconst message = () =&gt; {\n  const name = &quot;Jesse&quot;;\n  const age = 40;\n  return name + &#039; is &#039; + age + &#039;years old.&#039;;\n};\n \nexport default message;\nImportar\nDependiendo de si son por defecto o nombre se hará de una forma\nPor nombre\nDebe ser con llaves\nimport { name, age } from &quot;./person.js&quot;;\nPor defecto\nSin llaves\nimport message from &quot;./message.js&quot;;\n\n\n                  \n                  Cuidado con mezclar! \n                  \n                \n\nEstos dos sistemas, por defecto / por nombre, no se pueden combinar de ninguna forma, tal y como se comenta en Tengo un problema en JS\n\n\nBibliografía\nstackoverflow.com/questions/44490627/how-to-import-export-a-class-in-vanilla-javascript-js"},"Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/SQLite-en-JS":{"title":"SQLite en JS","links":["Programación/Lenguajes-de-programación/WebDev/NodeJS","Programación/Lenguajes-de-programación/WebDev/Glitch","Programación/Lenguajes-de-programación/SQL"],"tags":[],"content":"\n\n                  \n                  Servidor \n                  \n                \n\nEs obligatorio utilizar un servidor para usar una base de datos. No se puede usar vanilla JS sino un servidor como NodeJS\n\n\nLa base de datos en sqlite es un archivo basededatos.db, si queremos hacer drop de la base de datos, simplemente tendremos que borrar ese archivo. En Glitch se encuentra en la carpeta ./.data\nTenemos un script que se encarga de la lógica de sqlite llamado sqlite.js y tenemos un script que se encarga de la lógica del servidor llamada server.js\nDesde server.js importamos sqlite.js\nconst db = require(&quot;./src/sqlite.js&quot;);\nY aquí tenemos el contenido de sqlite.js\nconst fs = require(&quot;fs&quot;);\n \n// Initialize the database\nconst dbFile = &quot;./.data/events.db&quot;;\nconst exists = fs.existsSync(dbFile);\nconst sqlite3 = require(&quot;sqlite3&quot;).verbose();\nconst dbWrapper = require(&quot;sqlite&quot;);\nlet db;\n \ndbWrapper\n  .open({\n    filename: dbFile,\n    driver: sqlite3.Database\n  })\n  .then(async dBase =&gt; {\n    db = dBase;\n \n    // We use try and catch blocks throughout to handle any database errors\n    try {\n      // The async / await syntax lets us write the db operations in a way that won&#039;t block the app\n      if (!exists) {\n        // Database doesn&#039;t exist yet - create Choices and Log tables\n        await db.run(\n          &quot;CREATE TABLE Events (id INTEGER PRIMARY KEY AUTOINCREMENT, game_id INTEGER FOREIGN KEY, name TEXT)&quot;\n        );\n        \n        await db.run(\n          &quot;CREATE TABLE Users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, email TEXT, pass TEXT)&quot;\n        );\n        \n        await db.run(\n          &quot;CREATE TABLE Games (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)&quot;\n        );\n        \n        await db.run(\n          &quot;CREATE TABLE Log (id INTEGER PRIMARY KEY AUTOINCREMENT, event_id INTEGER FOREIGN KEY, game_id INTEGER, time STRING)&quot;\n        );\n      } else {\n        // We have a database already - write Choices records to log for info\n        console.log(await db.all(&quot;SELECT * from Games&quot;));\n \n        //If you need to remove a table from the database use this syntax\n        //db.run(&quot;DROP TABLE Logs&quot;); //will fail if the table doesn&#039;t exist\n      }\n    } catch (dbError) {\n      console.error(dbError);\n    }\n  });\nPara que los métodos de manipulación de la base de datos se pueda acceder desde lo que hemos importado en server.js, se debe poner en un module.exports y queda así (con algunos métodos útiles de ejemplo):\nmodule.exports = {\n  addTest: async () =&gt; {\n    try {\n     await db.run(&quot;INSERT INTO Games(name) VALUES(?)&quot;, &quot;Juego de prueba&quot;);\n    } catch (dbError) {\n      console.error(dbError);\n    }\n  },\n  removeTest: async () =&gt; {\n    try {\n      await db.run(&quot;DELETE FROM Games WHERE name=?&quot;, &quot;Juego de prueba&quot;);\n    } catch (dbError) {\n      console.error(dbError);\n    }\n  },\n  getLogs: async () =&gt; {\n    try {\n      return await db.all(&quot;SELECT * from Log ORDER BY time DESC LIMIT 20&quot;);\n    } catch (dbError) {\n      console.error(dbError);\n    }\n  },\n  updateLog: async (log_id, new_value) =&gt; {\n    try {\n      await db.run(\n        &quot;UPDATE Log SET name = ? WHERE log_id = ?&quot;,\n        new_value, log_id\n      );\n    } catch (dbError) {\n      console.error(dbError);\n    }\n  },\n  emptyLog: async () =&gt; {\n    try {\n      await db.run(&quot;DELETE from Log&quot;);\n    } catch (dbError) {\n      console.error(dbError);\n    }\n  },\n};\nEntonces desde server.js podemos hacer\ndb.addTest()\no\ndb.updateLog(2, &quot;Mi prueba&quot;)\nManejo de bases de datos (SQL)\nEsto se trata en la nota SQL\nKeywords\nBase de datos DDBB BD BBDD DB"},"Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Tengo-un-problema-en-JS":{"title":"Tengo un problema en JS","links":["Programación/Lenguajes-de-programación/WebDev/Handlebars"],"tags":[],"content":"Uncaught SyntaxError: The requested module ‘./archivo.js’ does not provide an export named ‘funcionImportada’ (at script.js:1:9)\nSi usas default, no puedes usar llaves y viceversa (el error es el mismo)\nOpcion 1: Usar default\nexport default (name) =&gt; {  \n    console.log(`Hey there, ${name}`);  \n};\nEntonces no puedes usar\nimport {printMyName} from &#039;./printMyName.js&#039;;  \n  \nprintMyName(&#039;Amol Shelke&#039;);\nY deberás ponerlo así\nimport printMyName from &#039;./printMyName.js&#039;;  \n  \nprintMyName(&#039;Amol Shelke&#039;);\nOpción 2: Usar nombre\nconst printMyName = (name) =&gt; {  \n    console.log(`Hey there, ${name}`);  \n};  \n  \nexport { printMyName };\nEntonces no puedes usar\nimport printMyName from &#039;./printMyName.js&#039;;  \n  \nprintMyName(&#039;Amol Shelke&#039;);\nY deberás ponerlo así\nimport {printMyName} from &#039;./printMyName.js&#039;;  \n  \nprintMyName(&#039;Amol Shelke&#039;);\nUncaught SyntaxError: Unexpected token ‘const’\nSeguramente tengas un código como\n⚠️ Código con error!\nexport default const printMyName = (name) =&gt; {  \n    console.log(`Hey there, ${name}`);  \n};\nHay dos formas de solucionarlo\nconst printMyName = (name) =&gt; {\n    console.log(`Hey there, ${name}`);\n};\n \nexport default printMyName;\n \nexport default (name) =&gt; {\n    console.log(`Hey there, ${name}`);\n};\n \nUncaught ReferenceError: require is not defined\nCreo que hay varios posibles escenarios por los que se puede dar este error.\nPero el que conozco:\nPuede ser que sea un problema importando desde el cliente. Vamos a poner por caso que intentas importar Handlebars:\nlo que puedes hacer es añadir un script al html que te genera el servidor\n    &lt;script src=&quot;cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.min.js&quot;&gt;&lt;/script&gt;\n     &lt;script src=&quot;/addEvent.js&quot;&gt;&lt;/script\nEse archivo addEvent.js será el usado por el cliente. Y ahí podemos acceder al objeto ya importado mediante window de la siguiente manera:\nconst Handlebars = window.Handlebars;\nUncaught SyntaxError: Unexpected token ‘export’\nProbablemente sea porque lo estás intentando importar con una etiqueta &lt;script&gt;\nGET /assets/js/sqlite3 net::ERR_ABORTED 404 (Not Found)\nProbablemente te falte la extensión\nejemplo con error\nimport &quot;./sqlite3&quot;\nejemplo corregido\nimport &quot;./sqlite3.js\nHago una petición HTTP (get, post, …) y me devuelve index.html\nesto\napp.get(&#039;*&#039;,...);\ntiene que ir al final"},"Programación/Lenguajes-de-programación/WebDev/NodeJS":{"title":"NodeJS","links":["Programación/Lenguajes-de-programación/WebDev/PowerUp-para-Trello","tags/WIP","Programación/Lenguajes-de-programación/WebDev/Glitch","Programación/Lenguajes-de-programación/WebDev/Fastify","Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Modulos"],"tags":["WIP"],"content":"Para ver un ejemplo de PowerUp para Trello click aquí\nNodeJS es también JS pero para el servidor y orientado a eventos asíncronos\nPermite el uso de package.json donde podemos indicar los framework y librerías que son dependencias del proyecto.\nEjemplo\n{\n  &quot;modules&quot;: &quot;commonJS&quot;,\n  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;vite&quot;,\n    &quot;build&quot;: &quot;vite build&quot;,\n    &quot;preview&quot;: &quot;vite preview&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;react&quot;: &quot;^18.3.1&quot;,\n    &quot;react-dom&quot;: &quot;^18.3.1&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;vite&quot;: &quot;^5.3.5&quot;\n  }\n}\nEntonces ponemos el comando npm i y se instalarán todas las librerías que falten\nEn scripts podríamos también incluir cualquier librería que hayamos instalado\n&quot;scripts&quot;: {\n    &quot;tu-paquete&quot;: &quot;tu-paquete&quot;\n}\nDiferencias entre las dependencies y las devDependencies\nWIP\nPunto de inicio server.js\nCreo que necesitas tener un script js a partir del cuál arranque todo, e.g. server.js\nejemplo básico\nconst { createServer } = require(&#039;node:http&#039;);\n \nconst hostname = &#039;127.0.0.1&#039;;\nconst port = 3000;\n \nconst server = createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader(&#039;Content-Type&#039;, &#039;text/plain&#039;);\n  res.end(&#039;Hello World&#039;);\n});\n \nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\ny ejecutarlo con\nnode server.js\nImportante mirar el apartado de Navegación\nEn algún sitio leí esto pero no tengo claro qué es\nnpm run tu-paquete\nDesde la versión 5.2.0 incluye el comando npx para facilitar la instalación y gestión de dependencias.\nEjecutar un paquete sería\nnpx tu-paquete\nO ejecutar directamente desde Github\nnpx gist.github.com/Tynael/0861d31ea17796c9a5b4a0162eb3c1e8\nNavegación / Page Route / Navigation\nCreo que para esto necesitamos de una librería externa como fastify (que usa Glitch)\nAquí un ejemplo de node con Fastify, pero entro en más detalle con Fastify en su nota\nconst path = require(&quot;path&quot;);\n \n// Require the fastify framework and instantiate it\nconst fastify = require(&quot;fastify&quot;)({\n  // Set this to true for detailed logging:\n  logger: false,\n});\n \n// Setup our static files\nfastify.register(require(&quot;@fastify/static&quot;), {\n  root: path.join(__dirname, &quot;public&quot;),\n  prefix: &quot;/&quot;, // optional: default &#039;/&#039;\n});\n \n// Load and parse SEO data\nconst seo = require(&quot;./src/seo.json&quot;);\nif (seo.url === &quot;glitch-default&quot;) {\n  seo.url = `https://${process.env.PROJECT_DOMAIN}.glitch.me`;\n}\n \n/**\n * Our home page route\n *\n * Returns src/pages/index.hbs with data built into it\n */\nfastify.get(&quot;/&quot;, function (request, reply) {\n  // params is an object we&#039;ll pass to our handlebars template\n  let params = { seo: seo };\n \n  // If someone clicked the option for a random color it&#039;ll be passed in the querystring\n  if (request.query.randomize) {\n    // We need to load our color data file, pick one at random, and add it to the params\n    const colors = require(&quot;./src/colors.json&quot;);\n    const allColors = Object.keys(colors);\n    let currentColor = allColors[(allColors.length * Math.random()) &lt;&lt; 0];\n \n    // Add the color properties to the params object\n    params = {\n      color: colors[currentColor],\n      colorError: null,\n      seo: seo,\n    };\n  }\n \n  // The Handlebars code will be able to access the parameter values and build them into the page\n  return reply.view(&quot;/src/pages/index.hbs&quot;, params);\n});\n \n/**\n * Our POST route to handle and react to form submissions\n *\n * Accepts body data indicating the user choice\n */\nfastify.post(&quot;/&quot;, function (request, reply) {\n  // Build the params object to pass to the template\n  let params = { seo: seo };\n \n  // If the user submitted a color through the form it&#039;ll be passed here in the request body\n  let color = request.body.color;\n \n  // If it&#039;s not empty, let&#039;s try to find the color\n  if (color) {\n    // ADD CODE FROM TODO HERE TO SAVE SUBMITTED FAVORITES\n \n    // Load our color data file\n    const colors = require(&quot;./src/colors.json&quot;);\n \n    // Take our form submission, remove whitespace, and convert to lowercase\n    color = color.toLowerCase().replace(/\\s/g, &quot;&quot;);\n \n    // Now we see if that color is a key in our colors object\n    if (colors[color]) {\n      // Found one!\n      params = {\n        color: colors[color],\n        colorError: null,\n        seo: seo,\n      };\n    } else {\n      // No luck! Return the user value as the error property\n      params = {\n        colorError: request.body.color,\n        seo: seo,\n      };\n    }\n  }\n \n  // The Handlebars template will use the parameter values to update the page with the chosen color\n  return reply.view(&quot;/src/pages/index.hbs&quot;, params);\n});\n \n// Run the server and report out to the logs\nfastify.listen(\n  { port: process.env.PORT, host: &quot;0.0.0.0&quot; },\n  function (err, address) {\n    if (err) {\n      console.error(err);\n      process.exit(1);\n    }\n    console.log(`Your app is listening on ${address}`);\n  }\n);\nFunciones\nSe definen como\nfunction nombreFuncion(argumentos) {\n  // Blabla\n}\nMódulos\nInformación sobre importar y exportar módulos en vanilla JS aquí\nmodule.exports es el objeto en el que pondremos todo lo que queramos exportar\nModule.exports.metodoEjemplo = nombreFuncion\nPara importarlo, se usar require()\nconst moduloEjemplo = require(&quot;path/nombreArchivo.js&quot;) // sí misma carpeta path = &quot;./&quot;\nAhora podremos hacer moduloEjemplo.metodoEjemplo()\nPara exportar en bloque\nmodule.exports = {\n   metodo1: miPrimerMetodo,\n   metodo2: miSegundoMetodo\n}\nY para importar solo algún método de un módulo\nconst {metodo2, metodo1} = require(&quot;./nombreArchivo.js&quot;)\nconsole.Error(new Error(&quot;mi error&quot;)) nos devolverá más info\nEl módulo process nos da mucha info sobre el sistema en el que se está ejecutando \nCon process.argv podemos acceder a los argumentos de ejecución de la consola\nsetImmediate se ejecuta después del código síncrono\nel módulo http nos permite crear un servidor\nconst servidor = http.createServer((req, res) =&gt; {     })\nservidor.listen(port, () =&gt; { })\n permite hacer peticiones GET, POST, PUT y DELETE\nPetición ajax (http request) con JS puro\nconst myRequest = new Request(&quot;example.com/hello&quot;);\n \nfetch(myRequest, {\n  redirect: &quot;follow&quot;,\n  headers: {\n    &quot;Content-Type&quot;: &quot;text/plain;charset=utf-8&quot;,\n   }\n})\n  .then((response) =&gt; {\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n \n    return response.json();\n  })\n  .then((data) =&gt; {\n    alert(JSON.stringify(data));\n  })\n  .catch((error) =&gt; {\n    console.error(&#039;Fetch error:&#039;, error);\n  });\nmyPromise\n  .then((value) =&gt; `${value} and bar`)\n  .then((value) =&gt; `${value} and bar again`)\n  .then((value) =&gt; `${value} and again`)\n  .then((value) =&gt; `${value} and again`)\n  .then((value) =&gt; {\n    console.log(value);\n  })\n  .catch((err) =&gt; {\n    console.error(err);\n  });\nAvanzado\nchild_process\nNos permite hacer uso de la consola a través del servidor (creo)\nSe importa\nconst { exec } = require(&#039;child_process&#039;);\nY se usa así\nexec(&#039;ls -la&#039;, (error, stdout, stderr) =&gt; {\n  if (error) {\n    console.error(`Error al ejecutar el comando: ${error.message}`);\n    return;\n  }\n  if (stderr) {\n    console.error(`Error en stderr: ${stderr}`);\n    return;\n  }\n  console.log(`Salida:\\n${stdout}`);\n});\nBibliografía\nyoutu.be/1hpc70_OoAg \ndeveloper.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\nwww.freecodecamp.org/espanol/news/npm-vs-npx-cual-es-la-diferencia/\nnodejs.org/en/learn/getting-started/introduction-to-nodejs\nglitch.com/"},"Programación/Lenguajes-de-programación/WebDev/PowerUp-para-Trello":{"title":"PowerUp para Trello","links":["Programación/Lenguajes-de-programación/WebDev/Glitch"],"tags":[],"content":"Esta guía se basa en mi PowerUp. Consiste en una sencilla aplicación  mediante Glitch que convierte el texto de las tarjetas de la lista de trello que le pidas, en el tableto en el que estés. En esta guía voy a desgranar en detalle los pasos que hay que dar y los problemas que me han ido surgiendo\nSi tienes problemas una vez instalada debes aceptar cookies de terceros y popups\nDescripción del proyecto\nSe ha desarrollado en glitch.com por dos razones: porque lo recomienda el equipo de Trello y porque facilita la gestión servidor\nPara llevar a cabo el proyecto se ha utilizado la guía oficial adaptada al escenario que yo he planteado, además he ido ojeando los proyectos del resto\nDesarrollo\nLo primero que hice fue clonar el esqueleto que ellos te brindan aquí\n\nAquí podrás cambiar el nombre del proyecto\nRegistrar la app\nAntes de continuar, es conveniente registrar ya la app para evitar futuros problemas\nPara ellos tienes que ir a trello.com/power-ups/admin y clicar en Nuevo\nLo más importante de esta parte es poner la url de tu PowerUp en URL del conector de iframe (obligatoria para el Power-Up): en mi caso lists-to-text-trello-powerup.glitch.me/ \nUna vez registrado el PowerUp debemos configurarlo:\n\nEntramos en Clave de API (ApiKey) y\n\nGeneramos una api key que guardaremos, porque la necesitaremos más tarde\nEn esta misma sección, añadiremos nuestra URL otra vez en Orígenes permitidos. Esto es de vital importancia, de lo contrario, no funcionará la autenticación del usuario\n\n\nAhora vamos a Funciones y elegimos en qué lugar queremos que nuestro PowerUp tenga efecto\nYo elegí botones del tablero porque quiero que quede ahí\n\nCódigo\nserver.js\n/* global Trello */\nvar express = require(&quot;express&quot;);\nvar app = express();\n \n// expressjs.com/en/starter/static-files.html\napp.use(express.static(&quot;public&quot;));\nvar cors = require(&quot;cors&quot;);\napp.use(cors({ origin: &quot;trello.com&quot; }));\n \nconst fetch = require(&quot;node-fetch&quot;);\n \n// expressjs.com/en/starter/basic-routing.html\napp.get(&quot;*&quot;, function (request, response) {\n  response.sendFile(__dirname + &quot;/views/index.html&quot;);\n});\n \nvar listener = app.listen(process.env.PORT, function () {\n  console.log(&quot;Your app is listening on port &quot; + listener.address().port);\n});\nAl server.js que te viene por defecto, debes importar el módulo cors y permitir el origen trello.com tal y como aparece \nCabe mencionar que no tuve que tocar nada más de este archivo. dicho sea de paso, no usé el process.env process.env.apiKey / process.env.tokenKey para nada\nOtra cosa a remarcar es que en la línea 14 le indicamos que inicialmente cargue /views/index.html\nviews/index.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;script src=&quot;p.trellocdn.com/power-up.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;    \n  &lt;body&gt;\n    &lt;script src=&quot;./js/client.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\nQue simplemente sirve para cargar client.js en que estará la lógica de poner el botón en su sitio\nA partir de este punto, siempre trabajaremos en la carpeta public. Incluído el client.js\npublic/js/client.js\n/* global TrelloPowerUp */\n \nTrelloPowerUp.initialize({\n  &#039;board-buttons&#039;: function(t, options){\n    return [{\n      icon: &#039;cdn.glitch.com/1b42d7fe-bda8-4af8-a6c8-eff0cea9e08a%2Frocket-ship.png#039;,\n      text: &#039;Lista a texto!&#039;,\n      callback: function(t) {\n           return t.popup({\n             title: &quot;Estimation&quot;,\n             url: &#039;textManager.html&#039;,\n           });\n         }\n    }];\n  },\n});\nComo avanzabamos en index.html, este trozo de código se encarga de ubicar el botón en el lugar que habilitamos en Funciones, al registrar el PowerUp\nAdemás, mediante la función callback y popup estamos indicando que, cuando el usuario clique, deberá crear una ventana emergente con la vista textManager.html, que está en public, por lo que podemos deducir que el scope en este punto es la carpeta public\npublic/textManager.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;p.trellocdn.com/power-up.css&quot; /&gt;\n \n    &lt;script\n      src=&quot;code.jquery.com/jquery-3.3.1.min.js&quot;\n      integrity=&quot;sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=&quot;\n      crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;trello.com/1/client.js\n    &lt;script src=&quot;p.trellocdn.com/power-up.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    Elige una lista:\n    &lt;select name=&quot;size&quot; id=&quot;listSelect&quot;&gt;&lt;/select&gt;\n    &lt;textarea&gt;&lt;/textarea&gt;\n    &lt;script src=&quot;./js/textManager.js&quot;&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\nEn este html estamos cargando jquery, el framework de los powerup, el código asociado a esta vista textManager.js y una librería de trello que facilita la gestión de las keys y llamadas a la api. Para cargarla, necesitamos pasarle la api key que conseguimos antes, en el momento de registrar la app. Esta librería de trello, nos creará en window una variable llamada Trello que usaremos más adelante\npublic/js/textManager.js\nPor ser la parte más importante, la veremos parte a parte\npublic/js/textManager.js\n/* global TrelloPowerUp */\n \nvar t = TrelloPowerUp.iframe();\nEn la parte de arriba tenemos estas dos líneas\nEl comentario carga el objeto TrelloPowerUp\nLa de abajo activa el iframe (digamos que inicializa el PowerUp) y nos devuelve t que nos servirá para más cosas después\npublic/js/textManager.js\nvar authenticationSuccess = function () {\n  console.log(&quot;Successful authentication&quot;);\n};\n \nvar authenticationFailure = function () {\n  console.log(&quot;Failed authentication&quot;);\n};\n \nwindow.Trello.authorize({\n  type: &quot;popup&quot;,\n  name: &quot;Getting Started Application&quot;,\n  scope: {\n    read: &quot;true&quot;,\n    write: &quot;true&quot;,\n  },\n  expiration: &quot;never&quot;,\n  success: authenticationSuccess,\n  error: authenticationFailure,\n});\nLo siguiente que habrá que hacer es pedir al usuario que de permisos a la app. Esto lo que hará será generar una key y guardarla en la variable Trello que vimos antes\npublic/js/textManager.js\nt.board(&quot;id&quot;).then((val) =&gt; {\n  window.Trello.get(`/boards/${val.id}/lists`, successListsGathered, genericError);\n});\nPara obtener el id del tablero en el que estamos, solo tendremos que acceder a la variable t que vimos antes y pasarle el string “id”, también podríamos obtener el nombre con “name”\npublic/js/textManager.js\nfunction successListsGathered(lists) {\n  lists.forEach(function (item) {\n    console.log(item.name);\n    $(&quot;#listSelect&quot;).append(\n      $(&quot;&lt;option&gt;&quot;, {\n        value: item.id,\n        text: item.name,\n      })\n    );\n    window.Trello.get(\n      `/lists/${lists[0].id}/cards`,\n      successCardsGathered,\n      genericError\n    );\n  });\n}\nEsto ya está listo, pero podemos acabar de analizarlo\nRecorremos la lista de items para añadir las opciones en el desplegable (select)\nEsa petición get es para que, al abrir, cargue automáticamente la primera opción y el campo no se vea vacío\npublic/js/textManager.js\nwindow.listSelect.addEventListener(&quot;change&quot;, function (event) {\n  console.log(window.listSelect.value);\n  window.Trello.get(\n    `/lists/${window.listSelect.value}/cards`,\n    successCardsGathered,\n    genericError\n  );\n});\nPor último, agregamos un listener al evento de actualización del desplegable, con el id seleccionado\npublic/js/textManager.js\nfunction successCardsGathered(val) {\n  $(&quot;textarea&quot;).text(&quot;&quot;);\n  val.forEach(function (item) {\n    $(&quot;textarea&quot;).append(item.name + &quot;\\n&quot;);\n  });\n}\nY ponemos en el textarea el contenido de las tarjetas de la lista\nBibliografía\ndeveloper.atlassian.com/cloud/trello/guides/power-ups/building-a-power-up-part-one/ \nglitch.com/@trello \nglitch.com/edit/#!/trello-power-up-skeleton \ntrello.com/power-ups/admin \nglitch.com/edit/#!/lists-to-text-trello-powerup"},"Programación/Lenguajes-de-programación/WebDev/React":{"title":"React","links":["Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/JavaScript-Núcleo","Programación/Lenguajes-de-programación/WebDev/NodeJS","Programación/Lenguajes-de-programación/WebDev/ViteJS","Programación/Lenguajes-de-programación/WebDev/Glitch"],"tags":[],"content":"Intro\nUtiliza ES6\nTiene varias opciones:\nFunciona con NodeJS\nCrea un DOM virtual para editar lo que necesite y luego al DOM del navegador, así cambiar solo lo necesario\nPara la guía de estilos aquí\nPuedes empezar a trabajar con él importando las librerías. Además hay un par de cosas más recomendadas aquí tienes todo\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;\n        &lt;script crossorigin src=&quot;unpkg.com/react@18/umd/react.development.js&quot;&gt;&lt;/script&gt;\n        &lt;script crossorigin src=&quot;unpkg.com/react-dom@18/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;\n        &lt;script src=&quot;unpkg.com/babel-standalone@6/babel.min.js&quot;&gt;&lt;/script&gt;\n        &lt;script crossorigin src=&quot;...&quot;&gt;&lt;/script&gt;\n        &lt;!-- Production links\n         &lt;script crossorigin src=&quot;unpkg.com/react@18/umd/react.production.min.js&quot;&gt;&lt;/script&gt;\n&lt;script crossorigin src=&quot;unpkg.com/react-dom@18/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;\n--&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello, React!&lt;/h1&gt;\n        &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n        &lt;script src=&quot;index.js&quot; type=&quot;text/babel&quot;&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\nCrear un nuevo proyecto\nExisten varias opciones\nNext.js\nCon el siguiente comando creas un nuevo proyecto Next.js que está basado en Next.js’ Pages Router que es un framework full-stack de React\nnpx create-next-app@latest\nRemix\nEs un framework full-stack de React con enrutado anidado. Las partes anidadas pueden cargar datos en paralelo\nnpx create-remix\nGatsby\nCreo que es para CMS. Tiene muchos plugins y los datos con GraphQL\nnpx create-gatsby\nExpo\nAplicaciones nativas en Android, iOS y webapps\nnpx create-expo-app\nHola mundo\nPodemos insertar &quot;&quot;&quot;html&quot;&quot;&quot; directamente desde js gracias a la siguiente línea\nReactDOM.render(&lt;h1&gt;Hola a todos&lt;/h1&gt;, document.getElementById(&quot;root&quot;))\nSin embargo, desde la v18 ReactDOM.render está obsoleto\npor lo que ahora se hace así\nReactDOM.createRoot(document.getElementById(&quot;root&quot;)).render(&lt;h1&gt;Hola a todos&lt;/h1&gt;)\n\n\n                  \n                  Fíjate \n                  \n                \n\nLas funciones createRoot() y render() hacen que el DOM se actualice\nCreo que createRoot() crea el VDOM y render() lo aplica\n\n\nQué es JSX?\nParece html pero en realidad es js. puedes hacer \nvar h1 = &lt;h1&gt;hola mundo&lt;/h1&gt;\nconsole.log(h1)\nTe mostrará por consola un objecto js con sus métodos y cosas\nEstá basado en los componentes, pueden ser minúsculos o páginas enteras\nLos componentes son funciones JS que devuelven jsx\nfunction MyButton() {\n  return (\n    &lt;button&gt;I&#039;m a button&lt;/button&gt;\n  );\n}\nEse botón que acabamos de crear, lo podemos usar en otros componentes\nexport default function MyApp() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to my app&lt;/h1&gt;\n      &lt;MyButton /&gt;\n    &lt;/div&gt;\n  );\n}\nSe importa con import MyApp from &quot;./MyApp&quot; (no es necesario incluir la extensión del archivo, porque es por defecto)\nCondicionales\nSiempre fuera del JSX\nconst x = 5;\nlet text = &quot;Goodbye&quot;;\nif (x &lt; 10) {\n  text = &quot;Hello&quot;;\n}\n \nconst myElement = &lt;h1&gt;{text}&lt;/h1&gt;;\no dentro de llaves con el operador ternario\nconst x = 5;\n \nconst myElement = &lt;h1&gt;{(x) &lt; 10 ? &quot;Hello&quot; : &quot;Goodbye&quot;}&lt;/h1&gt;;\nUn ejemplo eligiendo qué componente renderizar\nfunction Goal(props) {\n  const isGoal = props.isGoal;\n  if (isGoal) {\n    return &lt;MadeGoal/&gt;;\n  }\n  return &lt;MissedGoal/&gt;;\n}\n \nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Goal isGoal={false} /&gt;);\nOtra forma\nfunction Goal(props) {\n  const isGoal = props.isGoal;\n  return (\n    &lt;&gt;\n      { isGoal ? &lt;MadeGoal/&gt; : &lt;MissedGoal/&gt; }\n    &lt;/&gt;\n  );\n}\nOperador lógico &amp;&amp;\nSolo si la condición es verdadera, carga lo de la derecha del &amp;&amp;\nfunction Garage(props) {\n  const cars = props.cars;\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Garage&lt;/h1&gt;\n      {cars.length &gt; 0 &amp;&amp;\n        &lt;h2&gt;\n          You have {cars.length} cars in your garage.\n        &lt;/h2&gt;\n      }\n    &lt;/&gt;\n  );\n}\n \nconst cars = [&#039;Ford&#039;, &#039;BMW&#039;, &#039;Audi&#039;];\nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Garage cars={cars} /&gt;);\nParticularidades\nSe debe usar className en lugar de class porque class es una palabra clave reservada en JS\nCambiar de CDN a la instalación\nSupongo que para evitar que tu pág caiga si cae el CDN, es recomendable instalar React en tu proyecto.\nPara ello, podrías utilizar npm (o el sistema que tengas, nginx, por ejemplo), borrar las referencias e importar\nimport React from &quot;react&quot;\nimport ReactDOM from &quot;react-dom/client&quot;\nSin embargo, no puedes importar los módulos así tal cual. Aparentemente porque el navegador no entiende los módilos ES6 (ESM) de JavaScript sin procesamiento previo. Para lo cual podemos utilizar ViteJS entre otros.\nEl package.json quedaría por tanto así (ejemplo con NodeJS)\n{\n  &quot;modules&quot;: &quot;commonJS&quot;,\n  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;vite&quot;,\n    &quot;build&quot;: &quot;vite build&quot;,\n    &quot;preview&quot;: &quot;vite preview&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;react&quot;: &quot;^18.3.1&quot;,\n    &quot;react-dom&quot;: &quot;^18.3.1&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;vite&quot;: &quot;^5.3.5&quot;\n  }\n}\nEntonces en el index.html tenemos que incluir los archivos React utilizando type=&quot;module\n&lt;!doctype html&gt;\n&lt;html lang=&quot;es&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;\n&lt;/head&gt;\n \n&lt;body&gt;\n    &lt;h1&gt;Hello, React!&lt;/h1&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;module&quot; src=&quot;index.jsx&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEl archivo index.jsx contiene lo siguiente\nimport React from &quot;react&quot;\nimport { createRoot } from &#039;react-dom/client&#039;;\n \n// Render your React component instead\nconst root = createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;h1&gt;Hello, world&lt;/h1&gt;);\nQué es exactamente un componente?\nSon los bloques en los que se forma la app React.\nSon funciones JavaScript pero que trabajan de forma aislada y devuelven HTML\nHay dos tipos: de clase y de función. Parece que los de clase están un poco obsoletos, así que vamos solo con los de función. Más info aquí www.w3schools.com/react/react_class.asp\nComponente de Función\nTienen este formato\nfunction Car() {\n  return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;\n}\nSe renderizan así\nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Car /&gt;);\nLos componentes se pueden pasar como props (abreviado de propiedades)\nPara pasar el componente a un archivo separado, el nombre de archivo debe estar con mayúscula y exportar la función\nfunction Car() {\n  return &lt;h2&gt;Hi, I am a Car!&lt;/h2&gt;;\n}\n \nexport default Car;\nEntonces deberás importar el componente allá donde lo uses\nimport React from &#039;react&#039;;\nimport ReactDOM from &#039;react-dom/client&#039;;\nimport Car from &#039;./Car.js&#039;;\n \nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Car /&gt;);\nCargar y usar recursos\nSe hace también con import\nimport logo from &quot;./images/logo.png&quot;\nimport &quot;./style.css&quot;\nSe pueden usar entre llaves\n&lt;img src={logo}&gt;&lt;/img&gt;\n\n\n                  \n                  Nota \n                  \n                \n\nEse css que acabamos de cargar podrá utilizarse en todos los componentes que se incluyan a partir de aquí, es decir, los componentes hijos también recibirán el efecto\n\n\nDatos\nLa información en react siempre pasa de arriba hacia abajo\nSe diferencia prop de estado.\n\nProp es lo que baja a los componentes hijos y/o se puede calcular en base a otros datos\nEstado es lo que cambia con el tiempo\n\nprop\nLos componentes se pueden pasar como props (abreviado de propiedades)\nEste es un dato que se pasa a los hijos, son como argumentos de función y los envías a los componentes como atributos\nfunction Square(props) {\n  return &lt;button className=&quot;square&quot;&gt;{props.value}&lt;/button&gt;;\n}\nEl valor value se podría haber obtenido (tal y como vimos en Destructurar de ES6) directamente así:\nfunction Square({ value }) {\n  return &lt;button className=&quot;square&quot;&gt;{value}&lt;/button&gt;;\n}\nexport default function Board() {\n  return (\n    &lt;&gt;\n      &lt;div className=&quot;board-row&quot;&gt;\n        &lt;Square value=&quot;1&quot; /&gt;\n        &lt;Square value=&quot;2&quot; /&gt;\n        &lt;Square value=&quot;3&quot; /&gt;\n      &lt;/div&gt;\n      &lt;!-- ... --&gt;\n    &lt;/&gt;\n  );\n}\nSi quieres pasar un valor que no sea estático, puedes hacerlo con llaves (pasamos carName en lugar de “Ford”), ampliable a objeto: const carInfo = { name: &quot;Ford&quot;, model: &quot;Mustang&quot; }; y luego pasaríasmos {carInfo}\nfunction Car(props) {\n  return &lt;h2&gt;I am a { props.brand }!&lt;/h2&gt;;\n}\n \nfunction Garage() {\n  const carName = &quot;Ford&quot;;\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Who lives in my garage?&lt;/h1&gt;\n      &lt;Car brand={ carName } /&gt;\n    &lt;/&gt;\n  );\n}\n \nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Garage /&gt;);\nGuardar estado (useState)\nSe gestiona mediante el estado, usando el hook useState\nY cada componente será independiente, por ejemplo si tenemos &lt;&gt;&lt;Square /&gt;&lt;Square /&gt;&lt;/&gt; cada componente Square tendrá su propio estado\nimport { useState } from &#039;react&#039;;\n \nfunction Square() {\n  const [value, setValue] = useState(null);\n \n  function handleClick() {\n    setValue(&#039;X&#039;);\n  }\n \n  return (\n    &lt;button\n      className=&quot;square&quot;\n      onClick={handleClick}&gt;\n      {value}\n    &lt;/button&gt;\n  );\nBucles\nEl método favorito es map\nfunction Car(props) {\n  return &lt;li&gt;I am a { props.brand }&lt;/li&gt;;\n}\n \nfunction Garage() {\n  const cars = [&#039;Ford&#039;, &#039;BMW&#039;, &#039;Audi&#039;];\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Who lives in my garage?&lt;/h1&gt;\n      &lt;ul&gt;\n        {cars.map((car) =&gt; &lt;Car brand={car} /&gt;)}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\nClaves\nSon la forma que tienen React de realizar un seguimiento de los elementos, así actualizar exclusivamente aquellos que cambien o se eliminen\nLas claves deben ser únicas entre sus hermanos pero pueden se pueden repetir de forma global (como la i de un for)\nPor lo visto, lo mejor sería utilizar ID únicos siempre que puedas, pero como último recurso, se puede utilizar el índice del array\nfunction Garage() {\n  const cars = [\n    {id: 1, brand: &#039;Ford&#039;},\n    {id: 2, brand: &#039;BMW&#039;},\n    {id: 3, brand: &#039;Audi&#039;}\n  ];\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Who lives in my garage?&lt;/h1&gt;\n      &lt;ul&gt;\n        {cars.map((car) =&gt; &lt;Car key={car.id} brand={car.brand} /&gt;)}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n \nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Garage /&gt;);\n\n\n                  \n                  Cómo sé si lo necesito? \n                  \n                \n\nSi lo necesitas, es decir, en el contexto que estás es irremediable usarlo, React te mandará errores\n\n\nInteractividad / Eventos\nonClick es con cammelCase al contrario que en js (onclick)\nSi pasas el método, se hace con llaves y sin paréntesis\nfunction Square({ value }) {\n  function handleClick() {\n    console.log(&#039;¡hiciste clic!&#039;);\n  }\n \n  return (\n    &lt;button\n      className=&quot;square&quot;\n      onClick={handleClick}&gt;\n      {value}\n    &lt;/button&gt;\n  );\n}\n\n\n                  \n                  Cuidado \n                  \n                \n\nLa función que pasas a onClick debe ser sin paréntesis, ya que por temas de actualización de los componentes , probablemente acabes causando un bucle infinito.\n\n\nPara pasar argumentos, deberás usar la forma onClick={() =&gt; handleClick(&quot;mi argumento&quot;)}\nfunction Football() {\n  const shoot = (a) =&gt; {\n    alert(a);\n  }\n \n  return (\n    &lt;button onClick={() =&gt; shoot(&quot;Goal!&quot;)}&gt;Take the shot!&lt;/button&gt;\n  );\n}\n \nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Football /&gt;);\nObjeto event\nlo conseguimos pasándolo por el método Arrow\nfunction Football() {\n  const shoot = (a, b) =&gt; {\n    alert(b.type);\n    /*\n    &#039;b&#039; represents the React event that triggered the function,\n    in this case the &#039;click&#039; event\n    */\n  }\n \n  return (\n    &lt;button onClick={(event) =&gt; shoot(&quot;Goal!&quot;, event)}&gt;Take the shot!&lt;/button&gt;\n  );\n}\n \nconst root = ReactDOM.createRoot(document.getElementById(&#039;root&#039;));\nroot.render(&lt;Football /&gt;);\nFormularios (Forms)\nLos datos se manejan con useState\ninputs y submit\nimport {FormEvent, useState} from &#039;react&#039;;  \nimport ReactDOM from &#039;react-dom/client&#039;;  \n  \nexport default function MyForm() {  \n    const [name, setName] = useState(&quot;&quot;);  \n  \n    const handleSubmit = (event:FormEvent) =&gt; {  \n        event.preventDefault();  \n        alert(`The name you entered was: ${name}`)  \n    }  \n    return (  \n        &lt;form onSubmit={(event) =&gt; handleSubmit(event)}&gt;  \n            &lt;label&gt;Enter your name:  \n                &lt;input  \n                    type=&quot;text&quot;  \n                    value={name}  \n                    onChange={(e) =&gt; setName(e.target.value)}  \n                /&gt;  \n            &lt;/label&gt;            \n            &lt;input type=&quot;submit&quot; /&gt;  \n        &lt;/form&gt;    )  \n}\n\n\n                  \n                  Cambios en TypeScript \n                  \n                \n\nDebido a que este ejemplo está en TypeScript, se han tenido que añadir el evento FormEvent\n\n\nPara añadir múltiples campos, se usa el atributo name\nfunction MyForm() {\n  const [inputs, setInputs] = useState({});\n \n  const handleChange = (event) =&gt; {\n    const name = event.target.name;\n    const value = event.target.value;\n    setInputs(values =&gt; ({...values, [name]: value}))\n  }\n \n  const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    alert(inputs);\n  }\n \n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;label&gt;Enter your name:\n      &lt;input \n        type=&quot;text&quot; \n        name=&quot;username&quot; \n        value={inputs.username || &quot;&quot;} \n        onChange={handleChange}\n      /&gt;\n      &lt;/label&gt;\n      &lt;label&gt;Enter your age:\n        &lt;input \n          type=&quot;number&quot; \n          name=&quot;age&quot; \n          value={inputs.age || &quot;&quot;} \n          onChange={handleChange}\n        /&gt;\n        &lt;/label&gt;\n        &lt;input type=&quot;submit&quot; /&gt;\n    &lt;/form&gt;\n  )\n}\n\n\n                  \n                  handleChange \n                  \n                \n\nLos atributos name y value de cada input se obtienen de event.target\nLuego esos valores, se utilizan para añadir (o actualizar) un campo en el useState mediante setInputs. Lo que creo que está pasando exactamente es que los\nvalores de values se mantienen gracias a ...values, y poniendo [name]: value, se crea o actualiza el que corresponda con name dentro de inputs\n\n\n\n\n                  \n                  cambios para TypeScript \n                  \n                \n\npara acceder al name y value, event tiene que ser de tipo ChangeEvent&lt;HTMLInputElement&gt; y están en event.currentTarget.name y event.currentTarget.value\n\n\nTextarea\n&lt;textarea&gt;\n  Content of the textarea.\n&lt;/textarea&gt;\n&lt;form&gt;\n      &lt;textarea value={textarea} onChange={handleChange} /&gt;\n    &lt;/form&gt;\nSelect\n&lt;select&gt;\n  &lt;option value=&quot;Ford&quot;&gt;Ford&lt;/option&gt;\n  &lt;option value=&quot;Volvo&quot; selected&gt;Volvo&lt;/option&gt;\n  &lt;option value=&quot;Fiat&quot;&gt;Fiat&lt;/option&gt;\n&lt;/select&gt;\n const [myCar, setMyCar] = useState(&quot;Volvo&quot;);\n \n  const handleChange = (event) =&gt; {\n    setMyCar(event.target.value)\n  }\n \n  return (\n    &lt;form&gt;\n      &lt;select value={myCar} onChange={handleChange}&gt;\n        &lt;option value=&quot;Ford&quot;&gt;Ford&lt;/option&gt;\n        &lt;option value=&quot;Volvo&quot;&gt;Volvo&lt;/option&gt;\n        &lt;option value=&quot;Fiat&quot;&gt;Fiat&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/form&gt;\n  )\nRouter\nPor defecto no está instalado\nnpm i -D react-router-dom\nEstructura de carpetas\nsrc\\pages\\:\n\nLayout.js\nHome.js\nBlogs.js\nContact.js\nNoPage.js\n\nCasos concretos\nPasar datos desde dentro del componente al padre\nCompo, padre de MiComponente\nimport { useRef } from &quot;react&quot;;\nimport MiComponente from &quot;./MiComponente&quot;\n \nconst Compo = () =&gt; {\n  const miComponenteRef = useRef();\n \n  const manejarEjecutar = (texto) =&gt; {\n    console.log(`text ${texto}`)\n    console.log(&#039;Función ejecutada desde el componente padre&#039;);\n  };\n  \n  return (\n    &lt;div&gt;\n      &lt;MiComponente onEjecutar={manejarEjecutar} /&gt;\n    &lt;/div&gt;\n  );\n};\n \nexport default Compo;\nMiComponente hijo de Compo\nimport { useState } from &#039;react&#039;;\n \nconst MiComponente = ({ onEjecutar }) =&gt; {\n  const miMetodo = () =&gt; {\n    onEjecutar(&quot;Método ejecutado desde dentro del componente&quot;);\n  };\n \n  return (\n    &lt;div&gt;\n      &lt;h1&gt;MiComponente!&lt;/h1&gt;\n      &lt;button onClick={miMetodo}&gt;Ejecutar Método&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n \nexport default MiComponente;\nEstructura en Glitch\nLa mayoría de elementos estarán en la carpeta src/\nEl index.html (fuera de src) carga la raíz de la app src/index.jsx\nindex.jsx a su vez carga src/app.jsx que carga los componentes React. El proyecto de Glitch carga wouter como enrutador\nBibliografía\nreact.dev/learn\nv2.scrimba.com/learn-react-c0e"},"Programación/Lenguajes-de-programación/WebDev/ViteJS":{"title":"ViteJS","links":["Programación/Lenguajes-de-programación/WebDev/React"],"tags":[],"content":"Es un preprocesador de archivos web ViteJS, por ejemplo nos sirve para importar módulos como los de React"},"Programación/Lenguajes-de-programación/WebDev/WebAssambly-Wasm":{"title":"WebAssambly Wasm","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nWebAssembly es un lenguaje ensamblador de alto rendimiento que puede compilarse a partir de varios lenguajes, como C/C++, Rust y AssemblyScript. Actualmente es compatible con Chrome, Firefox, Safari, Edge y Node.js.\nBibliografía\nnodejs.org/en/learn/getting-started/nodejs-with-webassembly"},"Programación/Lenguajes-de-programación/WebDev/WebDev-index":{"title":"WebDev index","links":["Programación/Lenguajes-de-programación/WebDev/Angular/Angular-Núcleo","Programación/Lenguajes-de-programación/WebDev/CSS/CSS-Núcleo","Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/JavaScript-Núcleo","Programación/Lenguajes-de-programación/WebDev/Babel","Programación/Lenguajes-de-programación/WebDev/ESLint","Programación/Lenguajes-de-programación/WebDev/Fastify","Programación/Lenguajes-de-programación/WebDev/Gulp","Programación/Lenguajes-de-programación/WebDev/Handlebars","Programación/Lenguajes-de-programación/WebDev/HTML","Programación/Lenguajes-de-programación/WebDev/JQuery","Programación/Lenguajes-de-programación/WebDev/NodeJS","Programación/Lenguajes-de-programación/WebDev/PowerUp-para-Trello","Programación/Lenguajes-de-programación/WebDev/React","Programación/Lenguajes-de-programación/WebDev/ViteJS","Programación/Lenguajes-de-programación/WebDev/WebAssambly-Wasm","Programación/Lenguajes-de-programación/WebDev/Asincronía-en-desarrollo-web-Async-dev","Programación/Lenguajes-de-programación/WebDev/Favicon","Programación/Lenguajes-de-programación/WebDev/Glitch"],"tags":[],"content":"Lenguajes web\nAngular Núcleo\nCSS Núcleo\nJavaScript Núcleo\nBabel\nESLint\nFastify\nGulp\nHandlebars\nHTML\nJQuery\nNodeJS\nPowerUp para Trello\nReact\nViteJS\nWebAssambly Wasm\nConceptos\nAsincronía en desarrollo web Async dev\nFavicon\nGlitch"},"Programación/Lenguajes-de-programación/WebDev/express":{"title":"express","links":["Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/Cors","Programación/Lenguajes-de-programación/WebDev/JS-JavaScript/SQLite-en-JS"],"tags":[],"content":"Unidad mínima\nserver.js\nconst express = require(&#039;express&#039;);\n \nconst app = express();\n \napp.get(&#039;*&#039;, () =&gt; {\n \n});\n \napp.listen(port, () =&gt; {  \n    console.log(`Server listening on port ${port}`);  \n});\npeticiones html\napp.get(&#039;/nombre&#039;, (req, res) =&gt; { // también post, update, delete...\n\t\n})\npeticiones paramétricas\napp.delete(&#039;/borrar-registro/:id&#039;, (req, res) =&gt; { // también post, update, delete...\n\tconst { id } = req.params;\n})\npara tratamiento de archivos\nsumado a lo ya indicado en Unidad mínima\nserver.js\nconst multer = require(&#039;multer&#039;);\nconst path = require(&#039;path&#039;);  // tal vez\nconst fs = require(&#039;fs&#039;); // probablemente\n \n// Configurar Multer para manejar la subida de archivos  \nconst storage = multer.diskStorage({  \n    destination: path.join(__dirname, &#039;uploads&#039;),  \n    filename: (req, file, cb) =&gt; {  \n        cb(null, file.originalname);  \n    }  \n});  \n  \nconst upload = multer({ storage: storage });\n \napp.use(&#039;/uploads&#039;, express.static(path.join(__dirname, &#039;uploads&#039;))); // supongo que hace falta\n \napp.post(&#039;/upload-file&#039;, upload.fields([\n  { name: &#039;file&#039;, maxCount: 1 },\n  { name: &#039;image&#039;, maxCount: 1 }\n]), (req, res) =&gt; {\n  const { archivo, imagen } = req.files;\n  const { volumen } = req.body;\n \n  // Verifica si se proporcionó un archivo de sonido\n  if (!archivo || archivo.length === 0) {\n    return res.status(400).json({ message: &#039;No se ha proporcionado un archivo de sonido&#039; });\n  }\n \n  // Ruta del archivo de sonido en el servidor\n  const audioFilePath = path.join(__dirname, &#039;uploads&#039;, archivo[0].originalname);\n  const audioUrl = `simple-sound-board-javii-backend.glitch.me/uploads/${archivo[0].originalname}`;\n \n  // Verifica si se proporcionó una imagen\n  let imageUrl = &#039;&#039;;\n  if (imagen &amp;&amp; imagen.length &gt; 0) {\n    // Ruta del archivo de imagen en el servidor\n    const imageFilePath = path.join(__dirname, &#039;uploads&#039;, imagen[0].originalname);\n    imageUrl = `simple-sound-board-javii-backend.glitch.me/uploads/${imagen[0].originalname}`;\n \n    // Puedes mover la imagen a la carpeta de subidas si lo necesitas\n    fs.renameSync(imagen[0].path, imageFilePath);\n  }\n \n  // Puedes utilizar el valor de volumen como lo necesites (ej. guardarlo en la base de datos)\n  const floatVolume = parseFloat(volumen);\n \n  // Verifica si la entrada ya existe en la base de datos\n  const db = new sqlite3.Database(&#039;database.db&#039;);\n  db.get(&#039;SELECT * FROM audios WHERE name = ?&#039;, [archivo[0].originalname], (err, row) =&gt; {\n    if (err) {\n      console.error(&#039;Error checking database for existing entry:&#039;, err);\n      res.status(500).json({ message: &#039;Error checking database for existing entry&#039; });\n      db.close();\n      return;\n    }\n \n    // Si no existe, inserta los datos en la base de datos\n    if (!row) {\n      db.run(&#039;INSERT INTO audios (name, link, image, volume) VALUES (?, ?, ?, ?)&#039;, [archivo[0].originalname, audioUrl, imageUrl, floatVolume], (err) =&gt; {\n        if (err) {\n          console.error(&#039;Error inserting data into database:&#039;, err);\n          res.status(500).json({ message: &#039;Error inserting data into database&#039; });\n        } else {\n          res.json({ message: &#039;Archivo subido con éxito&#039;, audioUrl, imageUrl });\n        }\n        // Cierra la conexión a la base de datos\n        db.close();\n      });\n    } else {\n      // Si ya existe, responde indicando que el archivo ya está en la base de datos\n      res.json({ message: &#039;El archivo ya está en la base de datos&#039;, audioUrl, imageUrl });\n      // Cierra la conexión a la base de datos\n      db.close();\n    }\n  });\n});\n \nAdicional\nPara tratamiento de cors, aquí\nPara uso de bd (sqlite) aquí"},"Programación/Lenguajes-de-programación/c-c++":{"title":"c c++","links":[],"tags":[],"content":"Introducción\nEl código c++ normalmente se escribe en archivos .cpp\n#include &lt;iostream&gt;\n \nint main() {\n  std::cout &lt;&lt; &quot;Hello World!\\n&quot;;\n}\nstd::cout significa “character output stream”. Se pronuncia “see-out”.\nPunteros\nSe trata de variables que contiene la dirección en memoria a otra variable\npara obtener la dirección de una variable, se utiliza &amp;\nnum = 20;\ncout &lt;&lt; &quot;Dirección de num: &quot;&lt;&lt; &amp;num &lt;&lt; endl;\n \n// resultado: Dirección de num: 0x35f32\nEstas direcciones podemos guardarlas en una variable, para definir el variable de tipo puntero, se utiliza *\n*dir = &amp;num;\nPara obtener el valor que está en una dirección de memoria, también se emplea *\ncout &lt;&lt; &quot;Contenido en dirección de memoria: &quot; &lt;&lt; *dir &lt;&lt; endl;\n \n// resultado: Contenido en dirección de memoria: 20\n¿Para qué sirven los punteros?\nEn lenguajes de más alto nivel, los punteros se gestionan automáticamente, sin embargo en C y C++ lo tenemos que gestionar nosotros, esto quiere decir que si tenemos un array, no podremos acceder directamente a la posición  numeros[2], en su lugar, deberemos quedarnos con el puntero a la primera posición, sumar 2 a dicho puntero y acceder al contenido del puntero.\nEjemplo:\nint numeros[] = {4, 6, 2 ,7, 8}\nint *dir_numeros;\ndir_numeros = &amp;numeros;\nfor (int i = 0; i &lt; 5; i++) {\n    cout &lt;&lt; &quot;Elemento del vector [&quot; &lt;&lt; i &lt;&lt; &quot;]: &quot; &lt;&lt; *dir_numeros++ &lt;&lt; endl;\n}\n// resultado: \n\tElemento del vector [0]: 4\n\tElemento del vector [1]: 6\n\tElemento del vector [2]: 2\n\tElemento del vector [3]: 7\n\tElemento del vector [4]: 8"},"Unity/0--Imprescindibles-Unity":{"title":"0- Imprescindibles Unity","links":["Unity/6--GUI/Cómo-funcionan-los-LayoutGroup","Unity/6--GUI/Ejemplo-de-uso-de-los-anchor-(anclas)"],"tags":[],"content":"Cómo funcionan los LayoutGroup\nEjemplo de uso de los anchor (anclas) especialmente la parte de Ejemplo de resolución de problemas"},"Unity/0--Tengo-un-problema/Al-cambiar-a-simulación-de-físicas-en-una-rampa,-se-frena":{"title":"Al cambiar a simulación de físicas en una rampa, se frena","links":[],"tags":[],"content":"Seguramente deberías poner al rigidbody la velocidad en lugar de aplicarle una fuerza\ni.e\nen vez de\n\nrb.AddForce(direction * Time.deltaTime);\n\nusar\n\nrb.velocity = characterController.velocity;\n"},"Unity/0--Tengo-un-problema/Character-Animation---Orígenes-diferentes":{"title":"Character Animation - Orígenes diferentes","links":[],"tags":[],"content":"Esta entrada trata el caso concreto del proyecto de animación 4 de la asignatura ADV (Animation and Design of Videogames). Podría no aplicar a diferentes situaciones\nLa cosa comienza con que me descargué de la Unity Store un Character ya riggeado y con animaciones ya hechas, pero traía 2 problemas:\n\n\nLas animaciones no incluyen root motion, eso quiere decir, que el movimiento es estático, es decir, se mueven los pies, pero el personaje queda en la misma posición\n\n\nEl nombre de los huesos no coincide con el establecido por mixamo\n\n\nPara evitar problemas con que las animaciones no tengan root motion, se han descargado animaciones de mixamo, de ahí el segundo problema, que no funciona directamente\nPara hacerlo funcionar hay que tener en cuenta y llevar a cabo las siguientes acciones y comprobaciones (para hacerlo más cómodo, me referiré a los Characters como Unity, porque de ahí los descargué, y a las animaciones como Mixamo, por la misma razón)\n\n\nSe ha añadido a la escena el prefab de Character Unity y se ha arrastrado dicho prefab NO el root al timeline\n\n\n\n\nSe debe ir al Avatar (no prefab) del Character Unity y debe poner Humanoid y Create From This Model\n\n\nEntrar en Configure y revisar que todo esté en verde, en T-Pose\n\n\nAunque parezca antiintuitivo, la Animación Mixamo se debe poner con su propio Avatar y NO usar el de Character Unity. i.e. Clicar en el pack de la Animación Mixamo y seleccionar Humanoid y Create From This Model !!\n\n\n\nY si no me equivoco, ya debería funcionar la Animación Mixamo"},"Unity/0--Tengo-un-problema/El-Scrollview-no-funciona":{"title":"El Scrollview no funciona","links":[],"tags":[],"content":"Lo primero es que Content tiene que tomar el tamaño de sus hijos, para ello es necesario el componente Content Size Fitter.\nEl problema radica en que Content Size Fitter solo detecta texto, imágenes y Layouts que estén en el mismo GameObject que él, por lo que, para que funcione, Content debe tener el componente Layout\n\nMás cosas a tener en cuenta:\nEl Content debería tener (en principio) el pivote X=0.5, Y=1 para que caiga de arriba y X=0.5, Y=0 para que caiga de abajo\nEl Grid Layout puede dar mucho problema, de esta forma me ha funcionado:\nScrollview con Stretch Top (si cae de arriba). Solo con Scroll Rect, Clamped y 50 de sensibilidad\n\nDel Viewport en principio no se cambia nada\n\nComo decíamos antes, el Content con el Grid y el Content Size Fitter\nStretch top (si cae de arriba)\nVertical Fit Min\n"},"Unity/0--Tengo-un-problema/Hacer-que-GO-no-se-elimine-entre-escenas-(Dont-destroy-on-load)":{"title":"Hacer que GO no se elimine entre escenas (Dont destroy on load)","links":[],"tags":[],"content":"public class DontDestroy : MonoBehaviour\n{\n    void Awake()\n    {\n        \n        if (FindObjectsOfType(typeof(GameObject)).Length &gt; 1)\n        {\n            Destroy(this.gameObject);\n        }\n \n        DontDestroyOnLoad(this.gameObject);\n    }\n}"},"Unity/0--Tengo-un-problema/He-descargado-un-proyecto-y-no-me-genera-el-archivo-de-solución-(.sln)-(.csproj)":{"title":"He descargado un proyecto y no me genera el archivo de solución (.sln) (.csproj)","links":[],"tags":[],"content":"He descargado un proyecto y no me genera el archivo de solución (.sln) (.csproj)"},"Unity/0--Tengo-un-problema/He-instalado-el-modulo-WebGL-o-ILPCC-y-ahora-no-puedo-hacer-build-ni-ejecutar-acceso-denegado":{"title":"He instalado el modulo WebGL o ILPCC y ahora no puedo hacer build ni ejecutar acceso denegado","links":[],"tags":[],"content":"Creo que se arregló borrando los sln y csproj de la carpeta raíz.\nAl iniciar otra vez Visual Studio se regeneran.\nOtra causa común del acceso denegado es que se ralla unity con sus bloqueos.\nCierra Unity, las carpetas y Visual Studio, si no se arregla, reiniciando probablemente ayude."},"Unity/0--Tengo-un-problema/Inconsistencia-accesibilidad":{"title":"Inconsistencia accesibilidad","links":[],"tags":[],"content":"\nTemp\\GeneratedCode\\Assembly-CSharp\\SpawnZombieSystem__JobEntity_10678141350.g.cs(10,47): error CS0052: Inconsistent accessibility: field type ‘GraveyardAspect.TypeHandle’ is less accessible than field ‘SpawnZombieJob.__GraveyardAspectTypeHandle’\nEl tipo de campo tal es menos accesible que el campo cual\nLo más seguro es que tengas alguna clase sin public"},"Unity/0--Tengo-un-problema/La-cámara-atraviesa-los-modelos-3D":{"title":"La cámara atraviesa los modelos 3D","links":[],"tags":[],"content":"Es tan sencillo como poner el Near de Clipping planes de la Camara a 0.01"},"Unity/0--Tengo-un-problema/La-cámara-vibra-cuando-cae-por-una-pendiente":{"title":"La cámara vibra cuando cae por una pendiente","links":[],"tags":[],"content":"Cosas que probar:\nEl PhysicMaterial podría \nPodría haber que cambiar de Update a FixedUpdate\nEn el Rigidbody probar extrapolate / intrapolate\nCambiar la masa y gravedad\nEl problema era que, para intentar mejorar el rendimiento, ya que no se usaban frecuentemente las físicas, se les bajó los FPS a 30, en vez de 60.\nKeywords\nMaterial físico physic Physics"},"Unity/0--Tengo-un-problema/Las-animaciones-no-me-mantienen-la-posición,-son-absolutas-en-vez-de-relativas,-reinician-la-posición":{"title":"Las animaciones no me mantienen la posición, son absolutas en vez de relativas, reinician la posición","links":[],"tags":[],"content":"Para que las posiciones sean relativas, es decir, cada animación toma como 0 0 0 la posición en la que quedó la última animación, tan solo hay que ir al componente Animator y activar Apply Root Motion"},"Unity/0--Tengo-un-problema/Me-da-un-error-de-AABB-inAABB":{"title":"Me da un error de AABB inAABB","links":[],"tags":[],"content":"Está relacionado con la UI\nEn mi caso fue por usar Sprite.Create() y en rect le pase Rect.zero. Al cambiar por new Rect(0.0f, 0.0f, 1, 1) me funcionó.\nResultado que funcionó:\nSprite.Create(Texture2D.blackTexture, new Rect(0.0f, 0.0f, 1, 1), Vector2.zero)\nTambién es posible que te pase algo de lo que mencionan aquí"},"Unity/0--Tengo-un-problema/No-Android-Devices-connected---No-detecta-el-móvil":{"title":"No Android Devices connected - No detecta el móvil","links":[],"tags":[],"content":"Por lo menos en el HuaWei, se desconecta siempre el USB Debugging\nKeywords\nadb"},"Unity/0--Tengo-un-problema/No-me-aparece-el-Sprite-atlas":{"title":"No me aparece el Sprite atlas","links":[],"tags":[],"content":"Lo más seguro es que debas importar el paquete 2D Sprite"},"Unity/0--Tengo-un-problema/Problemas-con-Git-+-Tortoise":{"title":"Problemas con Git + Tortoise","links":[],"tags":[],"content":"Commit sin pull\nCuando haces un Commit + Push (subir) sin hace Pull (descargar), y los archivos que has cambiado, tienen modificaciones en el repositorio, te saldrá este mensaje de error:\n\nTe sale el botón de hace pull, púlsalo\nConflicto\nCuando haces un pull, automáticamente intenta combinar los archivos, pero a veces, se modifica la misma linea y es imposible de hacer automáticamente, por lo que te da este mensaje (que recomiendo marcar que no te lo muestre de nuevo) y el mensaje de error (el que tiene color rojo debajo:\n\nComo en el mensaje de error anterior (el de pull), te muestra la recomendación de lo que debes hacer con un comodo botón, déjate llevar\n\nTe saldrá una lista con los archivos que tienen conflicto, con doble click en el archivo, se abre un programita para decidir qué hacer\n\nEn el programita se pueden ver los cambios:\n\n\nArriba izquierda está la versión que hay en el repo\n\n\nArriba derecha está la versión que hay en tu ordenador\n\n\nAbajo sale la versión final\n\n\nEn naranja sale la versión antes de modificarse\n\n\nEn rojo la modificación que cada uno ha hecho de esa línea en concreto\n\n\n\nPara simplificar, se pueden tomar 3 decisiones:\n\n\nQuedarse con la versión del repo\n\n\nQuedarse con nuestra versión (la del ordenador)\n\n\nCombinar ambas\n\n\n(En la captura se toma la segunda opción)\n\nGuardar y marcar como resuelto\n\nIMPORTANTE!\nSe DEBE hacer un commit obligatorio cuando se resuelve el conflicto!\n\n\n"},"Unity/0--Tengo-un-problema/Se-pierden-las-referencias-al-cargar-una-escena":{"title":"Se pierden las referencias al cargar una escena","links":[],"tags":[],"content":"Posiblemente lo que pierde la referencia, pongamos por ejemplo un OnClick de un botón, esté referenciando a un Script que sea Singleton.\nAl cargar la escena, como borra el Script que ya estaba en dicha escena (por el Singleton) se borran también sus referencias"},"Unity/0--Tengo-un-problema/URP-azulado":{"title":"URP azulado","links":[],"tags":[],"content":"Lo más probable es que esté utilizando como iluminación el Skybox (por defecto, al menos, en las versiones 2019). Para solucionarlo Window &gt; Rendering &gt; Lighting Settings y cambiar Environment &gt; Environment Lighting &gt; Source de Skybox a Gradient o Color, el que mejor quede\nOtra opción es que hayas quitado el Skybox de Lighting &gt; Environment &gt; Skybox Material"},"Unity/0--Tengo-un-problema/Win32Exception---El-sistema-no-puede-encontrar-el-archivo-especificado":{"title":"Win32Exception - El sistema no puede encontrar el archivo especificado","links":[],"tags":[],"content":"Lo solucioné cambiando a la versión 2021.3.6f1"},"Unity/1--Conceptos-generales/Configuración-para-CADA-proyecto-Unity":{"title":"Configuración para CADA proyecto Unity","links":[],"tags":[],"content":"Eliminar estos paquetes en la medida de lo posible\n\nBibliografía\nforum.unity.com/threads/temp-unityengine-testrunner-dll-error.1133938/#post-7287748 \nKeywords\nError dll Rider timeline collab vscode visualscripting visual scripting\nUnloading broken assembly Library/ScriptAssemblies/Unity.Rider.Editor.dll, this assembly can cause crashes in the runtime"},"Unity/1--Conceptos-generales/Delta-time":{"title":"Delta time","links":[],"tags":[],"content":"Time.deltaTime es el tiempo transcurrido entre un frame y el anterior.\nSi cada frame sumase el delta time, el resultado después de un segundo será aprox uno\nSi le pones, por ejemplo, velocidad de 20 y lo multiplicamos por deltaTime, el resultado tras un segundo de ejecución sería haberse movido 20 unidades\nFixedDeltaTime es estable porque devuelve el tiempo entre un FixedUpdate y el siguiente. Siempre devuelve lo mismo, no tiene sentido usarlo en el Update.\nFixedUpdate es más preciso y es configurable (ProjectSettings &gt; Time)\ntranform.position = new Vector2(0, tranform.position.y + velocidad * Time.deltaTime);\nHará qué el gameobject en cuestión se mueva equitativamente, a tantas unidades por segundo como le indiquemos en el parámetro velocidad"},"Unity/1--Conceptos-generales/Modos-de-renderizado-y-modos-de-color":{"title":"Modos de renderizado y modos de color","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/1--Conceptos-generales/Namespace":{"title":"Namespace","links":[],"tags":[],"content":"Es útil para clasificar scripts en grupos y evitar colisiones\nEjemplo entre Unity y Microsoft\nMicrosoft ha definido una clase llamada Random, pero Unity quiere también implementar la suya\nNo hay problema, porque la de Microsoft está en System.Random y la de Unity en UnityEngine.Random de tal forma que son unívocas\npuedes hacer un using de UnityEngine y si necesitas en un momento determinado la de Microsoft haces System.Random rand = new System.Random() y a funcionar\nTruco 1\nUnity permite poner un namespace predefinido en opciones\n\nTruco 2\nVisual Studio puede refactorizar una clase para envolverla en un namespace\n"},"Unity/1--Conceptos-generales/Orden-de-ejecución-de-los-scripts":{"title":"Orden de ejecución de los scripts","links":[],"tags":[],"content":"\nHay que acceder al menú Script Execution Order que está en Edit &gt; Project Settings\n\nBibliografía\nman.hubwiz.com/docset/Unity_3D.docset/Contents/Resources/Documents/docs.unity3d.com/Manual/class-MonoManager.html"},"Unity/1--Conceptos-generales/Pipelines":{"title":"Pipelines","links":[],"tags":[],"content":"HDRP vs URP vs LWRP\nHDRP vs URP\nHDRP (High Definition Render Pipeline) hiperrealista revientaordenadores\nURP (Universal Render Pipeline) Siendo más modesto, permite el uso de brillos y cosas chachis\nLWRP (Light Weight Render Pipeline) Para juegos móviles"},"Unity/1--Conceptos-generales/Qué-significa-exactamente-serializar":{"title":"Qué significa exactamente serializar","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/1--Conceptos-generales/Sprite-vs-Texture":{"title":"Sprite vs Texture","links":[],"tags":[],"content":"Textura\nUna textura es una imagen que se muestra en la superficie de un modelo mediante un material y un shader.\n\nSprite\nUn sprite por contra es un objeto gráfico 2D que utiliza una textura. Se puede ver como un GameObject una maya plana en la cual se aplican texturas.\nLos sprites se renderizan mediante un componente Sprite renderer.\n\nBibliografía\ngyanendushekhar.com/2018/04/14/difference-between-texture-and-sprite-unity/#:~:text=Sprites%20are%202D%20graphic%20objects,like%20any%20other%20game%20objects."},"Unity/10--Multiplayer/Ejemplo-Multiplayer-Snake":{"title":"Ejemplo Multiplayer Snake","links":["tags/CambiarURL","Unity/10--Multiplayer/Ejemplo-Multiplayer-Snake","Unity/10--Multiplayer/Networking---Netcode-for-GameObjects-(NGO))"],"tags":["CambiarURL"],"content":"Explicación del proyecto\nEsta actualización (abril del 2023) está basada en el vídeo de youtube que sale en la bibliografía. Se trata de un proyecto 2D clon de Slither.io: El Snake de toda la vida pero multijugador.\nLa versión anterior de esta guía era sobre un juego 3D, y creo que la complejidad que añade no merece la pena\nEsto creo que es lo que ofrece Unity (no sé si es de pago)\n\n\nPara ver la instalación del entorno multiplayer incluído los requisitos y el ParrelSync, puedes visitar la subpágina de Instalación entorno multiplayerCambiarURL\nDesarrollo del programa\nNetworkManager\nLo primero que vamos a crear es un Network Manager la interfaz para crear un servidor, host o cliente, también se encargará de gestionar un poco todo el tema redes y de spawnear personajes y demás\nCreamos un GameObject con el componente NetworkManager\n\nEn ese mismo GO, abajo, tenemos que seleccionar UnityTransport (el año pasado poníamos UNetTransport, ni idea de la diferencia - aunque sospecho que Unity Transport es para conectarse a UGS (Unity Gaming Services)). Según acabo de leer, UNet está deprecated\n\n\n                  \n                  Info extra que puedes saltar \n                  \n                \n\nEste es el que envía los paquetes, y aquí podremos definir qué tamaño máximo tienen los packs, el tiempo en el que te echa (timeout), heartbeat timeout (que mide si sigues activo) entre otras\n\n\nAquí puedes configurar también la ip y puerto y simular ping, jitter hacer una variación aleatoria y demás cosas de debug\nPara configurar por código la ip\nUnityTransport ut = NetworkManager.Singleton.GetComponent&lt;UnityTransport&gt;();\nut.ConnectionData.Address = &quot;127.0.0.1&quot;; //localhost\nut.SetConnectionData(&quot;127.0.0.1&quot;, 7777);\nComprueba en el NetworkManager que tiene activado Enable Scene Management en caso contrario, tendrás que gestionar las escenas manualmente (no estoy seguro qué significa exactamente)\n\nEl GO que manejará el jugador va en Player Prefab y todos los GO que deberán ser sincronizados (monedas, puertas, botones, etc, incluído el Player Prefab) \n\n\n                  \n                  DIFERENCIA CON VIDEO \n                  \n                \n\nDeberán ir en una lista dentro de un .asset. Puedes crear tantas listas como quieras.\n\n\n\nDentro del .asset se ve tal y como era antes, un array normal y corriente llamado Network Prefabs.\n\nTick Rate es cada cuánto se ejecuta el Network Manager y, por tanto, envía info a los clientes. Cada cuanto se actualiza el estado del juego. Cuanto más alto, más suave irá, pero mejor internet y PC necesitas.\nEnsure Network Variable Length Safety sirve para posible errores de escritura accidental del cliente, requiere + CPU pero te podría salvar si lo necesitas\n\nPara iniciar el servidor deberás dar Play y luego a Start Host\n\nPlayer Prefab (Network Object)\nCreamos un prefab de jugador, que será el personaje que hará spawn cada vez que alguien se conecte\nLe añadimos NetworkObject. Este componente se lo pondremos a todos los objetos que serán sincronizados (los que iban en la lista Network Prefabs dentro del GO NetworkManager explicado en el punto anterior)\nAlways Replicate As Root - Importante - Creo haber entendido que, si lo activas, los hijos de este Prefab no seguirán al padre como normalmente hacen, sino que seguirán el sistema de coordenadas del mundo.\nDont Destroy With Owner - Si el padre es destruído, el transform de sus hijos pasará al servidor\nAuto Object Parent Sync - sincronizará los movimiento con los del padre\nPlayer GO\n\nCódigo\nPlayerController (p1) (OnNetworkSpawn)\nVamos a crear un script llamado PlayerController\nLo primero que debemos hacer es cambiar de MonoBehaviour a NetworkBehaviour básicamente es MonoBehaviour pero con cosas de Network. Luego se ha desarrollado el movimiento de forma típica en Unity. La única particularidad es que en lugar de Start, se ha usado OnNetworkSpawn (Explicado en el comentario del código)\nPara ver cómo proceder, vamos a hacer un ejemplo de movimiento TEMPORAL en el que la posición se maneje Client authoritative (concepto que vimos en las definiciones) porque es más easy de entender de entrada\n\n\n                  \n                  Este código está incompleto (completo más abajo) \n                  \n                \n\nusing Unity.Netcode;\nusing UnityEngine;\n \npublic class PlayerController : NetworkBehaviour\n{\n    private Camera _mainCamera;\n    [SerializeField] private float speed = 3f;\n    private Vector3 _mouseInput;\n \n    public override void OnNetworkSpawn()\n    {\n        base.OnNetworkSpawn();\n        // Initialize lo hacemos en OnNetworkSpawn y no en Start ya que\n        // OnNetworkSpawn a veces ocurre antes de Start, entonces para que\n        // cuando se ejecute Update, estemos seguros de tener la ref de la cam\n        Initialize();\n    }\n \n    public void Initialize() {\n        _mainCamera = Camera.main;\n    }\n \n    private void Update() {\n        if (!Application.isFocused) return;\n        Vector3 mouseWorldCoordinates = Movement();\n        Rotation(mouseWorldCoordinates);\n    }\n \n    private Vector3 Movement() {\n        _mouseInput.x = Input.mousePosition.x;\n        _mouseInput.y = Input.mousePosition.y;\n        _mouseInput.z = _mainCamera.nearClipPlane;\n        Vector3 mouseWorldCoordinates = _mainCamera.ScreenToWorldPoint(_mouseInput);\n        transform.position = Vector3.MoveTowards(transform.position, mouseWorldCoordinates, Time.deltaTime * speed);\n        return mouseWorldCoordinates;\n    }\n \n    private void Rotation(Vector3 mouseWorldCoordinates) {\n        if (mouseWorldCoordinates != transform.position)\n        {\n            Vector3 targetDirection = mouseWorldCoordinates - transform.position;\n            transform.up = targetDirection;\n        }\n    }\n}\nLo comentado en el comentario del código, en la parte de OnNetworkSpawn es por esto\n\nPodemos ver el problema de este código. Y es que ambos, el cliente y el servidor están respondiendo al mismo input.\n\nEl otro problema que podemos apreciar es que cuando jugamos en el cliente, no se actualiza en el host, ya que el cliente no está enviando su posición. Se mueve de forma local. Para transferir la posición se utiliza Network Transform\n\nNetwork Transform\nPermiten transferir automaticamente la posición, rotación y escala al server (imagino que de los Network Objects) y solo funciona para Server Authoritative.\n\nPara Client Authoritative (que es el caso que estamos desarrollando temporalmente) se usa Client Network Transform. Que tendrías que descargar manualmente desde este enlace y ponerlo con Add from git URL. Además de Client Network Transform. Trae otros scripts como animaciones para Client Authoritative entre otras\nHemos sacado de la sincronización todos los valores que no son necesarios para hacer las peticiones más ligeras y tenemos que asegurarnos que Interpolate esté activado\nLos Threshold solo envían info si se ha movido cierta cantidad de espacio. Esto es útil para optimizar la cantidad de info que mandamos, si el juego es muy de precisión se pone más bajo y da un poco igual, pues se puede ir subiendo. Si es un juego de carreras, como se mueven rápido, no hace falta que estés enviando info como milimetro. Depende mucho del juego\nIn Local Space - Por defecto se envía en las coordenadas del mundo, si quieres que sean en local debes activar esta casilla\nPlayerController (p2) (IsOwner)\nPara arreglar que cada cliente pueda controlar a su prefab y solo a su prefab, NetworkBehaviour provee varias propiedades. En este caso necesitamos IsOwner. Es decir, si el dueño de este Prefab es tu cliente, tú controlas a este prefab. Easy\nEn este caso, como lo que vamos a hacer es un return, entonces si !IsOwner, pues no lo controlar\nPlayerController.cs\n\nAhora sí está completo (recuerda arrastrar a tu prefab de jugador!)\nRecuerda también que para poder probar, debes estar en play y clicar en Start Host en el Network Manager\nusing Unity.Netcode;\nusing UnityEngine;\n \npublic class PlayerController : NetworkBehaviour\n{\n    private Camera _mainCamera;\n    [SerializeField] private float speed = 3f;\n    private Vector3 _mouseInput = Vector3.zero;\n \n    public override void OnNetworkSpawn()\n    {\n        base.OnNetworkSpawn();\n        // Initialize lo hacemos en OnNetworkSpawn y no en Start ya que\n        // OnNetworkSpawn a veces ocurre antes de Start, entonces para que\n        // cuando se ejecute Update, estemos seguros de tener la ref de la cam\n        Initialize();\n    }\n \n    public void Initialize() {\n        _mainCamera = Camera.main;\n    }\n \n    private void Update() {\n        if (!IsOwner || !Application.isFocused) return;\n        Vector3 mouseWorldCoordinates = Movement();\n        Rotation(mouseWorldCoordinates);\n    }\n \n    private Vector3 Movement() {\n        _mouseInput.x = Input.mousePosition.x;\n        _mouseInput.y = Input.mousePosition.y;\n        _mouseInput.z = _mainCamera.nearClipPlane;\n        Vector3 mouseWorldCoordinates = _mainCamera.ScreenToWorldPoint(_mouseInput);\n        mouseWorldCoordinates.z = 0f;\n        transform.position = Vector3.MoveTowards(transform.position, mouseWorldCoordinates, Time.deltaTime * speed);\n        return mouseWorldCoordinates;\n    }\n \n    private void Rotation(Vector3 mouseWorldCoordinates) {\n        if (mouseWorldCoordinates != transform.position)\n        {\n            Vector3 targetDirection = mouseWorldCoordinates - transform.position;\n            targetDirection.z = 0f;\n            transform.up = targetDirection;\n        }\n    }\n}\nLa mentalidad a la hora de desarrollar un juego multijugador es la siguiente:\nTodo codigo se está ejecutando en tu mismo ordenador de forma local, pero las diferentes instancias reciben información diferente (analicemos la imagen)\nEste supuesto está desde el punto de vista de Client1: Para client 1, el script que ha spawneado al entrar en el servidor (referenciado como “client1” bajo el engranaje) tendrá IsOwner = true, mientras que los de client2 y server serán false.\nPor otra parte tenemos que IsServer será solo true, en aquel dispositivo que sea server. Easy\n\nNetwork Animator\nLógicamente sirve para sincronizar animaciones\nSincroniza el Animator (el cual tiene como requisito) así que easy\nPlayer GO\n\nPlayerLength (Network Variable - Metodo de Servidor y réplica en clientes)\nAhora queremos que la serpiente pueda crecer y que los demás clientes puedan ver nuestra longitud. Pero claro, si hacemos que cada circulito nuevo debe transmitir su posición, estaremos enviando muchísima información. Es más óptimo enviar la info solo de la posición de la cabeza y la longitud de la serpierte y que cada cliente haga sus cálculos\nLos Network Variable envían la info a todas las instancias automáticamente, por lo que no hace falta que hagamos RPC (Remote Procedure Call) para actualizar los valores, nos podemos suscribir a los cambios (eventos) y debe ser instanciadas dentro de NetworkBehaviour\n\n\n                  \n                  Este script va en player y necesita un circle collider2D \n                  \n                \n\nusing System;\nusing System.Collections.Generic;\nusing Unity.Netcode;\nusing UnityEngine;\n \npublic class PlayerLength : NetworkBehaviour\n{\n    [SerializeField] private GameObject _tailPrefab;\n    // short porque 16 bits son más que sufi\n    // y u porque será siempre positivo.\n    // Ambos por razones de optimización de mensajes\n    public NetworkVariable&lt;ushort&gt; length = new (1); // Contando la cabeza | Server authoritative por defecto\n    /*public NetworkVariable&lt;ushort&gt; length = new(1, NetworkVariableReadPermission.Everyone, \n        NetworkVariableWritePermission.Owner);*/ // Lo hemos convertido en Client authoritative\n    private List&lt;GameObject&gt; _tails = new List&lt;GameObject&gt;();\n    private Transform _lastTail;\n    private Collider2D _collider2D;\n \n    public override void OnNetworkSpawn()\n    {\n        base.OnNetworkSpawn();\n        _tails = new List&lt;GameObject&gt;();\n        _lastTail = transform;\n        _collider2D = GetComponent&lt;Collider2D&gt;();\n        // Esta función es para que se actualice en los clientes.\n        // El servidor no debe ejecutarlo, porque ya lo está ejecutando\n        if (!IsServer) length.OnValueChanged += LengthChanged;\n    }\n \n    // Solo ejecutado por el cliente, esto son instanciará en los clientes\n    // las partes de cola que añada el servidor\n    private void LengthChanged(ushort previousValue, ushort newValue)\n    {\n        print(&quot;LengthChanged&quot;);\n        InstantiateTail();\n    }\n \n    // Solo ejecutado por el servidor porque length es server authoritative\n    [ContextMenu(&quot;Add length&quot;)]\n    public void AddLength()\n    {\n        length.Value++;\n        InstantiateTail();\n    }\n \n    private void InstantiateTail()\n    {\n        GameObject tailGO = Instantiate(_tailPrefab, transform.position, Quaternion.identity);\n        tailGO.GetComponent&lt;SpriteRenderer&gt;().sortingOrder = -length.Value;\n        if (tailGO.TryGetComponent(out Tail tail) )\n        {\n            tail.networkOwner = transform;\n            tail.followTransform = _lastTail.transform;\n            _lastTail = tailGO.transform;\n            Physics2D.IgnoreCollision(tailGO.GetComponent&lt;Collider2D&gt;(), _collider2D);\n        }\n        _tails.Add(tailGO);\n    }\n}\nTail\nConsiste en un script de que sigue a la anterior parte, para crear un efecto de cadena con la cola de la serpiente\n\n\n                  \n                  Nada multiplayer \n                  \n                \n\nusing UnityEngine;\n \npublic class Tail : MonoBehaviour\n{\n    public Transform followTransform;\n    public Transform networkOwner;\n    [SerializeField] private float moveStep = 10f;\n    [SerializeField] private float timeDelay = 0.1f;\n    [SerializeField] private float distance = 0.3f;\n \n    private Vector3 _targetPosition;\n \n    private void Update()\n    {\n        _targetPosition = followTransform.position - followTransform.forward * distance;\n        _targetPosition += (transform.position - _targetPosition) * timeDelay;\n        _targetPosition.z = 0;\n        transform.position = Vector3.Lerp(transform.position, _targetPosition, Time.deltaTime * moveStep);\n    }\n}\nFood (Despawn)\nEsto será el elemento que comerán las serpientes y hará que se alargue la cola\nusing Unity.Netcode;\nusing UnityEngine;\n \npublic class Food : NetworkBehaviour\n{\n    public GameObject prefab;\n    private void OnTriggerEnter2D(Collider2D collision)\n    {\n        if (!collision.CompareTag(&quot;Player&quot;)) return;\n \n        if (!NetworkManager.Singleton.IsServer) return; // Solo el servidor puede llamar a AddLength\n \n        if (collision.TryGetComponent(out PlayerLength playerLength))\n        {\n            playerLength.AddLength();\n        }\n        // A pesar de lo que dice la chica en el vídeo, esto no hace falta, ya que Despawn ya hace el efecto y se replica a los clientes\n        //NetworkObjectPool.Singleton.ReturnNetworkObject(NetworkObject, prefab);\n        NetworkObject.Despawn(); // Este NetworkObject se refiere al propio Food, no a la clase\n    }\n}\n\n\n                  \n                  Ten en cuenta \n                  \n                \n\nElla le pone al prefab de food Rigidbody con masa y gravedad = 0 y congeladas las variables de pos y rotacion. Yo lo tengo en Player\nNecesita también un collider 2d\n\n\nFood Spawner (Pool de NetworkObjects)\nEl código de la pool lo coge de este enlace de Unity pero lo puedes descargar también de mi Drive\nAl añadirlo preguntará si queremos añadir Network Object, le decimos sí\nAñadimos un elemento a la lista, que contendrá nuestro prefab pooleado.\n\n\n                  \n                  Prewarm es cuántas instancias queremos que haya en la pool \n                  \n                \n\nPool Manager GO\n\nUI\n\n\n                  \n                  Código en el canvas \n                  \n                \n\nResponde a un evento lanzado en PlayerLength cada vez que crece (LengthChanged)\nUIPlayerStats.cs\n[SerializeField] private TMP_Text text;\nprivate void OnEnable()\n{\n    PlayerLength.ChangedLengthEvent += PlayerLength_ChangedLengthEvent;\n}\n \nprivate void OnDisable()\n{\n    PlayerLength.ChangedLengthEvent -= PlayerLength_ChangedLengthEvent;\n}\n \nprivate void PlayerLength_ChangedLengthEvent(ushort obj)\n{\n    text.text = obj.ToString();\n}\nAudio\nPara hacer esta parte ha decidido usar el patrón Singleton basado en un código polimórfico disponible en github o en mi Drive\n\n\n                  \n                  Sin multiplayer \n                  \n                \n\nusing UnityEngine;\n \n[RequireComponent(typeof(AudioSource))]\npublic class ClientSoundPlayer : Singleton&lt;ClientSoundPlayer&gt;\n{\n    private AudioSource _audioSource;\n    [SerializeField] private AudioClip _audioClip;\n    public override void Awake()\n    {\n        base.Awake();\n        _audioSource = GetComponent&lt;AudioSource&gt;();\n        _audioSource.clip = _audioClip;\n    }\n \n    public void PlaySound()\n    {\n        _audioSource.Play();\n    }\n}\nDesde LengthChanged, llamamos a ClientSoundPlayer.Instance.PlaySound()\nSolo lo oye el que come, ya que LengthChanged la ejecuta la parte de LengthChanged que es Owner\n\n\n                  \n                  Este sí tiene código multiplayer \n                  \n                \n\nPlayerLength.cs\nprivate void LengthChanged(ushort previousValue, ushort newValue)\n{\n    print(&quot;LengthChanged&quot;);\n    InstantiateTail();\n \n    if (!IsOwner) return;\n    ClientSoundPlayer.Instance.Play();\n    if (ChangedLengthEvent != null)\n        ChangedLengthEvent.Invoke(length.Value);\n}\nPlayer Collision (ServerRPC y ClientRPC)\nEn este paso vamos a cambiar a lo que haga falta a Server Authoritative y veremos la autorización de conexión (connection approval)\nSupongamos que el cliente1 hace una llamada en local a OnCollisionEnter y, en lugar de ver quién ha ganado en el cliente, le pedimos al servidor que lo aclare, porque queremos que sea Server Authoritative, que esté a cargo. Y el cliente no pueda hacer trampichuelas.\nPara ello necesitamos RPC (Remote Procedure Call) y quiere decir que es una llamada del cliente pero que se ejecuta en el servidor una vez determina quién ha ganado, lo comunica a los clientes mediante ClientRPC que es llamado por el servidor pero ejecutado en los clientes\nUna forma de entenderlo es pensar que lo que ponga delante de RPC, es quien se encarga de ejecutar. Lo opuesto, es quien hace la llamada. De esta forma ClientRPC, lo ejecuta el cliente y lo llama el server\n\nPor defecto ClientRPC se ejecuta en todos los clientes\nSin embargo, un cliente puede mandar un mensaje a través del servidor a un(os) cliente(s) concreto(s) mediante las ClientRpcParams\n\nEl método debe estar etiquetado con [ServerRpc] / [ClientRpc] y el nombre debe acabar también en MetodoServerRpc o MetodoClientRpc para que sean válidos (respetando las mayús)\n\n\n                  \n                  El struct que se muestra en el código lo creamos un poco más adelante \n                  \n                \n\nPlayerController.cs\nprivate void OnCollisionEnter2D(Collision2D collision)\n{\n    print(&quot;Player collision with &quot; + collision.transform.name);\n    if (!collision.gameObject.CompareTag(&quot;Player&quot;)) return;\n    print(&quot;Is player&quot;);\n    if (!IsOwner) return;\n \n    //Head-Collision\n    if (collision.gameObject.TryGetComponent(out PlayerLength playerLength) {\n        var player1 = new PlayerData()\n        {\n            Id = OwnerClientId,\n            Length = _playerLength.length.Value\n        };\n        var player2 = new PlayerData()\n        {\n            Id = playerLength.OwnerClientId,\n            Length = playerLength.length.Value\n        };\n        DetermineCollisionWinnerServerRpc(player1, player2);\n    }\n}\nLa info que puedes transmitir por este tipo de métodos tiene que ser una de las siguientes: primitivas de C# o Unity y datos serializados que implementen la interfaz INetworkSerializable.\nEs decir, por defecto:\n\nprimitivas C#: bool, char, sbyte, byte, short, ushort, int, uint, long, ulong, float, double y string\nprimitivas Unity: Color, Color32, Vector2, Vector3, Vector4, Quaternion, Ray, Ray2D\nEnums, Arrays de tipos primitivos\n\nAmpliable con INetworkSerializable\n\nEjemplo de implementación de struct con INetworkSerializable \nPero vamos a hacer uno propio\n\nPlayerController.cs\nstruct PlayerData : INetworkSerializable\n{\n    public ulong Id;\n    public ushort Length;\n \n    public void NetworkSerialize&lt;T&gt;(BufferSerializer&lt;T&gt; serializer) where T : IReaderWriter\n    {\n        serializer.SerializeValue(ref Id);\n        serializer.SerializeValue(ref Length);\n    }\n}\nMétodos para victoria y derrota\nPlayerController.cs\n[ClientRpc]\nprivate void AtePlayerClientRpc(ClientRpcParams cParams = default)\n{\n    if (!IsOwner) return;\n    print(&quot;You ate a player&quot;);\n}\n[ClientRpc]\nprivate void GameOverClientRpc(ClientRpcParams cParams = default)\n{\n    if (!IsOwner) return;\n    print(&quot;You lose!&quot;);\n    NetworkManager.Singleton.Shutdown();\n}\nLos métodos anteriores serán llamados por este. Este a su vez es llamado por DetermineCollisionWinnerServerRpc (definición justo abajo)\nUtilizamos el parámetro Send porque queremos que el servidor envíe el mensaje a este cliente en concreto\nPlayerController.cs\n[ServerRpc]\nprivate void WinnerInformationServerRpc(ulong winner, ulong loser)\n{\n    _targetClient[0] = winner;\n    _cParams.Send.TargetClientIds = _targetClient;\n    AtePlayerClientRpc(_cParams);\n \n    _targetClient[0] = loser;\n    _cParams.Send.TargetClientIds = _targetClient;\n    GameOverClientRpc(_cParams);\n}\nEl curso de llamadas es \n1. DetermineCollisionWinnerServerRpc\n2. WinnerInformationServerRpc\n3. AtePlayerClientRpc / GameOverClientRpc\nPlayerController.cs\n[ServerRpc]\nprivate void DetermineCollisionWinnerServerRpc(PlayerData p1, PlayerData p2)\n{\n    if (p1.Length &gt; p2.Length)\n    {\n        WinnerInformationServerRpc(p1.Id, p2.Id);\n    }\n    else\n    {\n        WinnerInformationServerRpc(p2.Id, p1.Id);\n    }\n}\nDestrucción de la cola cuando pierdes (OnNetworkDespawn)\npublic override void OnNetworkDespawn()\n{\n    base.OnNetworkSpawn();\n    DestroyTails();\n}\n \nprivate void DestroyTails()\n{\n    while ( _tails.Count &gt; 0 )\n    {\n        GameObject tail = _tails[0];\n        _tails.RemoveAt(0);\n        Destroy(tail, 0.1f);\n    }\n}\nUI local (cuando pierdes)\nSimplemente hace un canvas desactivado que ejectuando un evento en PlayerController.GameOverClientRcp se active\nNota\nHay ciertos bugs que va solucionando pero que no tienen que ver con el multi, así que en bibliografía está el vídeo si fuese necesario\nPlayerController (p3) Convertir el movimiento de Client Authoritative a Server Authoritative\nLo primero será cambiar ClientNetworkTranform ya que es Client Authoritative por NetworkTranform\nY luego pasamos el movimiento al servidor mediante ServerRpc, así, sin más. Creo que es gracias al NetworkTransform\nAutorización de conexión (Connection Approval)\nDebes activar la opción Connection Approval y recomendable aumentar un poco el tiempo límite de conexión del cliente (Client Connection Buffer Timeout) porque por defecto son unos ridículos 10 segundos\n\nEste código va en un nuevo GO. Yo lo he llamado Connection Handler\nusing Unity.Netcode;\nusing UnityEngine;\n \npublic class ConnectionApprovalHandler : MonoBehaviour\n{\n    private const int maxPlayers = 10;\n \n    private void Start()\n    {\n        NetworkManager.Singleton.ConnectionApprovalCallback += ApprovalCheck;\n    }\n \n    private void ApprovalCheck(NetworkManager.ConnectionApprovalRequest request, \n        NetworkManager.ConnectionApprovalResponse response)\n    {\n        // Obligatorio: por defecto está aceptado, luego veremos si no\n        response.Approved = true;\n \n        // Obligatorio: Sirve para el jugador y demás NetworkObjects puedan hacer Spawn\n        // lo sé, no tiene mucho sentido\n        response.CreatePlayerObject = true;\n        response.PlayerPrefabHash = null;\n \n        // Opcional: limitamos a x número de clientes\n        if (NetworkManager.Singleton.ConnectedClients.Count &gt;= maxPlayers)\n        { \n            response.Approved = false;\n            response.Reason = &quot;Cap limit reached :(&quot;;\n        }\n \n        // Obligatorio: \n        response.Pending = false;\n    }\n}"},"Unity/10--Multiplayer/Instalación-entorno-multiplayer":{"title":"Instalación entorno multiplayer","links":[],"tags":[],"content":"Instalación\nRequisitos\n\n\nUnity 2020.3 o superior \n\n\nMono y IL2CPP (por defecto). Windows, Mac, Linux, iOS, Android y WebGL. WebGL requiere NGO 1.3.0+ y UTP 2.0.0+\n\n\nEsta guía está hecha en base a\n\n\nUnity 2021.3.17\n\n\nNGO 1.4.0\n\n\nParrelSync 1.5.1\n\n\nModo Package Manager\nDesde el panel Package Manager (Windows/Package Manager) busca he instala Netcode for GameObjects. Asegúrate de tener seleccionado el filtro “Unity Registry” en la barra superior.\nInstalaciones addicionales:\n\n\nUnity Transport\n\n\nMultiplayer Tools\n\n\nModo Package Manager (Obsoleto)\n\n\n                  \n                  Obsoleto \n                  \n                \n\nLa forma más fácil sería desde el Package Manager (&quot;Window/Package Manager&quot; en la barra de tareas):\nPulsar el botón + de la ventana. Seleccionar “Add package by name” y escribie com.unity.netcode.gameobjects, después pulsar Add. \nEn caso de no tener la opción usar “Add package git URL” con la dirección github.com/Unity-Technologies/com.unity.netcode.gameobjects\nInstalaciones addicionales:\n\n\ncom.unity.transport\n\n\ncom.unity.multiplayer.tools\n\n\n&gt;= 2021\n\n&lt; 2021\n\n\nPuede que salga este error. Simplemente da OK y reinicia, es normal.\n\nModo Proyecto\nOtra forma más complicada (podría estar obsoleto) sería descargar este repositorio:\ngithub.com/Unity-Technologies/com.unity.netcode.gameobjects\nY desde tu proyecto importar un par de packages:\nNetcode y Unity Transport\nPara importarlos deberemos ir a Package Manager.\n\n\nEste es el repo que acabamos de descargar. Habrá que importar la carpeta que pone com.unity.netcode.gameobjects\n\nEl otro paquete está todavía más escondido, está en la misma carpeta que el de antes, pero hay que entrar además en testproyect &gt; Library &gt; PackageCache e importar el que dice com.unity.transport@1.0.0 (o la versión que sea)\n\nParrel Sync\nPara hacer pruebas tú mismo, puedes abrir varias instancias de Unity utilizando Parrel Sync.\nPara hacer esto más cómodo en el futuro, Unity está creando una herramienta llamada MPPM (MultiPlayer Play Mode). La chica del vídeo, no lo recomienda todavía.\nUnity en su guía recomienda hacer backups antes de instalar.\nEl código (y su manual) están disponibles en Github en mi Drive puedes encontrar la versión 1.5.1 (usada en este manual)\n"},"Unity/10--Multiplayer/Networking---Netcode-for-GameObjects-(NGO))":{"title":"Networking - Netcode for GameObjects (NGO))","links":["tags/CambiarURL","tags/NetworkManager","tags/NetworkObject","tags/NetworkTransform","tags/NetworkAnimator"],"tags":["CambiarURL","NetworkManager","NetworkObject","NetworkTransform","NetworkAnimator"],"content":"\n\n                  \n                  Actualizado a Abril de 2023 \n                  \n                \n\nPara la versión (todavía más) antigua, click aquí\n\n\n                  \n                  Ten en cuenta que en una versión más antigua era lo siguiente. Estos conceptos pueden estar todavía en vigor \n                  \n                \n\nTodo aquel GameObject que quisieramos que el servidor conozca, debía tener un NetworkIdentity\nNetworkBehaviour añadía a MonoBehaviour las cualidades de red como la variable isLocalPlayer\nisLocalPlayer aparentemente venía dado por el NetworkIdentity y servía para discriminar tu\ninstancia de jugador de la del resto de jugadores\n\n\nCosas muy comunes\nEncontrar a un player\n\n\n                  \n                  Solo servidor \n                  \n                \n\nNetworkManager.Singleton.ConnectedClients[clientId].PlayerObject;\n\n\n                  \n                  Solo servidor \n                  \n                \n\nSi quieres obtener el tuyo (Owner)\n\n\nNetworkManager.Singleton.ConnectedClients[NetworkManager.Singleton.LocalClientId].PlayerObject;\n\n\n                  \n                  Apto para ambos \n                  \n                \n\nNetworkManager.LocalClient.PlayerObject \nNetworkManager.Singleton.LocalClient.PlayerObject\nNetworkManager.Singleton.SpawnManager.GetLocalPlayerObject()\nEncontrar a un NetworkObject spawneado\nNetworkManager.Singleton.SpawnManager.SpawnedObjects[zombie.NetworkObjectId]\nInicialización de un NetworkObject (NetworkBehaviour NetworkPlayer, Player, Spawn)\nHay que fijarse siempre en qué variables deben setearse para que corresponda con el estado real del resto de jugadores. Esto es, si tienes un NetworkVariable con el color. Debes aplicarselo al SpriteRenderer / Image. Por poner un ejemplo\nif (!IsOwner)\n{\n    // At initialization, if not Owner, It&#039;s because it&#039;s rest of players\n    // therefore simply set their colour\n    _timeIndicator.color = _color.Value;\n    return;\n}\n\n\n                  \n                  Atención \n                  \n                \n\nSuscribirse a los cambios de la NetworkVariable lo tienen que hacer todos\n\n\nTengo un problema\nRecopilación de las soluciones a los problemas que me he ido encontrando\nNetworkConfig mismatch. The configuration between the server and client does not match.\nCreo que es un bug de ParrelSync, reinicia los dos editores y debería ir todo bien. Sino, tengo la sospecha de que podría tener que ver con el instanceID de los NetworkManager (se puede ver con el inspector en modo debug): En plan que deben tener el mismo valor y pone uno distinto\nA Native Collection has not been disposed, resulting in a memory leak. (Keywords: lista array)\nSi te lo dice en una NetworkList, es probable que la hayas inicializado junto a la declaración. es decir:\nprivate NetworkList&lt;AreaWeaponBooster&gt; TeamAreaWeaponBoosters = new NetworkList&lt;AreaWeaponBooster&gt;();  \nDe hecho, parece que el único sitio donde puedes inicializarlo es en el Awake\nAl intentar añadir un elemento a la NetworkList me da NullReferenceException\nEso probablemente se deba a que estás creando la NetworkList dentro de un objeto que no es NetworkBehaviour. Es obligatorio que tanto las NetworkVariable como las NetworkList existan en clases NetworkBehaviour.\nEn su momento encontré que podía hacer la siguiente ñapa, pero no funciona porque no se actualizará en los clientes. Para solucionarlo tienes que ejecutar Initialize() en la recién instanciada lista y pasarle una instancia de NetworkBehaviour por argumento\nvar _monsterList = new NetworkList&lt;MonsterData&gt;();\n_monsterList.Initialize(this); // this asumiendo que estás inicializandolo en una clase NetworkBehaviour\nMi NetworkList dentro de un objeto se actualiza en el servidor pero no en el cliente\nMismo problema que el anterior: Es obligatorio que toda NetworkVariable y NetworkList estén dentro de un NetworkObject.\nAl emparentar un NetworkObject a un GameObject me da error: InvalidParentException: Invalid parenting, NetworkObject moved under a non-NetworkObject parent\nProbablemente lo que pase es que debes quitar el check de Auto Object Parent Sync del componente NetworkObject\nCuando hago Spawn de un GameObject con Image no se ve aunque tiene Width y Height en el RectTransform\nEs un bug. Seguramente te haya puesto la escala a 0\ntransform.localScale = Vector3.one\nMi ClientRpc no llega a todos los clientes\nEsto podría ser porque el cliente que no ha recibido el mensaje, todavía no se había unido a la partida. Entonces sí debería llegar, pero no a este cliente que estaba ausente\nDefiniciones\nAuthoritative\nes quien tiene la última palabra, el que manda en un sistema\nServer authoritative\n\n\n                  \n                  Por defecto en Unity \n                  \n                \n\nEsto quiere decir que es el server el que toma todas la decisiones, la parte negativa es que siempre habrá que esperar a la respuesta del servidor para todo\nClient authoritative\nEl cliente más o menos decide lo que hacer y manda la info al servidor, y como que deja al servidor la resposabilidad de si quiere o no transmitir la info. La parte negativa de este enfoque es que es más complicada mantener la consistencia y es más peligroso porque es más fácil de hackear\nLatencia\nEl retraso cuando transmites un mensaje, debido a la distancia que tiene que viajar. Soluciones:\n\nInterpolación - Hacer más suave gracias a funciones matemáticas en el cliente. Ejemplo: El server va mandando posiciones: En lugar de que parezca que se teletransporta, se hace una transición entre cada punto\n\nNGO Está pensado para juegos simples. Si necesitas calculo de físicas o muchos jugadores mira Netcode for Entities para lo cual necesitará la movida del DOTSCambiarURL\n\n\n                  \n                  Para ver un proyecto de ejemplo, puedes visitar la subpágina \n                  \n                \n\nSnake MultiplayerCambiarURL\n\n\n\n\n                  \n                  Para ver la instalación del entorno multiplayer incluído los requisitos y el ParrelSync, puedes visitar la subpágina de \n                  \n                \n\nInstalación entorno multiplayerCambiarURL\n\n\nElementos imprescindibles / muy importantes:\nNetworkManager será el corazón del multiplayer. El que crea el servidor, el que une jugadores a la partida y maneja el transport. Más detalles en el proyecto de ejemploNetworkManager\nNetworkObject / NetworkBehaviour\nPermite que los elementos hagan Spawn. Más detalles en el proyecto de ejemploNetworkObjectCambiarURL\nNetworkTransform\nPermite sincronizar el movimiento del personaje entre todos los clientes simplemente asignandose en el servidor. Más detalles en el proyecto de ejemploNetworkTransformCambiarURL\nNetworkAnimator\nSincroniza las animaciones por todos los clientes. Más info en el proyecto de ejemploNetworkAnimatorCambiarURL\nNetworkObjectPool\nPor alguna razón este no viene por defecto pero lo puedes conseguir aquí. Nos permite gestionar NetworkObjects de forma eficiente.\nParrel Sync\nPara crear instancias, abrimos el Clones Manager\n\ny click\nSincroniza los cambios y va de lujo, pero hazlo pronto porque tarda mucho\n\nAsí se verán las instancias desde el menu Clones Manager\n\nEn este punto, al ejecutar el proyecto, la chica del vídeo le empezaron a salir errores del Burst Compiler, no sé si por el Parrel, pero dice que para resolverlo, solo hay que reiniciar Unity\nOrden de ejecución de los eventos en NetworkBehaviour\nLo comentado en el comentario del código, en la parte de OnNetworkSpawn es por esto\n\nMentalidad multijugador\nLa mentalidad a la hora de desarrollar un juego multijugador es la siguiente:\nTodo codigo se está ejecutando en tu mismo ordenador de forma local, pero las diferentes instancias reciben información diferente (analicemos la imagen)\nEste supuesto está desde el punto de vista de Client1: Para client 1, el script que ha spawneado al entrar en el servidor (referenciado como “client1” bajo el engranaje) tendrá IsOwner = true, mientras que los de client2 y server serán false.\nPor otra parte tenemos que IsServer será solo true, en aquel dispositivo que sea server. Easy\n\nObjetos transmitibles por métodos Rpc\nLa info que puedes transmitir por este tipo de métodos tiene que ser una de las siguientes: primitivas de C# o Unity y datos serializados que implementen la interfaz INetworkSerializable.\nEs decir, por defecto:\nprimitivas C#: bool, char, sbyte, byte, short, ushort, int, uint, long, ulong, float, double y string\nprimitivas Unity: Color, Color32, Vector2, Vector3, Vector4, Quaternion, Ray, Ray2D\nEnums, Arrays de tipos primitivos\nAmpliable con INetworkSerializable\nSin embargo hay una excepción y es que puedes pasar la referencia a un NetworkObject y a un NetworkBehaviour con NetworkObjectReference y NetworkBehaviourReference. También sirve para NetworkVariable. Info\nEjemplo de implementación de struct con INetworkSerializable \nPero vamos a hacer uno propio\n\nPlayerController.cs\nstruct PlayerData : INetworkSerializable\n{\n    public ulong Id;\n    public ushort Length;\n \n    public void NetworkSerialize&lt;T&gt;(BufferSerializer&lt;T&gt; serializer) where T : IReaderWriter\n    {\n        serializer.SerializeValue(ref Id);\n        serializer.SerializeValue(ref Length);\n    }\n}\nMetodos RPC vs NetworkVariable\nElegir el incorrecto puede llevar a bugs o a un uso excesivo del ancho de banda\nUsa RPC cuando sea info concreta del momento.\nUsa NetworkVariable para estados que perduran en el tiempo\nComo rule of thumb deberías preguntarte si un jugador que se conecta a mitad partida, tendría que saber cierta info concreta, en ese caso, mejor NetworkVariable, en caso contrario, RPC\nRelación entre llamadas y NetworkVariable, donde se ve que aunque hayan varios cambios, solo se envía el último antes del tick de envío\n\nRelación entre llamadas y métodos RPC, donde se ve que se envía por cada cambio y que si el otro jugador se conecta más tarde, se pierde los primeros eventos\n\nAdemás, las NetworkVariables son más óptimas en cuando a ancho de banda ya que se envían solo cuando el valor cambia.\nEntonces la pregunta es\n¿Por qué entonces no usamos siempre NetworkVariable?\nEventos temporales\nA parte de que las RPC son más simples (o eso dice la wiki) puedes necesitar eventos temporales. Solo para ese momento y ya. Como una explosión. Al explotar, el explosivo dejará de existir (también para los nuevos jugadores). Sin embargo, los efectos de la explosión podrían necesitar estar en NetworkVariables, si han herido a un jugador, si han creado algún efecto en las paredes y demás\nSincronización de varias NetVar / Eventos instantáneos\nComo los valores de las NetworkVariable se actualizan cuando pueden, podría ocurrir que una variable se actualizara a tiempo y otra no, cuando necesites que lleguen a tiempo, se debe usar RPC\nEjemplos de uso\nPara el input, mejor RPC\nPorque como NetVar actualiza solo el último valor, se vería laggeado. Lo que queremos es acribillar el servidor con nuestras input\nFlechas (en BossRoom)\nComo se usan GameObject independientes para las flechas y su movimiento no es rápido, decidieron replicar el movimiento con un NetworkTransform\nEstado rompible\n(Asumiendo que es un barril) En este caso, el equipo podría haber usado un método RPC y aplicar el efecto visual correspondiente, pero se aplicó la regla de que, “si el jugador entra a mitad, lo que debería ver es el barril roto”. Por lo que se puso un NetworkVariable que, al cambiar, se viera el efecto de rotura.\nAquí hay otra peculiaridad y es que el evento te devuelve el estado anterior y el actual, entonces podemos comprobar si antes ya estaba roto. Si no estaba roto y ahora lo está → efecto visual de romperse. Si ya estaba roto y está roto, no hacemos nada. Si estaba roto y ahora no lo está → efecto de repararse\nPublicar en los servicios de Unity y configurar Match making\nEasy Game Server Hosting and Matchmaking with Unity Tutorial\nIMPORTANTE Entender mejor la arquitectura multijugador\nPara entender mejor esta forma de pensar, me parece interesante el caso de esta persona en el foro de Unity\nEstá intentando reproducir el patrón Command aplicado a multijugador Server authoritative. Su problema radica en que como los métodos Rpc no pueden manejar tipos complejos, no puede pasar la Callback.\n\nAquí en el Update (ejecutado por el servidor) intenta ejecutar la callback\n\nSolución\nLa callback es una función (peticion) que está creada desde el cliente y pensada para que la ejecute el cliente. Por lo que, pensado desde el punto de vista multijugador, no tiene sentido mandarla al servidor, porque la tiene que ejecutar el cliente de todas formas. Por lo que la solución es crear otro método ClientRpc\n\npublic class UnitMovement : NetworkBehaviour\n{\n    private Vector3 _destination;\n    private Action _onMovementComplete;\n \n    private void Update()\n    {\n        // Only run this on Server as I am using default server authoritative NetworkTransform\n        if (!IsServer)\n            return;\n \n        // Update position each frame while calculating distance from destination...\n \n        // Destination reached... call the Action so our Unit knows to start the next one.\n        EndMovementClientRpc(new ClientRpcParams { Send = new ClientRpcSendParams { TargetClientIds = new ulong[] { OwnerClientId } } });\n    }\n \n    public void StartMovement(Vector3 destination, Action onMovementComplete)\n    {\n        _onMovementComplete = onMovementComplete;\n        StartMovementServerRpc(destination);\n    }\n \n    [ServerRpc]\n    public void StartMovementServerRpc(Vector3 destination)\n    {\n        _destination = destination;\n    }\n \n    [ClientRpc]\n    private void EndMovementClientRpc(ClientRpcParams clientRpcParams)\n    {\n        _onMovementComplete();\n    }\n}\nAhora en Update (que lo ejecuta el servidor) pide al cliente (un cliente concreto gracias al ClientRpcParams) que ejecute su callback\nEsa callback está asignada por el cliente (StartMovement que es local)\n\nPremisos de ejecución de un ServerRpc\nPor defecto, estos métodos solo los puede llamar el Owner, pero se le puede poner entre paréntesis de esta forma [ServerRpc(RequireOwnership = false)] (no es nuestro caso)\nEn tal caso, si necesitas saber quién ha llamado a esa función, se puede poner como parámetro ServerRcpParams params = default y después tomarlo con params.Receive.SenderClientId\n\n\n                  \n                  Ejemplo, no es nuestro caso \n                  \n                \n\n\n\n\nResumen\nEs obligatorio tener un NetworkManager\nTodo objeto spawneable por el servidor (incluídos player) deberán contener un NetworkObject y estar en una lista de Network Prefabs\nExisten dos aproximaciones a la ejecución de métodos (de los que se notifica cliente-servidor) a parte de local: client authoritative (el cliente manda, el servidor replica) y server authoritative (el cliente pide y el servidor provee)\nPuedes filtrar quién está ejecutando o no un método (dentro de un NetworkBehaviour) mediante IsClient IsServer o IsOwner.\n(Creo que) Tenemos dos formas de hacerlo: Ejemplo lo de calcular la comida\nServer Authoritative: Desde el script de fruta, con un OnTrigger, filtras que sea el servidor y mediante el collider tomas al jugador y sumas 1. Explicación: es el servidor quien ha hecho la acción y es el jugador el que recibe el efecto\nClient Authoritative: En el jugador pones el OnTrigger, filtras por IsOwner y te sumas 1. Los demás clientes se actualizan gracias a la suscripción al evento\nSi un enfoque como el que he presentado para Client Authoritative, lo queremos convertir a Server Authoritative, como está filtrado por Owner, tendremos que hacer un Rpc (aquí he tenido problemas por no saber hacer Despawn a Food)\nLas NetworkCosas se actualizan automáticamente entre todas las instancias\nANTIGUO HELPER\nPara crear los botones, la capacidad de conectarse (UI) y el movimiento dependiendo de cliente o servidor, creamos un GameObject con el siguiente código:\nusing Unity.Netcode;\nusing UnityEngine;\n \n    public class HelloWorldManager : MonoBehaviour\n    {\n        void OnGUI()\n        {\n            GUILayout.BeginArea(new Rect(10, 10, 300, 300));\n            if (!NetworkManager.Singleton.IsClient &amp;&amp; !NetworkManager.Singleton.IsServer)\n            {\n                StartButtons();\n            }\n            else\n            {\n                StatusLabels();\n \n                SubmitNewPosition();\n            }\n \n            GUILayout.EndArea();\n        }\n \n        static void StartButtons()\n        {\n            if (GUILayout.Button(&quot;Host&quot;)) NetworkManager.Singleton.StartHost();\n            if (GUILayout.Button(&quot;Client&quot;)) NetworkManager.Singleton.StartClient();\n            if (GUILayout.Button(&quot;Server&quot;)) NetworkManager.Singleton.StartServer();\n        }\n \n        static void StatusLabels()\n        {\n            var mode = NetworkManager.Singleton.IsHost ?\n                &quot;Host&quot; : NetworkManager.Singleton.IsServer ? &quot;Server&quot; : &quot;Client&quot;;\n \n            GUILayout.Label(&quot;Transport: &quot; +\n                NetworkManager.Singleton.NetworkConfig.NetworkTransport.GetType().Name);\n            GUILayout.Label(&quot;Mode: &quot; + mode);\n        }\n \n        static void SubmitNewPosition()\n        {\n            if (GUILayout.Button(NetworkManager.Singleton.IsServer ? &quot;Move&quot; : &quot;Request Position Change&quot;))\n            {\n                if (NetworkManager.Singleton.IsServer &amp;&amp; !NetworkManager.Singleton.IsClient)\n                {\n                    foreach (ulong uid in NetworkManager.Singleton.ConnectedClientsIds)\n                        NetworkManager.Singleton.SpawnManager.GetPlayerNetworkObject(uid).GetComponent&lt;PlayerMultiplayer&gt;().Move();\n                }\n                else\n                {\n                    var playerObject = NetworkManager.Singleton.SpawnManager.GetLocalPlayerObject();\n                    var player = playerObject.GetComponent&lt;PlayerMultiplayer&gt;();\n                    player.Move();\n                }\n            }\n        }\n    }\n    ``` \n \n# ¿Cómo funciona?\n \nLos cambios que deban ser realizados en el cliente (cambiar de color, cambiar un string, recibir un golpe y reducir vida), deben pasar necesariamente por el servidor. Para ello, el cliente hará una llamada a un método ServerRcp, que, una vez completado, deberá llamar a su vez a un método ClientRcp para que dicho cambio se replique en todos los demás clientes.\n \n```cs \n[ServerRpc]\nvoid SubmitPositionRequestServerRpc()\n{\n    Position.Value = GetRandomPositionOnPlane();\n    PositionChangedClientRpc(Position.Value);\n}\n \n[ClientRpc]\nvoid PositionChangedClientRpc(Vector3 pos)\n{\n    Position.Value = pos;\n    transform.position = Position.Value;\n}\nDe esta forma, podemos eliminar el Update que sale en el ejemplo de arriba\nEn el código de OnNetworkSpawn aparece IsOwner. Este IsOwner identifica si eres el jugador que acaba de entrar en la partida. Cada instancia del juego (la que ejecutas en tu ordenador, por ejemplo) contendrá una copia de todos los player que están jugando (habrá p.e. 3 instancias de player, tú solo controlas a uno, pero el resto está también a tu lado ejecutando su código correspondiente. Cuando entre alguien nuevo que no eres tú, ese IsOwner será true para él pero false para tí\nPara poder aplicar los cambios de los nuevos jugadores a los viejos, habrá que añadir un else a if (IsOwner) donde se aplique dicho cambio mediante una peti al servidor\nif (IsOwner)\n{\n    Move();\n} \nelse \n{\n  SubmitPositionRequestServerRpc();\n}\nLas NetworkList tienen que ser inicializadas antes de iniciar el Host o los clientes (es decir, antes de crear la partida o establecer la conexión)\nImportante! A tener en cuenta\nSi permitimos que entren una vez haya empezado la partida, deberemos de inicializar todos los datos que sean locales: en el ejemplo del Snake, qué longitud tienen el resto de jugadores. De lo contrario, al empezar todos parecerán ser de longitud 0\nLos métodos Rpc son TCP por defecto, si quieres más agilidad pero menos fiabilidad de que los paquetes lleguen, debes poner en el atributo del método lo siguiente\n[ServerRpc(Delivery = RpcDelivery.Unreliable)]\nEsto creo que está desactualizado, pero por si acaso. \nUn ejemplo de INetworkSerializable con el nombre de jugador, ya que un String no se puede (o podía) Serializar y para poder ponerle un par de cosillas extra\n/// &lt;summary&gt;\n    /// NetworkBehaviour containing only one NetworkVariableString which represents this object&#039;s name.\n    /// &lt;/summary&gt;\n    public class NetworkNameState : NetworkBehaviour\n    {\n        [HideInInspector]\n        public NetworkVariable&lt;FixedPlayerName&gt; Name = new NetworkVariable&lt;FixedPlayerName&gt;();\n    }\n \n    /// &lt;summary&gt;\n    /// Wrapping FixedString so that if we want to change player name max size in the future, we only do it once here\n    /// &lt;/summary&gt;\n    public struct FixedPlayerName : INetworkSerializable\n    {\n        ForceNetworkSerializeByMemcpy&lt;FixedString32Bytes&gt; m_Name; // using ForceNetworkSerializeByMemcpy to force compatibility between FixedString and NetworkSerializable\n        public void NetworkSerialize&lt;T&gt;(BufferSerializer&lt;T&gt; serializer) where T : IReaderWriter\n        {\n            serializer.SerializeValue(ref m_Name);\n        }\n \n        public override string ToString()\n        {\n            return m_Name.Value.ToString();\n        }\n \n        public static implicit operator string(FixedPlayerName s) =&gt; s.ToString();\n        public static implicit operator FixedPlayerName(string s) =&gt; new FixedPlayerName() { m_Name = new FixedString32Bytes(s) };\n    }\n    ``` \n \n# Networking para Steam\n \n## Instalación\n \nUtilizar la ventana Package Manager para instalar el paquete de Facepunch.Steamworks : github.com/Unity-Technologies/multiplayer-community-contributions.git\n \n## Configuración\n \nUna vez instalado el paquete crea el Network Manager en la escena y selecciona FacepunchTransport para crear el nuevo Transport. (Debes seleccionar &quot;None&quot; en el Network Transport si lo estableciste anteriormente)\n \nEn el componente Facepunch Transport escribe el ID de tu juego en Steam una vez lo hayas subido a la plataforma. Para hacer pruebas puedes usar el id 480.\n \n*Se necesita el paquete Steamworks.NET para gestionar el resto de funciones de Steam. URL: github.com/rlabrecque/Steamworks.NET.git\n \n## Bibliografía\n \n[docs-multiplayer.unity3d.com/netcode/current/migration/install/index.html](docs-multiplayer.unity3d.com/netcode/current/migration/install/index.html)\n \n[docs-multiplayer.unity3d.com/netcode/current/tutorials/helloworld/helloworldintro](docs-multiplayer.unity3d.com/netcode/current/tutorials/helloworld/helloworldintro)\n \n[docs-multiplayer.unity3d.com/netcode/current/tutorials/helloworld/helloworldtwo](docs-multiplayer.unity3d.com/netcode/current/tutorials/helloworld/helloworldtwo)\n \n(Actualización abril 2023) [www.youtube.com/watch](www.youtube.com/watch) \n \n[forum.unity.com/threads/alternatives-to-sending-an-action-reference-type-as-serverrpc-parameter.1369092/](forum.unity.com/threads/alternatives-to-sending-an-action-reference-type-as-serverrpc-parameter.1369092/) \n \nMetodos RPC vs NetworkVariable [docs-multiplayer.unity3d.com/netcode/current/learn/rpcvnetvar/](docs-multiplayer.unity3d.com/netcode/current/learn/rpcvnetvar/)  \n \nEjemplos Metodos RPC vs NetVar [docs-multiplayer.unity3d.com/netcode/current/learn/rpcnetvarexamples/](docs-multiplayer.unity3d.com/netcode/current/learn/rpcnetvarexamples/) \n \nInicialización junto a declaración de NetworkLists docs-multiplayer.unity3d.com/netcode/current/basics/networkvariable/index.html#synchronizing-complex-types-example"},"Unity/10--Otros/Unity-UI-Elements-(WIP)":{"title":"Unity UI Elements (WIP)","links":[],"tags":[],"content":"www.youtube.com/watch\nBibliografía\nyoutu.be/EfEAr0meBho"},"Unity/11--Miscelánea/Application.persistentDataPath":{"title":"Application.persistentDataPath","links":[],"tags":[],"content":"Android: /storage/emulated/0/Android/data/&lt;packagename&gt;/files\nWindows: %userprofile%\\AppData\\LocalLow\\&lt;companyname&gt;\\&lt;productname&gt;\nKeywords\nRuta persistente datos Android Windows Unity Persistent Data Path Application"},"Unity/11--Miscelánea/Mis-convenciones":{"title":"Mis convenciones","links":[],"tags":[],"content":"El nombre de archivos y carpetas siempre empezará con mayus.\nEl orden las palabras dentro del nombre de archivos y carpetas irá de más general a más específico acabando en el estado concreto. ej: EmergencyVehicle_PoliceCar_EmergencyMode.anim\nLas carpetas se ordenarán por secciones pudiendo incluso combinar tipos de archivos si no hay muchos archivos por tipo. ej: Multiplayer &gt; Scripts, Singleplayer &gt; Scripts, Shared &gt; Sprites. A no ser que el proyecto no sea (por el momento) lo suficientemente grande para dividirlo por secciones, por lo cual se separará simplemente por tipo de archivo ej: Scripts, Sprites…"},"Unity/11--Miscelánea/Qué-pasa-con-Unity-y-su-precio-a-partir-de-2024":{"title":"Qué pasa con Unity y su precio a partir de 2024","links":[],"tags":[],"content":"¿A quién aplica realmente?\nDepende de qué hablemos.\nPara que se aplique tienes que cumplir estas tres condiciones:\n\n\nTienes una licencia Pro o Enterprise\n\n\nSi has hecho o actualizas tu juego a una versión igual o posterior a la LTS 2023 (aunque hay algunas versiones llamadas Tech Stream de Unity 2023 que podrían estar exentas)\n\n\nTu juego supera el 1,000,000 brutos en los últimos 12 meses Y tienes más de 1,000,000 de “lifetime initial engagements” (compromisos iniciales de por vida (? )\n\n\nPero si no afecta a la versión Personal, ¿entonces no me afecta, no?\nSi cobras más de 200,000 en 12 meses seguidos (2,400,000) entonces estás obligado a aumentar tu cuenta a Unity Pro\n¿Qué es Unity Runtime Free?\nEsta es la tasa que debes pagar a Unity por el hecho de que tus jugadores instalen en juego. Mensualmente debes reportar a Unity el menor de los siguiente: \n\n\ntus ganancias\n\n\nnumero de lifetime initial engagements\n\n\n¿Qué es eso de lifetime initial engagements?\nEs como han llamado al momento en el que un usuario final único adquiere de forma legal e instale por primera vez tu juego a través de un canal de distribución. La explicación de los términos:\n\n\nÚnico: Situaciones en las que es imposible indicar cuántos jugadores han jugado. Si, por ejemplo, llevas tu juego a una expo, eso se considera como 1 jugador.\n\n\nLegal: Para que cuente, el juego debe haber sido adquirido de forma legal, no cuentan las copias fraudulentas o pirata.\n\n\nUsuario final: Se refieren a que no cobrarán por que lo instale el equipo de desarrollo, procesos automáticos o testers, solo a los jugadores reales.\n\n\nPor primera vez: Se refiere a que no van a cobrar varias veces por que un mismo jugador juegue varias veces o reinstale o instale en diferentes dispositivos.\n\n\nCanal de distribución: Cuenta una vez por cada tienda. Es decir, si un jugador lo compra en Steam, puede instalarlo en todos los ordenadores que quiera contando una vez. Si lo compra también en Steam e itch.io, entonces ya cuenta como 2 independienmente de las instalaciones. Solo cuenta la primera vez.\n\n\n¿Y cómo pretende Unity que cuente los initial engagements?\nDicen que en la prácitca no esperan que la gente lo calcule currándoselo, sino que lo estimen en base a datos legibles dependiendo de la tienda. Ejemplos:\n\n\nUnidades vendidas: Las ventas en Steam menos las devoluciones.\n\n\nPrimeras descargas: Juegos gratuitos (se entiende con microtransacciones) que tengan numero de descargas por cuentas únicas (usuarios diferentes que han descargado el juego). También es aceptable.\n\n\n¿Afecta el Runtime Fee también a los juegos de navegador (WebGL) o de Streaming (en plan Google Play Pass o Game Pass)?\nSí\nPero a ver, ¿le tendría que envíar un correo a Unity o como?\nNo, por lo visto tienen pensado desarrollar herramientas de auto reportado\n¿Se pueden obtener descuentos en ciertos casos?\nSí, ponen algunos ejemplos pero probablemente les tengas que consultar directamente\n¿Y si no les mando info?\nRecomiendan que lo hagas tú, porque si no ellos ya se harán sus cálculos\n¿Afecta a juegos serios y demás?\nNo afecta a los planes de películas, juegos de azar o educación por ahora (noviembre 2023) no a  cliente de la industria con un plan de Unity Industry.\nCalculadora de Runtime Fee\nunity.com/es/runtime-fee-estimator\nBibliografía\nunity.com/pricing-updates"},"Unity/12--Ejemplos-de-Unity/Cargar-archivos---Imágenes---recursos-de-StreamingAssets-Streaming-Assets-Resources":{"title":"Cargar archivos - Imágenes - recursos de StreamingAssets Streaming Assets Resources","links":[],"tags":[],"content":"Resto del articulo aquí\nSe necesita la carpeta StreamingAssets dentro de la carpeta Assets\nPuedes listar los archivos y carpetas gracias a la siguiente línea\nFileInfo[] files = new DirectoryInfo(Application.streamingAssetsPath + $&quot;/{path}&quot;).GetFiles();\nLa alternativa (que parece ser mejor incluso aunque no te arrastra los archivos que pusiste a la Build a diferencia de StreamingAssets) es usar Resources. Igual que StreamingAssets, debe haber una carpeta llamada Resources que cuelgue directamente de Assets"},"Unity/12--Ejemplos-de-Unity/Cargar-un-menu-de-niveles":{"title":"Cargar un menu de niveles","links":[],"tags":[],"content":"var button = Instantiate(levelButtonPrefab, levelsGrid.transform);\n \nbutton.name = LocalizationSettings.StringDatabase.GetLocalizedString(&quot;Menus&quot;, &quot;Level&quot;) + &quot; &quot; + (i + 1).ToString(&quot;D3&quot;);\n \nbutton.GetComponentInChildren&lt;Text&gt;().text = (i + 1).ToString(&quot;D3&quot;);\n \nScriptableObjectLevel level = (ScriptableObjectLevel)Resources.Load(LocalizationSettings.SelectedLocale.Formatter + &quot;/Levels/Level &quot; + (i + 1).ToString(&quot;D3&quot;));\n \nImage checkedImage = button.transform.GetChild(1).GetComponent&lt;Image&gt;();\n \nint solved = PlayerPrefs.GetInt((i + 1).ToString(&quot;D3&quot;), 0);\n \nif (solved == 0) {\n  checkedImage.gameObject.SetActive(false);\n} else {\n  checkedImage.sprite = checkSprites[solved - 1];\n}\n \nbutton.GetComponent&lt;Button&gt;().onClick.AddListener(\n  delegate {\n      LevelLoader.currentLevel = (ScriptableObjectLevel)Resources.Load(LocalizationSettings.SelectedLocale.Formatter+&quot;/Levels/Level &quot; + button.name.Split(&quot; &quot;)[1]);\n    SceneManager.LoadScene(&quot;Level&quot;);\n});"},"Unity/12--Ejemplos-de-Unity/Como-ver-los-logs-en-Android":{"title":"Como ver los logs en Android","links":[],"tags":[],"content":"Crear un batch con el siguiente contenido\ncd C:\\Program Files\\Unity\\Hub\\Editor\\2021.3.17f1\\Editor\\Data\\PlaybackEngines\\AndroidPlayer\\SDK\\tools\nadb logcat | findstr -i unity\nHay que ejecutar el monitor en las tools de Android\nEn mi caso se encuentra en\nC:\\Program Files\\Unity\\Hub\\Editor\\2022.1.2f1\\Editor\\Data\\PlaybackEngines\\AndroidPlayer\\SDK\\tools\\monitor \nprimera parte\nC:\\Program Files\\Unity\\Hub\\Editor\\\nsegunda parte\n\\Editor\\Data\\PlaybackEngines\\AndroidPlayer\\SDK\\tools\nEn la parte de abajo izquierda, debería haber una pestaña llamada LogCat\nCreamos un nuevo Filtro\n\n"},"Unity/12--Ejemplos-de-Unity/Desconectar-jugador":{"title":"Desconectar jugador","links":[],"tags":[],"content":"public void DisconnectClient(ulong clientId)\n        {\n            if (m_HasSessionStarted)\n            {\n                // Mark client as disconnected, but keep their data so they can reconnect.\n                if (m_ClientIDToPlayerId.TryGetValue(clientId, out var playerId))\n                {\n                    if (GetPlayerData(playerId)?.ClientID == clientId)\n                    {\n                        var clientData = m_ClientData[playerId];\n                        clientData.IsConnected = false;\n                        m_ClientData[playerId] = clientData;\n                    }\n                }\n            }\n            else\n            {\n                // Session has not started, no need to keep their data\n                if (m_ClientIDToPlayerId.TryGetValue(clientId, out var playerId))\n                {\n                    m_ClientIDToPlayerId.Remove(clientId);\n                    if (GetPlayerData(playerId)?.ClientID == clientId)\n                    {\n                        m_ClientData.Remove(playerId);\n                    }\n                }\n            }\n        }\n        ```"},"Unity/12--Ejemplos-de-Unity/Detección-de-click":{"title":"Detección de click","links":[],"tags":[],"content":"Si el click es de Button, estaría bien que mirases esto\nUna buena forma de hacerlo es añadir al sprite un BoxCollider u otro Collider\nY dentro del código asociado al sprite, poner un método evento OnMouseDown, OnMouseOver, entre otros (véase otros métodos que es capaz de capturar (entre otros de MonoBehaviour, que es quien contiene los métodos que ejecuta el Collider) docs.unity3d.com/ScriptReference/MonoBehaviour.html )\nScene\nDespués tenemos dos opciones dependiendo si queremos que el click se transmita bubble:\nModo buble:\nLa forma más sencilla (y menos útil), podemos utilizar OnMouseDown y un BoxCollider2D\nprivate void OnMouseDown()\n{\n    print(&quot;CLICADO!&quot;);\n}\nModo Raycast:\nRaycast no funciona con Box Collider 2D (ref), debemos poner uno BoxCollider\nvoid Update()\n{\n    if (Input.GetMouseButtonDown(0))\n    {\n        RaycastHit hit;\n        Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);\n        if (Physics.Raycast(ray, out hit, 100.0f))\n        {\n            Debug.Log(&quot;You selected the &quot; + hit.transform.name); // ensure you picked right object\n        }\n    }\n}\nUI\nPara detección en el canvas, se añade al script que ejecuta los eventos (la lógica de nuestro click en el elemento que recibirá el click), una interfaz por cada acción que debe ser ejecutada (si pasará el ratón por encima o si es un click o cualquier otra interacción), y su correspondiente método accionador:\n\nPara hover (por ejemplo) → IPointerEnterHandler y método public void OnPointerEnter(PointerEventData eventData)\n\n// Código que se pondrá como componente en el gameobject ejecutable (que estará dentro del canvas)\nusing UnityEngine.EventSystems; // En esta clase están las interfaces\npublic class ElementoClicable : MonoBehaviour, IPointerClickHandler // Interfaz para permitir el click\n{\npublic void OnPointerClick(PointerEventData eventData)\n    {\n        print(&quot;Click realizado&quot;);\n    }\n}\nBibliografía\nanswers.unity.com/answers/1095070/view.html"},"Unity/12--Ejemplos-de-Unity/Dibujar-Gizmos":{"title":"Dibujar Gizmos","links":[],"tags":[],"content":"private void OnDrawGizmos()\n    {\n        Gizmos.color = Color.red;\n        //Gizmos.DrawLine(transform.position, marker.position);\n        Gizmos.DrawRay(Vector3.zero, new Vector3(-0.47f, 0.9f, 0));\n \n        Gizmos.color = Color.green;\n        Gizmos.DrawRay(Vector3.zero,Vector3.up);\n        Gizmos.DrawRay(Vector3.zero,Vector3.right);\n        Gizmos.DrawRay(Vector3.zero,Vector3.down);\n        Gizmos.DrawRay(Vector3.zero,Vector3.left);\n \n        Gizmos.DrawRay(Vector3.zero,Vector3.up+Vector3.right);\n        Gizmos.DrawRay(Vector3.zero,Vector3.down + Vector3.right);\n        Gizmos.DrawRay(Vector3.zero,Vector3.down + Vector3.left);\n        Gizmos.DrawRay(Vector3.zero,Vector3.up+ Vector3.left);\n    }\n    ```"},"Unity/12--Ejemplos-de-Unity/DontDestroyOnLoad":{"title":"DontDestroyOnLoad","links":[],"tags":[],"content":"static GameEngine instance;\nprivate void Awake()\n    {\n        if (instance == null)\n        {\n            instance = this;\n            DontDestroyOnLoad(gameObject);\n        }\n        else\n        {\n            Destroy(gameObject);\n        }\n    }\n    ``` \n \nAñade el archivo singleton.snippet en la carpeta:\n \n```shell\n&quot;C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC#\\Snippets\\3082\\Visual C#\\&quot;\nsingleton.snippet\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;CodeSnippets xmlns=&quot;schemas.microsoft.com/VisualStudio/2005/CodeSnippet&quot;&gt;\n\t&lt;CodeSnippet Format=&quot;1.0.0&quot;&gt;\n\t\t&lt;Header&gt;\n\t\t\t&lt;Title&gt;sing&lt;/Title&gt;\n\t\t\t&lt;Shortcut&gt;sing&lt;/Shortcut&gt;\n\t\t\t&lt;Description&gt;Fragmento de código para el patrón Singleton / DontDestroyOnLoad&lt;/Description&gt;\n\t\t\t&lt;Author&gt;Javier Aibar&lt;/Author&gt;\n\t\t\t&lt;SnippetTypes&gt;\n\t\t\t\t&lt;SnippetType&gt;Expansion&lt;/SnippetType&gt;\n\t\t\t&lt;/SnippetTypes&gt;\n\t\t&lt;/Header&gt;\n\t\t&lt;Snippet&gt;\n\t\t\t&lt;Declarations&gt;\n\t\t\t\t&lt;Literal Editable=&quot;false&quot;&gt;\n\t\t\t\t\t&lt;ID&gt;classname&lt;/ID&gt;\n\t\t\t\t\t&lt;ToolTip&gt;Nombre de clase&lt;/ToolTip&gt;\n\t\t\t\t\t&lt;Function&gt;ClassName()&lt;/Function&gt;\n\t\t\t\t\t&lt;Default&gt;ClassNamePlaceholder&lt;/Default&gt;\n\t\t\t\t&lt;/Literal&gt;\n\t\t\t&lt;/Declarations&gt;\n\t\t\t&lt;Code Language=&quot;csharp&quot;&gt;&lt;![CDATA[static $classname$ instance;\n\t\t\tprivate void Awake()\n\t\t\t{\n\t\t\t\tif (instance == null)\n\t\t\t\t{\n\t\t\t\t\tinstance = this;\n\t\t\t\t\tDontDestroyOnLoad(gameObject);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tDestroy(gameObject);\n\t\t\t\t}\n\t\t\t}$end$]]&gt;\n\t\t\t&lt;/Code&gt;\n\t\t&lt;/Snippet&gt;\n\t&lt;/CodeSnippet&gt;\n&lt;/CodeSnippets&gt;\nOtra forma del implementar singleton es el mostrado por SamYam en su video multiplayer, disponible en su github y en mi drive\nSimplemente pones el archivo Singleton.cs en tu proyecto, y se implementa sustituyendo MonoBehaviour por Singleton&lt;NombreDeTuClase&gt;\nTen en cuenta que con este modo, al hacer Awake, tendrás que hacerlo público y sobreescribirlo (override) y poner base.Awake()\npublic override void Awake()\n{\n    base.Awake();\n}"},"Unity/12--Ejemplos-de-Unity/Drag-and-Drop":{"title":"Drag and Drop","links":[],"tags":[],"content":"UI\nusing UnityEngine;\nusing UnityEngine.EventSystems;\n \npublic class WindowDraggable : MonoBehaviour, IBeginDragHandler, IDragHandler,  IEndDragHandler\n{\n    private bool dragging;\n    private Vector2 positionOffset;\n \n    public void OnBeginDrag(PointerEventData eventData)\n    {\n        positionOffset = transform.position - Input.mousePosition;\n        dragging = true;\n    }\n \n    public void OnDrag(PointerEventData eventData)\n    {\n        if (dragging)\n        {\n            transform.position = Input.mousePosition + new Vector3(positionOffset.x, positionOffset.y, 0);\n        }\n \n    }\n \n    public void OnEndDrag(PointerEventData eventData)\n    {\n        dragging = false;\n    }\n}\nMétodo alternativo implementar IPointerDownHandler\nEl cual implementa el siguiente método (con un ejemplo sobre posicionar correctamente el GameObject en el punto donde el ratón ha clicado)\npublic void OnPointerDown(PointerEventData eventData)\n    {\n        diff = transform.position - Input.mousePosition;\n        dragging = true;\n    }\n \nvoid Update()\n    {\n        if (dragging &amp;&amp; Input.GetMouseButton(0))\n        {\n            transform.position = Input.mousePosition + new Vector3(diff.x, diff.y, 0);\n        }\n \n        if (Input.GetMouseButtonUp(0))\n        {\n            dragging = false;\n        }\n    }\n \nSe tiene que implementar IDragHandler\nY el método\nKeywords\nIPointer PointerDown Pointer IPointerDown PointerHandler IPointerHandler\nPointerUp IPointerUp OnPointer"},"Unity/12--Ejemplos-de-Unity/Ejemplo-Raycast":{"title":"Ejemplo Raycast","links":[],"tags":[],"content":"public float raycastheight = 0.2f;\npublic float raycastLength = 0.2f;\npublic float raycastRadius = 0.02f;\n \ngrounded = Physics.SphereCast(new Ray(transform.position + Vector3.up * raycastheight, Vector3.down), raycastRadius, out RaycastHit hit, raycastLength);\n \n---------------------\n \nif (Physics.SphereCast(new Ray(transform.position + Vector3.up * raycastheight, Vector3.down), raycastRadius, out RaycastHit hit, raycastLength)) {\n\t// Aquí podemos obtener mogollón de info de hit\n}\nPara mostrar el raycast mirar aquí\nRaycast 2D\n// Es un rayo muy pequeñito (para localizar lo que tienes muy cerca)\n// El objeto con el que queremos colisionar, está en el Layer 9\n// Para pasarle la máscara hacemos 1 &lt;&lt; 9 que nos filtro SOLO dicho Layer\n// Si quisieramos, por el contrario, que nos filtrara TODO excepto dicho layer, debería invertir los bits, es decir ~(1&lt;&lt;9)\nRaycastHit2D raycast = Physics2D.Linecast(transform.position, transform.position + transform.up * 0.02f, 1 &lt;&lt; 9);\n \nif (raycast) print(&quot;Hemos dado con un Collider, de nombre &quot;+raycast.collider.name);"},"Unity/12--Ejemplos-de-Unity/Ejemplo-corrutina":{"title":"Ejemplo corrutina","links":[],"tags":[],"content":"StartCoroutine(playEngineSound()); \n \n IEnumerator playEngineSound()\n    {\n        // We set start of engines sound\n        _audio.clip = startEngineClip;\n        _audio.Play();\n        // We wait until it&#039;s over\n        yield return new WaitForSeconds(_audio.clip.length);\n        // then, we change the clip to the one that must be looped\n        // it corresponds to the sound of the engines continously working\n        _audio.clip = loopEngineClip;\n        // The AudioSource plays in loop the sound of engines running\n        _audio.Play();\n    }\n "},"Unity/12--Ejemplos-de-Unity/Evento-cambiar-locale-Localization-de-Unity":{"title":"Evento cambiar locale Localization de Unity","links":[],"tags":[],"content":"private void OnEnable()\n    {\n        LocalizationSettings.SelectedLocaleChanged += LanguagesChange;\n    }\n \n    private void OnDisable()\n    {\n        LocalizationSettings.SelectedLocaleChanged -= LanguagesChange;\n    }\n \n    public void LanguagesChange(UnityEngine.Localization.Locale value)\n    {\n        print($&quot;Locale seleccionado: {LocalizationSettings.SelectedLocale.Formatter}&quot;);\n    }\n    ```"},"Unity/12--Ejemplos-de-Unity/Eventos":{"title":"Eventos","links":[],"tags":[],"content":"Modo Unity\n    public UnityEvent startInteracting;\n    public UnityEvent interacting;\n    public UnityEvent stopInteracting;\n \n \n    public void StartInteracting() {\n        startInteracting.Invoke();\n    }\n \n    public void Interacting() {\n        interacting.Invoke();\n    }\n \n    public void StopInteracting() {\n        stopInteracting.Invoke();\n    }\n    ``` \n \n# Modo Action\n \n```cs \npublic static event System.Action&lt;ushort&gt; ChangedLengthEvent;\nCódigo que genera el evento\npublic static event System.Action&lt;ushort&gt; ChangedLengthEvent;\n \npublic void ChangeLength() {\n    // Code\n    if (ChangedLengthEvent != null)\n        ChangedLengthEvent.Invoke(length.Value);\n}\nCódigo afectado por el evento\n[SerializeField] private TMP_Text text;\nprivate void OnEnable()\n{\n    PlayerLength.ChangedLengthEvent += PlayerLength_ChangedLengthEvent;\n}\n \nprivate void OnDisable()\n{\n    PlayerLength.ChangedLengthEvent -= PlayerLength_ChangedLengthEvent;\n}\n \nprivate void PlayerLength_ChangedLengthEvent(ushort obj)\n{\n    text.text = obj.ToString();\n}\nModo evento delegado\nPrimero debemos crear una clase que gestione los eventos, la llamaremos EventManager.\nEsta tendrá un delegado y eventos de su tipo, a los cuales se sindicará todos los métodos que necesitemos\n#EventManager.cs\n \npublic delegate void HealthControl();\npublic static event HealthControl PlusHealth; \npublic static event HealthControl MinusHealth;\npublic static event HealthControl HealthChanged;\nÉstos serán los métodos que luego ejecutaremos desde fuera y que desencadenarán los eventos (ejecutarán todos los métodos que estén sindicados)\n#EventManager.cs\n \npublic void IncreaseHeart()\n{\n    if (PlusHealth != null)\n        PlusHealth();\n}\n \npublic void DecreaseHeart()\n{\n    if (MinusHealth != null)\n        MinusHealth();\n}\npublic void HealthValueChanged()\n{\n    if (HealthChanged != null)\n        HealthChanged();\n}\nAhora falta suscribir las acciones correspondientes a esos eventos. Para ello, he creado la clase UpdateHealth, que se encargará de mostrar de forma gráfica los cambios en la vida del personaje\n#UpdateHealth.cs\n \n//Sindicación de los eventos\nvoid OnEnable()\n{\n    EventManager.HealthChanged += OnHealthChanged;\n    EventManager.MinusHealth += ReduceHealth;\n    EventManager.PlusHealth += IncreaseHealth;\n}\n \n//Desuscripción de los eventos al desactivarse el componente (medida de seguridad)\nvoid OnDisable()\n{\n    EventManager.HealthChanged -= OnHealthChanged;\n    EventManager.MinusHealth -= ReduceHealth;\n    EventManager.PlusHealth -= IncreaseHealth;\n}\nY aquí los eventos\n#UpdateHealth.cs\n \nvoid ReduceHealth()\n{\n    lifes[playerManager.Health].sprite = emptyHeart;\n}\nvoid IncreaseHealth()\n{\n    lifes[playerManager.Health -1].sprite = filledHeart;\n}\n \nvoid OnHealthChanged()\n{\n    for (int i = 0; i &lt; playerManager.Health &amp;&amp; i &lt; lifes.Length; i++)\n    {\n        lifes[i].sprite = filledHeart;\n    }\n    for (int i = playerManager.Health; i &lt; playerManager.MaxHealth &amp;&amp; i &lt; lifes.Length; i++)\n    {\n        lifes[i].sprite = emptyHeart;\n    }\n}\nAl clicar al botón de aumentar salud\n\n(lo sé, son cutres, soy programador😂)\nEste debe ejecutar IncreaseHeart() en EventManager\nEsquema de lo que ocurre\n"},"Unity/12--Ejemplos-de-Unity/Focus-en-InputField":{"title":"Focus en InputField","links":[],"tags":[],"content":"No usar en OnEnable / Awake → Pasar a Start\nvalueField.Select();\nvalueField.ActivateInputField();"},"Unity/12--Ejemplos-de-Unity/Guardar-en-un-archivo":{"title":"Guardar en un archivo","links":[],"tags":[],"content":"Una buena forma es mediante una clase preparada para serializarse, que nos servirá como el objeto del que obtendremos la info\n[Serializable]\npublic class ConfigFile\n{\n    public float dato1;\n    public float dato2;\n    public float dato3;\n \n    public ConfigFile(float dato1, float dato2, float dato3)\n    {\n        this.dato1 = dato1;\n        this.dato2 = dato2;\n        this.dato3 = dato3;\n    }\n    public ConfigFile() { }\n}\nY el método que guarda\npublic void SaveValues()\n    {\n        // TODO: Are you sure? window\n        string filename = &quot;config.json&quot;;\n        ConfigFile configFile = new ConfigFile();\n// Obtain data from \n        configFile.dato1 = string.IsNullOrEmpty(dato1Field.text) ? defaultOptions.dato1 : float.Parse(dato1Field.text);\n        configFile.dato2 = string.IsNullOrEmpty(dato2Field.text) ? defaultOptions.dato2 : float.Parse(dato2Field.text);\n        configFile.dato3 = string.IsNullOrEmpty(dato3Field.text) ? defaultOptions.dato3 : float.Parse(dato3Field.text);\n        string jsonString = JsonUtility.ToJson(configFile);\n        \n// Create / update save file\n        File.WriteAllText(Application.persistentDataPath + &quot;/&quot; + filename, jsonString);\n    }\n    ``` \n \n \nEl método que carga\n \n```cs \npublic void LoadValues()\n    {\n        string filename = &quot;config.json&quot;;\n        if (File.Exists(Application.persistentDataPath + &quot;/&quot; + filename))\n        {\n            string jsonString = File.ReadAllText(Application.persistentDataPath + &quot;/&quot; + filename);\n            ConfigFile configFile = JsonUtility.FromJson&lt;ConfigFile&gt;(jsonString);\n            dato1Field.text = &quot;&quot; + configFile.dato1;\n            dato2Field.text = &quot;&quot; + configFile.dato2;\n            dato3Field.text = &quot;&quot; + configFile.dato3;\n        }\n        else\n        {\n            ResetValuesToDefault();\n        }\n    }\n    ``` \n    \nEjemplo completo usando un transform\n \n```cs \n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing UnityEngine;\n \npublic class SavesManager : MonoBehaviour\n{\n    [SerializeField] private Transform playerPos;\n \n    private void Start()\n    {\n        LoadValues();\n    }\n    public void SaveValues()\n    {\n        // TODO: Are you sure? window\n        string filename = &quot;savefile.json&quot;;\n        ConfigFile configFile = new ConfigFile();\n        // Obtain data from \n        configFile.playerPos = playerPos.position;\n        configFile.playerRot = playerPos.eulerAngles;\n        string jsonString = JsonUtility.ToJson(configFile);\n \n        // Create / update save file\n        File.WriteAllText(Application.persistentDataPath + &quot;/&quot; + filename, jsonString);\n        print(&quot;Saved in &quot; + Application.persistentDataPath + &quot;/&quot; + filename);\n    }\n \n    public void LoadValues()\n    {\n        string filename = &quot;savefile.json&quot;;\n        if (File.Exists(Application.persistentDataPath + &quot;/&quot; + filename))\n        {\n            string jsonString = File.ReadAllText(Application.persistentDataPath + &quot;/&quot; + filename);\n            ConfigFile configFile = JsonUtility.FromJson&lt;ConfigFile&gt;(jsonString);\n            playerPos.position = configFile.playerPos;\n            playerPos.eulerAngles = configFile.playerRot;\n            print(&quot;Cargado &quot; + Application.persistentDataPath + &quot;/&quot; + filename);\n        }\n        else\n        {\n            print(&quot;No existe &quot; + Application.persistentDataPath + &quot;/&quot; + filename);\n \n        }\n    }\n}\n \n[Serializable]\npublic class ConfigFile\n{\n    public Vector3 playerPos;\n    public Vector3 playerRot;\n    public int lifes;\n \n    public ConfigFile(Vector3 playerPos, Vector3 playerRot, int lifes)\n    {\n        this.playerPos = playerPos;\n        this.playerRot = playerRot;\n        this.lifes = lifes;\n    }\n    public ConfigFile() { }\n}\n \nAhora lo mismo pero mediante bytes\nprivate bool WriteFile (string lan, string file, LanLibraryEditor data, bool replace = false)\n    {\n        string path = $&quot;{Application.dataPath}/{GetLanPath()}/{lan}/{file}.lan&quot;;\n        if (!File.Exists(path) || replace || EditorUtility.DisplayDialog(&quot;El archivo ya existe&quot;,\n            $&quot;El archivo {file}.lan ya existe en el idioma {lan}. ¿Deseas reemplazarlo?&quot;, &quot;Reemplazar&quot;, &quot;Cancelar&quot;))\n        {\n            File.WriteAllText(path, data.ToString());\n            return true;\n        }\n \n        return false;\n    }\nprivate void ReadFile (string lan, string file)\n    {\n        string path = $&quot;{Application.dataPath}/{GetLanPath()}/{lan}/{file}.lan&quot;;\n        if (!File.Exists(path))\n        {\n            EditorUtility.DisplayDialog(&quot;No se encuentra el archivo&quot;,\n                $&quot;El archivo {file}.lan no se encuentra en el idioma {lan}.&quot;, &quot;Aceptar&quot;);\n        }\n \n        string data = File.ReadAllText(path);\n        library = new LanLibraryEditor(data);\n    }\n \n \n// Convert an object to a byte array\nprivate byte[] ObjectToByteArray(Object obj)\n{\n    if(obj == null)\n        return null;\n \n    BinaryFormatter bf = new BinaryFormatter();\n    MemoryStream ms = new MemoryStream();\n    bf.Serialize(ms, obj);\n \n    return ms.ToArray();\n}\n \n// Convert a byte array to an Object\nprivate Object ByteArrayToObject(byte[] arrBytes)\n{\n    MemoryStream memStream = new MemoryStream();\n    BinaryFormatter binForm = new BinaryFormatter();\n    memStream.Write(arrBytes, 0, arrBytes.Length);\n    memStream.Seek(0, SeekOrigin.Begin);\n    Object obj = (Object) binForm.Deserialize(memStream);\n \n    return obj;\n}"},"Unity/12--Ejemplos-de-Unity/IEnumerables-funciones-lambda":{"title":"IEnumerables funciones lambda","links":[],"tags":[],"content":"Para ejemplificar utilizaremos la siguiente lista\nList&lt;int&gt; lista = new List&lt;int&gt; { 1, 5, 2, 7, 10, 9,  4, 3, 6, 8};\nList&lt;int&gt; aux = new List&lt;int&gt; { 7, 10, 9, 2135132};\nFind\nLocaliza el primer término que coincide con la condición\nint termino = lista.Find(e =&gt; e &gt; 4); // Devuelve 5\nContains\nDevuelve true si encuentra el elemento buscado\nbool hayUno = lista.Contains(10); // No devolverá true porque hay un 10\nUnion (de Linq). Equivale a la operación OR\nFusiona dos listas sin incluir repetidos\nlista = lista.Union(aux).ToList(); // lista ahora contiene 1, 5, 2, 7, 10, 9,  4, 3, 6, 8, 2135132\nConcat\nFusiona dos listas INCLUYENDO repetidos\nlista = lista.Concat(aux).ToList(); // lista ahora contiene 1, 5, 2, 7, 10, 9,  4, 3, 6, 8, 7, 10, 9, 2135132\nDistinct\nElimina los repetidos de una lista (asumimos que la lista es 1, 5, 2, 7, 10, 9,  4, 3, 6, 8, 7, 10, 9, 2135132)\nlista = lista.Concat(aux).ToList(); // lista ahora contiene 1, 5, 2, 7, 10, 9,  4, 3, 6, 8, 2135132\nSelect\nProyecta la lista con un nuevo formato\nlista = lista.Select(e =&gt; ++e).ToList(); // Suma uno a toda la lista\n \nlista = lista.Select(e =&gt; e + 1).ToList(); // Suma uno a toda la lista\nWhere\nFiltro. Evalua una condición y crea una nueva lista con los elementos que sí cumplen dicha condición.\nlista = lista.Where(e =&gt; e &gt; 4).ToList(); // Obtenemos los aprobados (5, 7, 10, 9, 6, 8)\nForEach\nEjecturá lo que le pidamos a cada elemento de la lista\nlista.ForEach(e =&gt; Console.WriteLine(e)); // Cómoda forma de imprimir una lista por pantalla\nCast\nAplica un cast a todos los elementos de la lista\nlistaDeComponentes.Cast&lt;MonoBehaviour&gt;().ToList();\nExcept\nElimina de la lista los elemento de la otra lista. Equivalente a la operación AND\nlista = lista.Except(aux).ToList(); // El resultado es 1, 5, 2, 4, 3, 6, 8\nIntersect\nEl resultado son los que coinciden en ambas listas\nlista = lista.Except(aux).ToList(); // El resultado es 1, 5, 2, 4, 3, 6, 8\nNot Intersect\nQuedarse con los elementos que no coincidan en ambas listas simultáneamente, es decir, si un elemento está en ambas, descartado; si está en una pero no en la otra, seleccionado. Realmente no existe un método que consiga este efecto, pero Øyvind Bråthen en StackOverflow propone este método: Ha aplicado una diferencia simétrica\nlista.Except(aux).Union( aux.Except(lista)); // la unión, de las [restas](es.wikipedia.org/wiki/Diferencia_de_conjuntos) de cada lista\nOrderBy\nPermite ordenar un array por una propiedad arbitraria\nlista.OrderBy(e =&gt; Vector3.Distance(e, point))\nUsos interesantes\nOperación AND\nlista = lista.Except(aux).ToList();\nOperación OR (Union)\nlista = lista.Union(aux).ToList(); // lista ahora contiene 1, 5, 2, 7, 10, 9,  4, 3, 6, 8, 2135132\nQue el contenido de la lista pase a ser una propiedad de los elementos de la lista\nSelect (asumiendo un struct Prueba con string e integer)\nList&lt;Prueba&gt; pruebaLista = new List&lt;Prueba&gt; { new Prueba(&quot;a&quot;, 1), new Prueba(&quot;b&quot;, 2), new Prueba(&quot;c&quot;, 3) };\n \nList&lt;int&gt; pruebaInt = pruebaLista.Select(e =&gt; e.integer).ToList(); // pruebaInt contendrá 1, 2, 3\nOtros interesantes\nFirstOrDefault\nFindIndex\nOfType\nKeywords\nOrder Ordenar"},"Unity/12--Ejemplos-de-Unity/IEnumerator":{"title":"IEnumerator","links":[],"tags":[],"content":"3 usos diferentes\nIEnumerator enumerator = enumerable.GetEnumerator();\n \nwhile (enumerator.MoveNext())\n{\n    object item = enumerator.Current;\n    // Perform logic on the item\n}\nforeach(object item in enumerable)\n{\n    // Perform logic on the item\n}"},"Unity/12--Ejemplos-de-Unity/Mostrar-un-Raycast":{"title":"Mostrar un Raycast","links":[],"tags":[],"content":"Debug.DrawLine(ray.origin, ray.origin + ray.direction* raycastLength, Color.red);"},"Unity/12--Ejemplos-de-Unity/Mostrar-valores-cambiantes-en-una-gráfica":{"title":"Mostrar valores cambiantes en una gráfica","links":[],"tags":[],"content":"public AnimationCurve plot;\nplot.AddKey(Time.realtimeSinceStartup, transform.position.x);"},"Unity/12--Ejemplos-de-Unity/Normalizar-y-pasar-de-escala-a-escala":{"title":"Normalizar y pasar de escala a escala","links":[],"tags":[],"content":"Para normalizar un valor, se usa Mathf.InverseLerp(valorMinimo, valorMaximo, valorANormalizar)\nPara pasar de un valor normalizado a otra escala se usa Mathf.Lerp(valorMinimo, valorMaximo, valorANormalizar)\nLerp pasa de un valor normalizado (0 a 1) a uno dentro del rango, e InverseLerp, te dice, de 0 a 1, en qué posición dentro del rango está un valor, ejemplo\nLerp(10, 20, 0.25) = 13\n \nInverseLerp(10, 20, 13) = 0.25"},"Unity/12--Ejemplos-de-Unity/Object-Pooling":{"title":"Object Pooling","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/12--Ejemplos-de-Unity/Obtener-grupos-en-expresiones-regulares":{"title":"Obtener grupos en expresiones regulares","links":[],"tags":[],"content":"Cuando esperas siempre un solo match\nusing System;\nusing System.Text.RegularExpressions;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tvar match = Regex.Match(&quot;/mifrase&quot;, @&quot;[\\\\\\/]([\\w ]+)$&quot;);\n\t\tConsole.WriteLine($&quot;Groups.Count {match.Groups.Count} | Group[1] {match.Groups[1]}&quot;);\n\t}\n}\nCuando esperas que podría haber varios matches\nusing System;\nusing System.Text.RegularExpressions;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n            var matches = Regex.Matches(&quot;/mifrase&quot;, @&quot;[\\\\\\/]([\\w ]+)$&quot;);\n\t      foreach (Match match in matches)\n              {\n                    GroupCollection groups = match.Groups;\n                    Console.WriteLine($&quot;Groups.Count {groups.Count}&quot;);\n\t            foreach(Group g in groups) {\n\t\t\tConsole.WriteLine($&quot;\\t{g}&quot;);\n\t\t    }\n              }\n\t}\n}\nPara reemplazar texto con regex\nstring text = Regex.Replace(&quot;holaaaaa que taaaal&quot;, @&quot;a+&quot;, &quot;a&quot;);"},"Unity/12--Ejemplos-de-Unity/Obtener-una-traducción-usando-Localization-de-Unity":{"title":"Obtener una traducción usando Localization de Unity","links":[],"tags":[],"content":"LocalizationSettings.StringDatabase.GetLocalizedString(&quot;Menus&quot;, &quot;Level&quot;); // Traduce la palabra &quot;Level&quot; al idioma que toque, de la tabla Menus"},"Unity/12--Ejemplos-de-Unity/Permitir-al-usuario-seleccionar-la-calidad":{"title":"Permitir al usuario seleccionar la calidad","links":[],"tags":[],"content":"Las calidades se encuentran y se pueden configurar desde Project Settings &gt; Quality\n\nDichas calidades se listan desde el código mediante QualitySettings.names, este array se puede meter en un Dropdown y el índice del array corresponde a la calidad correspondiente. Y ese índice se le pasa a QualitySettings.SetQualityLevel(int calidad) De tal forma que queda así:\nprivate void Start()\n{\n    string[] qualities = QualitySettings.names;\n    foreach (string q in qualities)\n        qualityDropdown.options.Add(new TMP_Dropdown.OptionData(q));\n    qualityDropdown.value = QualitySettings.GetQualityLevel();\n}\n \nprivate void OnEnable()\n{\n    qualityDropdown.onValueChanged.AddListener(QualityChanged);\n}\n \nprivate void OnDisable()\n{\n    qualityDropdown.onValueChanged.RemoveListener(QualityChanged);\n}\n \nprivate void QualityChanged(int value)\n{\n    QualitySettings.SetQualityLevel(value);\n}"},"Unity/12--Ejemplos-de-Unity/Pinch-Escalar-con-pellizco-movil":{"title":"Pinch Escalar con pellizco movil","links":[],"tags":[],"content":"private float factor;\n    private float initialDistance;\n    private Vector3 initialScale;\n    private float currentDistance;\n    public float minScale;\n    public float maxScale;\n    public float sensibility;\n    public Transform targetTransform;\n \n    void Start()\n    {\n        targetTransform = GetComponent&lt;Transform&gt;();\n} \nprivate void Update()\n    {\n        CalculatePinch();\n    }\n \n    // Based on CREDIT: www.youtube.com/watch\n    public void CalculatePinch()\n    {\n        if (Input.touchCount != 2) return;\n        var touchZero = Input.GetTouch(0);\n        var touchOne = Input.GetTouch(1);\n \n        if (touchZero.phase is TouchPhase.Ended or TouchPhase.Canceled ||\n            touchOne.phase is TouchPhase.Ended or TouchPhase.Canceled) return;\n \n        if (touchZero.phase == TouchPhase.Began || touchOne.phase == TouchPhase.Began)\n        {\n            initialDistance = Vector2.Distance(touchZero.position, touchOne.position);\n            initialScale = targetTransform.localScale;\n        }\n        else // fingers moved\n        {\n            currentDistance = Vector2.Distance(touchZero.position, touchOne.position);\n            if (Mathf.Abs(initialDistance - currentDistance) &lt; 0.01f || Mathf.Approximately(initialDistance, 0)) return;\n            factor = currentDistance / initialDistance;\n            targetTransform.localScale = initialScale * IntensifyBySensibility(factor);\n            targetTransform.localScale = ClampVector3(targetTransform.localScale);\n        }\n    }\n \npublic Vector3 ClampVector3(Vector3 v)\n    {\n        if (v.x &lt; minScale) return Vector3.one * minScale;\n        if (v.x &gt; maxScale) return Vector3.one * maxScale;\n        return v;\n    }\n \n    public float IntensifyBySensibility(float value)\n    {\n        return (((value - 1) * sensibility) + 1);\n    }\nPinchScaler.cs"},"Unity/12--Ejemplos-de-Unity/Prints-como-pros-Imprimir-por-pantalla-Singleton-Máscara-Filtrado-Filtro-Mensajes-Verbose-Debug":{"title":"Prints como pros Imprimir por pantalla Singleton Máscara Filtrado Filtro Mensajes Verbose Debug","links":[],"tags":[],"content":"Tengo una clase Singletone llamada GameEngine que implementa un enumerado uint con atributo [System.Flags]\npublic class GameEngine : MonoBehaviour\n    {\n        public static GameEngine instance;\n \n        // answers.unity.com/answers/1767255/view.html\n        [System.Flags]\n        public enum VerboseEnum\n        {\n            Nothing = ~1,\n            Speed = 1&lt;&lt;1,\n            Physics = 1&lt;&lt;2,\n            TrafficLightChanges = 1&lt;&lt;3,\n            SolutionConditions = 1&lt;&lt;4,\n            GameTrace = 1&lt;&lt;5,\n            Everything = ~0\n        }\n        \n        public VerboseEnum verbose;\n \nprivate void Awake()\n{\n            if (instance == null)\n                instance = this;\n}\nDespués implemento 2 métodos, uno para acceso a la instancia y otro estático para facilitar el acceso\npublic void PrintInstance(string msg, VerboseEnum type)\n        {\n            if (((byte)verbose &amp; (byte)type) != 0)\n                print(msg);\n        }\n \n        public static void Print(string msg, VerboseEnum type)\n        {\n            if (!instance) print(&quot;No GameEngine instance&quot;);\n            instance?.PrintInstance(msg, type);\n        }\n        ``` \n \nPara hacer más cómodo el acceso desde otras clases, les pongo arriba\n \n```cs \nusing static GameEngine;\nde esta forma puede ejecutar los métodos de la siguiente forma\nPrint($&quot;Mi print de debug super chachi&quot;, VerboseEnum.Physics);\nPor último para asignar programáticamente el filtro deberás encadenar los filtros con ors binarios\ngameEngine.verbose = GameEngine.VerboseEnum.GameTrace | GameEngine.VerboseEnum.Speed;"},"Unity/12--Ejemplos-de-Unity/ScriptableObject":{"title":"ScriptableObject","links":[],"tags":[],"content":"using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n \n[CreateAssetMenu(fileName =&quot;NomPorDefecto&quot;, menuName =&quot;ScriptableObjects/Mi pruebita&quot;)]\npublic class ScriptableObjectLevel: ScriptableObject\n{\n    public string holita;\n}\nKeywords\nScriptable Object SO Scriptables Objects"},"Unity/12--Ejemplos-de-Unity/Selección-de-idioma-Dropdown":{"title":"Selección de idioma Dropdown","links":[],"tags":[],"content":"Selección de idioma\nUnity nos da una herramienta selector de idioma con un desplegable flotante automáticamente, pero que luego no está disponible en el juego por razones obvias. Por una parte puedes querer deshabilitarlo para cuando tengas tu selector de idioma. Para ello:\nHay que ir a Edit &gt; Preferences &gt; Localization y desmarcar Locale Game View Menu\n\nAñade Unity.ResourceManager y Unity.Localization a las dependencias del AssemblyDefinition\n\nUna vez hecho eso, tendremos que hacer nuestro propio selector, ellos nos dan uno en el que se usa el Dropdown legacy, pero yo lo he adaptado para el del Text Mesh Pro. El código es el siguiente:\nusing System.Collections;  \nusing System.Collections.Generic;  \nusing UnityEngine;  \nusing UnityEngine.Localization.Settings;  \nusing TMPro;  \n \npublic class LocaleSelector : MonoBehaviour  {\npublic TMP_Dropdown dropdown;\n \nprivate void Awake()\n{\n    dropdown = GetComponent&lt;TMP_Dropdown&gt;();\n}\n \nIEnumerator Start()\n{\n    // Wait for the localization system to initialize\n    yield return LocalizationSettings.InitializationOperation;\n      // Generate list of available Locales\n    var options = new List&lt;TMP_Dropdown.OptionData&gt;();\n    int selected = 0;\n    for (int i = 0; i &lt; LocalizationSettings.AvailableLocales.Locales.Count; ++i)\n    {\n        var locale = LocalizationSettings.AvailableLocales.Locales[i];\n        if (LocalizationSettings.SelectedLocale == locale)\n            selected = i;\n        options.Add(new TMP_Dropdown.OptionData(locale.name.Split(&#039; &#039;)[0]));\n    }\n    dropdown.options = options;\n      dropdown.value = selected;\n    dropdown.onValueChanged.AddListener(LocaleSelected);\n}\n \n  static void LocaleSelected(int index)\n  {\n    LocalizationSettings.SelectedLocale = LocalizationSettings.AvailableLocales.Locales[index];\n}  }\nBásicamente la magia sucede en el método de abajo, donde se asigna el locale seleccionado dentro de la lista LocalizationSettings.AvailableLocales.Locales al locale activo LocalizationSettings.SelectedLocale.\nPuede que te de un error de que la operación Async no sé qué y que no está en el ensamblado y blabla. Lo más seguro es que tengas un AssemblyDefinition y no hayas añadido Unity.ResourceManager como dependencia."},"Unity/2--Técnicas/Addressable":{"title":"Addressable","links":[],"tags":[],"content":"¿Qué es y porque me importa esto?\nPermite la carga y descarga de assets por bloques de forma asíncrona, de tal forma que\n\n\nSe pueda comenzar a jugar sin que el juego se haya descargado al 100%\n\n\nOptimiza la cantidad de memoria utilizada ya que no necesita tener todos los Assets cargados a la vez. p.e. no hace falta cargar los assets de la zona del boss si estás en el tutorial\n\n\nAcelera el inicio del juego\n\n\nLas cosas que carga o que se descarga, se cachean, por lo que acelera una posible recarga de dichos assets\n\n\n¿Como ponerlo en marcha?\n\n\nDescargar el paquete Addressables del Package Manager \n\n\nPara que se monte la wea, debemos abrir el menú Window &gt; Asset Management &gt; Addressables &gt; Groups y le damos a crear, lo cual nos montará la estructura de archivos que necesita por defecto\n\n\n\nAbrimos la carpeta AddressableAssetsData y clicamos AddressableAssetSettings, en el Inspector clicamos en Manage Profiles\nY creamos un pack\n\nReferencias / AssetReference / Añadir assets a un perfil\nUna AssetReference es una referencia a un AddressableAsset que podrá ser cargado e instanciado tal y como se carga un prefab\nPara añadir assets a un perfil, se selecciona el asset concreto, y en el inspector arriba se clica al checkbox Addressable y tada\nCargar un asset desde una referencia\nEl siguiente código carga un asset\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\nusing UnityEngine.ResourceManagement.AsyncOperations;\n \npublic class AssetReferenceUtility : MonoBehaviour\n{\n    public AssetReference objectToLoad;\n    public AssetReference accessoryObjectToLoad;\n    private GameObject instantiatedObject;\n    private GameObject instantiatedAccessoryObject;\n    void Start()\n    {\n        Addressables.LoadAssetAsync&lt;GameObject&gt;(objectToLoad).Completed += ObjectLoadDone;\n    }\n    private void ObjectLoadDone(AsyncOperationHandle&lt;GameObject&gt; obj)\n    {\n        if (obj.Status == AsyncOperationStatus.Succeeded)\n        {\n            GameObject loadedObject = obj.Result;\n            Debug.Log(&quot;Successfully loaded object.&quot;);\n            instantiatedObject = Instantiate(loadedObject);\n            Debug.Log(&quot;Successfully instantiated object.&quot;);\n            if (accessoryObjectToLoad != null)\n            {\n                accessoryObjectToLoad.InstantiateAsync(instantiatedObject.transform).Completed += op =&gt;\n                {\n                    if (op.Status == AsyncOperationStatus.Succeeded)\n                    {\n                        instantiatedAccessoryObject = op.Result;\n                        Debug.Log(&quot;Successfully loaded and instantiated accessory object.&quot;);\n                    }\n                };\n            }\n        }\n    }\n}\ny en el GameObject que contenga este script, se asignará el prefab que cargue\nMe da error\nComprueba que has clicado el tick de Addressable en la parte de arriba del Asset\nBibliografía\nlearn.unity.com/project/getting-started-with-addressables\nNota\nEsta información está actualizado a junio de 2022 y tiene como objetivo la versión 2019.3 de Unity"},"Unity/2--Técnicas/Cambiar-nombre-aplicación":{"title":"Cambiar nombre aplicación","links":[],"tags":[],"content":"\n\nEn Player cambiar ProductName\n\n\nSi lo tienes en una organización en la nube de Unity, tienes que ir a ProjectSettings &gt; Services Seleccionar la organización y pulsar Unlink project\n\n\n\n\n\nCerrar Unity\n\n\nCambiar el nombre a la carpeta principal\n\n\nYa está, al abrir algún script, VS se encargará de renombrar la solución\nBibliografía\nwww.youtube.com/watch \nanswers.unity.com/answers/1302253/view.html (la respuesta de Xonatron y no la marcada como correcta)"},"Unity/2--Técnicas/Cinemachine":{"title":"Cinemachine","links":[],"tags":[],"content":"En el momento de crear la cámara virtual, deberemos tener seleccionada la main camara que viene por defecto\nRotar la cámara\nPara que la vcam rote al rededor del personaje, debemos crear un gameobject vacío dentro del personaje, que lo seguirá en su lugar, es decir, en lugar de seguir al personaje, seguirá al gameobject vacío, de tal forma que al girar dicho gameobject gire la camara quedando el personaje quieto\nSteven es el personaje, FollowTarget es el gameobject vacío\n\n\nOtra forma de rotar la cámara, haciendo más uso de las características predefinidas de cinemachine es mediante el uso de OTRA cámara virtual llamada “FreeLook”.\nTuvimos un problema con el giro de la cámara. Si moviamos un poco la cámara, y movias al personaje hacia adelante, se quedaba contínuamente girando. Imagino que por algo de coger la dir de la camara o yo qué sé. El caso es que existe en cinemachine (al menos, en la cámara de FreeLook) una opción que permite reajustar\nOPCIONES GENERALES\nDamping tarda unos segundos en volver a la posición centrada.\nLookahead cambia un poco el punto central en el momento de moverse, cuando te quedas parado, vuelve a centrarse"},"Unity/2--Técnicas/Crear-una-base-de-datos":{"title":"Crear una base de datos","links":[],"tags":[],"content":"Hay que descargar sqlite.org/download.html para Windows, y mete los archivos que contiene sqlite3.def y sqlite3.dll a la carpeta Plugins y copiar el archivo ubicado en\nC:\\Program Files\\Unity\\Hub\\Editor\\2022.1.2f1\\Editor\\Data\\MonoBleedingEdge\\lib\\mono\\unityjit-win32 cambiando la versión por la que corresponda (subrayada en el enlace)\n\nDebe quedar así\n\nLo primero es importar SQLite en el código con\nusing Mono.Data.Sqlite; \nusing System.Data;\nPara crear una conexión con la base de datos creamos el siguiente método (más info como comentarios en el código)\nprivate IDbConnection CreateAndOpenDatabase() {\n \t// Open a connection to the database.\n        string dbUri = &quot;URI=file:MyDatabase.sqlite&quot;; // Aquí definimos el nombre de la base de datos, en este caso se llama &quot;MyDatabase&quot;\n        IDbConnection dbConnection = new SqliteConnection(dbUri);\n        dbConnection.Open();\n \n        // Aquí creamos la tabla \n        IDbCommand dbCommandCreateTable = dbConnection.CreateCommand();\n        dbCommandCreateTable.CommandText = &quot;CREATE TABLE IF NOT EXISTS HitCountTableSimple (id INTEGER PRIMARY KEY, hits INTEGER )&quot;;\n        dbCommandCreateTable.ExecuteReader(); // esta instrucción creo que hace efectiva la query\n \n        return dbConnection;\n}\nBibliografía\nwww.mongodb.com/developer/code-examples/csharp/saving-data-in-unity3d-using-sqlite/"},"Unity/2--Técnicas/Cómo-funcionan-los-Quaternion":{"title":"Cómo funcionan los Quaternion","links":[],"tags":[],"content":"Los Quaternions son buenos para evitar el Gimbal lock o, en español, el bloqueo del cardán\nLos Quaternion son cuatro representaciones (que no ejes) del mismo objeto dependiendo de su posición, y la combinación de las cuales, dan lugar a la rotación final. Ejemplo:\nPor defecto, la posición original es w=1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBibliografía\nwww.youtube.com/watch"},"Unity/2--Técnicas/Joints":{"title":"Joints","links":[],"tags":[],"content":"Tendremos hasta 3 elementos\n\n\nel ancla\n\n\nla conexión (el palo, cadena..) conecta el extremo (si lo hubiese) con el ancla\n\n\nEl extremo\n\n\nEl ancla es el punto que hará de pivote, y tendrá un rigid body en kinematic\nLa conexión tendrá un riggid body, colider (? y configurable joint. Este configurable joint apuntará al ancla, habrá que configrar los limites para oscile desde donde queremos, cambiamos los valores de “anchor” para que coincida con la posición en la que tenemos el ancla, x, y, z Motion tiene que estar en “Locked”\nEl extremo será hijo de la conexión, si quisieramos que golpease, podría llevar un collider"},"Unity/2--Técnicas/Luces-2D":{"title":"Luces 2D","links":[],"tags":[],"content":"Para todo esto es necesario el Universal Render Pipeline (URP): Package Manager &gt; Unity Registry &gt; Universal RP\nEl emissive map marca qué partes van a brillar, se trata de un sprite cuyas partes pintadas en blanco emitirán luz, las negras no, y las intermedias tendrán un efecto acorde.\n\n\nBibliografía\nBrackeys How to make 2D GLOW in Unity!\nKeywords\nLight Lights luz Lightmap"},"Unity/2--Técnicas/Malla-paramétrica-en-Blender":{"title":"Malla paramétrica en Blender","links":[],"tags":[],"content":"Desde blender\nCreamos la figura básica, a partir de la cual queramos que se generen deformaciones.\nEn mi caso y siguiendo el tutorial, he puesto un cubo alargado y varias divisiones\n\nDesde el menu de Propiedades del objeto, creamos una Shape Key\nDe nuevo, vamos a tomar esta forma como base para las siguientes\n\nTeniendo la forma base (Basis) seleccionada, le damos de nuevo al “más” para crear otra forma a partir de la anterior que voy a llamar “Tree”, si nos fijamos pone que esta nueva será relativa a la primera que creamos (Basis). Pero podemos cambiarlo para que derive de otra forma base\n\nSin más, vamos al modo editar y creamos el resultado final, en mi caso, un pino\nCuando volvamos al modo objeto, la figura desaparecerá, pero no te asustes, está guardada en el estado que creamos antes “Tree”\n\nSi volvemos al menú anterior podremos modificar el campo “value” para ver cómo va pasando de una figura a la otra\n\nPodemos modificar el valor de Max para limitar la fusión o incluso exagerarla, tal y como se ve en la captura\n\nCreo que para exportarlo simplemente hay que hacerlo en fbx y fijarse que está Mesh seleccionado\n\nDesde Unity\nUna vez disponemos del fbx, podemos ponerlo en la escena. Se importará como un Skinned Mesh Renderer, el cual expone los “value” que teníamos en blender con el nombre BlendShapes\n\nEstos valores pueden ser perfectamente animable, sin embargo hay que tener en cuenta que mientras que en Blender el rango era de 0 a 1, en Unity lo es de 0 a 100\n\nBibliografía\n[En Blender] youtu.be/OITWiN8Dplo\n[En Unity] youtu.be/unFd5a9-Ga8\nKeywords\nParametric mesh blend shapes blender unity Shape Keys BlendShapes modelo paramétrico"},"Unity/2--Técnicas/Migrar-a-URP":{"title":"Migrar a URP","links":[],"tags":[],"content":"Instalar desde PackageManager Universal RP\nCrear una carpeta llamada “Config” en “Assets”\nDentro de la carpeta Config, botón derecho &gt; Create &gt; Rendering &gt; Universal Render Pipeline &gt; Pipeline Asset (Forward Renderer)\nEn Project Settings, Graphics y ponemos el que acabamos de crear en Scriptable Renderer \n\n\n                  \n                  Opcional \n                  \n                \n\nEn Project Settings, Player, Other Settings, cambiar Color Space de Gamma a Linear\n\n"},"Unity/2--Técnicas/Mostrar-cam-de-un-dispositivo":{"title":"Mostrar cam de un dispositivo","links":[],"tags":[],"content":"WebCamTexture es la encargada de manejar de quién será obtenida la imagen, pero para mostrarla por pantalla necesitamos un RawImage\nLo primero es crear un objeto WebCamTexture. Para indicarle de qué dispositivo tiene que leer, podremos acceder al campo estático WebCamTexture.devices\nAhí están listados todos los nombres p.e. (WebCamTexture.devices[0].name)\nEntonces se hace lo siguiente\nwebcamTex = new WebCamTexture(WebCamTexture.devices[0].name, 640, 640)\nEste webcamTex lo podemos pasar tal cual al RawImage que tengamos en el canvas\ncamRenderer.texture = webcamTex;\nY ya solo quedaría activar la\ncamara webcamTex.Play();\nSi quieres cambiar de dispositivo, cambia el nombre\nwebcamTex.deviceName = WebCamTexture.devices[value].name\ny vuelve a darle\nwebcamTex.Play()\nPackage\nPuedes descargar una implementación desde mi Drive desarrollada para Unity 2021.3.17f1 y minAndroidSDK=23\no copiar el siguiente código:\nusing System.Linq;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\n \npublic class ShowWebcam : MonoBehaviour\n{\n    public RawImage camRenderer;\n    public TMP_Dropdown camerasDropdown;\n    private WebCamTexture webcamTex;\n    public int camWidth = 640;\n    public int camHeight = 640;\n \n    void Start()\n    {\n        if (camRenderer == null)\n            camRenderer = GetComponent&lt;RawImage&gt;();\n        if (camerasDropdown != null) \n            FillCamsDropdown();\n        webcamTex = new WebCamTexture(WebCamTexture.devices[1].name, camWidth, camHeight);\n        camRenderer.texture = webcamTex;\n        StartCamera();\n    }\n \n    private void OnEnable()\n    {\n        camerasDropdown.onValueChanged.AddListener(CameraChanged);\n    }\n \n    private void OnDisable()\n    {\n        camerasDropdown.onValueChanged.RemoveListener(CameraChanged);\n    }\n \n    private void CameraChanged(int value)\n    {\n        webcamTex.deviceName = WebCamTexture.devices[value].name;\n        camRenderer.texture = webcamTex;\n        webcamTex.Play();\n    }\n    private void FillCamsDropdown()\n    {\n        string[] devices = WebCamTexture.devices.ToList().Select(e =&gt; e.name).ToArray();\n        foreach (string d in devices)\n            camerasDropdown.options.Add(new TMP_Dropdown.OptionData(d));\n        camerasDropdown.value = 0;\n    }\n    public void StartCamera()\n    {\n        webcamTex.Play();\n    }\n    public void StopCamera()\n    {\n        webcamTex.Stop();\n    }\n}\nKeywords: Android"},"Unity/2--Técnicas/Máscaras":{"title":"Máscaras","links":[],"tags":[],"content":"UI\nPara crear una máscara en la UI necesitamos el componente Mask o RectMask2D (no confundir con Sprite Mask). El componente Mask utiliza un Stencil Shader para enmarcar los componentes de la interfaz. RectMask2D solo puede enmascarar en forma rectangular, pero parece ser más eficiente. \nPara que se aplique la máscara, la imágen (o componente en general) tiene que ser hija de esta.\n\nMundo\nNecesitamos el GameObject Sprite Mask del menu 2D.\nEn el campo Sprite de dicho gameobject, se le pone la imagen de la cual tomará la forma para hacer la máscara\n\nEn el resto de GameObjects Sprite, vamos al componente Sprite Renderer y podemos editar cómo se comportará con respecto a la mascara gracias a la propiedad Mask Interaction\n\nAjustes\nAlpha Cutoff sirve para determinar hasta qué punto muestra usando una máscara semitransparente\n\n\n\nCreo que por defecto, las Sprite Mask afectan a todo Sprite Renderer que tenga activada la interacción, creando este efecto:\n\nPara solucionar este problema se puede activar Custom Range en las correspondientes Sprite Mask\nY elegir si prefieres discriminar por Sorting Layer o por Order in Layer\nBajo la siguiente configuración (Steven Estella tiene Order in Layer = 0) se aplica solo a los Sprite Renderer con Sorting Layer = 0\n\nPor tanto, podemos poner a Steven Rombo a Sorting Layer = 1 y, pese a tener un Sorting Layer superior  a Steven Estrella quedar por encima , al no afectarle la máscara estrella, la parte baja de la estrella ya no se renderiza y queda así.\n\nSi por el contrario no quieres emplear los Order in Layer porque, simplemente no te encaja está la alternativa de los Sorting Layers que permite crear grupos de Sprite Renderers a los cuales se aplicarán las máscaras seleccionadas.\nPara volver a la situación anterior, pondremos todos los Order in Layer a 0\nPara ello tenemos que crear 2 grupos que voy a llamar “Estrella” y “Rombo”\n\nAplicamos tanto a la Sprite Mask como al Sprite Renderer la capa correspondiente y listo\n\n\n\n\n"},"Unity/2--Técnicas/Orden-de-dibujado":{"title":"Orden de dibujado","links":[],"tags":[],"content":"World\nSe sigue el siguiente orden para decidir en qué orden se dibujan los sprites:\n\n\nSorting Group que explicaré luego\n\n\nSe comprueba el Sorting Layer (cuánta más baja sea su ubicación, o dicho de otra forma, cuanto mayor el índice del layer, más próximo a la cámara se dibujará)\n\n\n\n\n\nel Order in Layer: A empate de Sorting Layer, se emplea el Order in Layer para decidir cuál se muestra por encima de cuál\n\n\nEn caso de empate tanto en Sorting Layer como en Order in Layer, se emplea la Z del Transform (estando la cámara en la posición por defecto, a más negativa la Z (hasta -21, inclusive) más cerca; y viceversa).\n\n\n\n\n                  \n                  Note\n                  \n                \n\nCreo que si hay Sorting Group, lo que hace es sobreescribir los valores de Sorting Layer y Order in Layer del grupo (Sprite Renderer en el que se encuentra y todos los hijos).\n\n\n\nCanvas\nPor defecto Canvas Overlay es el que más cercano se dibuja, Canvas World se dibuja en medio y Camera Canvas se dibuja al fondo\nEl Canvas World se comporta como un Sprite Renderer, en el sentido explicado en sección World\nTanto World como Camera Canvas puede cambiar el Order in Layer para verse dibujados en otro orden, pero nunca por encima del Overlay y viceversa, Overlay no puede estar nunca por detrás de los otros dos tipos de Canvas, el Order in Layer en este caso solo sirve para interacción entre otros Overlay\n"},"Unity/2--Técnicas/Particularidades-a-la-hora-de-suscribir-un-evento-al-click-de-un-botón":{"title":"Particularidades a la hora de suscribir un evento al click de un botón","links":["Unity/12--Ejemplos-de-Unity/DontDestroyOnLoad"],"tags":[],"content":"Si cambias de escena, ten en cuenta que debe estar en DontDestroyOnLoad (patrón singleton)\nAdmite métodos privados de otro script\nAl suscribirlo por código no aparecerá en el Inspector, ni siquiera en modo debug\nHay 3 formas de hacerlo:\nbutton.onClick.AddListener(OnPoolClick); // Metodo 1 (sin parámetros)\nbutton.onClick.AddListener(() =&gt; OnPoolClick()); // Metodo 2 (lambda) podría tener parámetros\nbutton.onClick.AddListener(delegate {TaskWithParameters(&quot;Hello&quot;); }); // Método 3 (delegado con parámetros)\n \nvoid OnPoolClick()\n{\n    //Codigo\n}\n \nvoid TaskWithParameters(string s) {\n    print(s);\n}\nKeywords\nOnClick AddListener boton button listener"},"Unity/2--Técnicas/PostProduccion":{"title":"PostProduccion","links":[],"tags":[],"content":"\n\n\n\nKeywords\nPostProduccion post processing postprocessing"},"Unity/2--Técnicas/Recorte-de-sprites":{"title":"Recorte de sprites","links":[],"tags":[],"content":"Para el recorte de sprites, se utiliza el editor de sprites\nEn el editor, tenemos la posibilidad de visualizar solo el canal alpha, lo que nos permitirá ver los sprites mucho mejor (arriba a la derecha del editor)\nLa pestaña (arriba izquierda del editor) slice te permite realizar los cortes automáticamente\nExisten 3 tipos de recortado automático:\n\n\nDelete existing: Los recortes que ya tuviera, los elimina, y crea todos los cortes de cero.\n\n\nSmart: Creo que te recalcula de forma inteligente, partiendo de lo que ya tengas.\n\n\nSafe: Deja los recortes que tengas y añade los que falten\n\n"},"Unity/2--Técnicas/Rotación-basada-en-otro-vector-o-el-ratón":{"title":"Rotación basada en otro vector o el ratón","links":[],"tags":[],"content":"Vector3 target = Camera.main.ScreenPointToRay(Input.mousePosition).origin;\ntarget.x = target.x - transform.position.x;\ntarget.y = target.y - transform.position.y;\nfloat angle = Mathf.Atan2(target.y, target.x) * Mathf.Rad2Deg;\ntransform.rotation = Quaternion.Euler(new Vector3(0, 0, angle)); "},"Unity/2--Técnicas/Shaders-y-Materiales":{"title":"Shaders y Materiales","links":[],"tags":[],"content":"Recursos\nAdri ha creado estos subgraph para pillar las luces y sombras\nMateriales\nPara crear un material debemos tener claros los tipos de Shaders y sus diferentes usos\nConfiguración Shader Graph\nDepth texture es mapa de profundidad que genera el render, y guarda en el buffer. Lo que nos permite saber la distancia de los objetos a la camara (nos devuelve un valor entre menos mucho y mucho )\nOpaque texture: Lo que renderiza la pantalla (Scene Color) omitiendo objetos transparentes. Esto nos permite crear filtros (pantallas que rendericen lo que tienen detrás y no sea transparente (para que un sprite no sea transparente, se le tiene que poner un material Lit por ejemplo))\nAmbos valores se pueden configurar en el archivo URP Project Settings &gt; Graphics &gt; Scriptable Graphics, haces click en el archivo y desde el Inspector podremos encontrar las casillas de Depth texture y Opaque texture que hablabamos antes\nShaders\nA parte de los Shaders por defecto, tenemos unos maravillosos disponibles en los diferentes Render Pipeline\nPara poder crear un shader personalizado editable con el Shader Graph deberemos crear un Shader propio del programa, por ejemplo: Unlit Shader Graph o Lit Shader Graph, disponibles desde Botón derecho &gt; Create &gt; Shader Graph &gt; Built in &gt; Simple Unlit\nAl dar doble click sobre el archivo que acabamos de crear, se abrirá la ventana de Shader Graph. NOTA: para el tutorial he creado Unlit\nPodremos ver esta pantalla\n\nA la izquierda tenemos las variables\nEn el centro, el entorno de trabajo, con dos grandes bloques, Vertex, para tema de movimiento y Fragment, para tema de color y transparencia\nA la derecha tenemos configuración general (Graph Settings) o específica del nodo que tengamos seleccionado (Node Settings)\nY abajo derecha la previsualización del resultado\nNodos importantes y ejemplo\nScene Color: Es la textura de la renderización de la escena en cada punto dentro del objeto que lleva el shader.\n\nScene Position: Nos indica la posición de los píxeles en la pantalla\n\nLe hemos pasado el Scene Position a Scene Color, esto lo dejará igual que estaba, ya que toma los mismos valores que ya estaban.\nPonerlo de esta forma nos permite meter entre medias algunas modificaciones.\nNormal Vector: Nos devuelve hacia dónde mira cada polígono en el cual están dibujados los píxeles (la tangente).\nTilling and Offset: Nos permite repetir una textura y desplazarla en X e Y\nNodos importantes externos\nSub Graphs: Se pueden crear nodos propios o importar a través de Packages. Quedarán accesibles desde el apartado Sub Graphs al crear un nuevo nodo.\n\nLightning for Shader Graph: Es un package que añade nuevos nodos para acceder a la información de luces y sombras de la escena.\n\n\nMain Light: Devuelve la dirección de la luz principal (Direction), el Color de la luz (Color), un mapa de sombras según la distancia a la luz (DistanceAtten) y un mapa de sombras arrojadas por otros objetos (ShadowAtten)\n\n\nAditional Lights: Devuelve un mapa de color con la iluminación de todas las luces distintas a la principal en la escena (Diffuse) y un mapa de color con todos los especulares calculados (Specular)\n\n\nDirect Specular: Permite calcular el brillo especular pasando la dirección y el color de la luz. Devuelve un mapa de color del reflejo.\nKeywords\nsub-graph subgraf sub-graf"},"Unity/2--Técnicas/Tilemap":{"title":"Tilemap","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/2--Técnicas/Transformar-la-posición-del-ratón-a-la-posición-en-la-escena,-Screen-to-WorldPoint":{"title":"Transformar la posición del ratón a la posición en la escena, Screen to WorldPoint","links":[],"tags":[],"content":"Transformar la posición del ratón a la posición en la escena\nPor defecto, la posición del ratón que obtenemos con Input.mousePosition corresponde a la posición en la UI, para transformar dicha posicion en la correspondiente en la escena, es necesario el siguiente código:\nCamera.main.ScreenToWorldPoint(Input.mousePosition); \nNo obstante, esta posición es relativa a la cámara (z = -10, o la que sea), para solucionar este sencillo problema, se puede modificar de la siguiente forma\nCamera.main.ScreenToWorldPoint(Input.mousePosition + Vector3.forward * Camera.main.transform.position.z * -1);"},"Unity/2--Técnicas/Unity-Presets":{"title":"Unity Presets","links":[],"tags":[],"content":"Son el conjunto de configuraciones de un componente y sirven para estandarizar una configuración concreta\n\n\nPodemos poner cambios y luego aplicar el nuevo preset a los componentes que necesitemos para que todos tengan esa config\n"},"Unity/3--Programación/Asincronía-en-Unity-Async-Wait":{"title":"Asincronía en Unity Async Wait","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/3--Programación/Assembly":{"title":"Assembly","links":["Unity/4--Eficiencia-y-optimización/4.1---Buenas-prácticas/Evita-el-código-espaguetti"],"tags":[],"content":"¿Qué es?\nEs un conjunto de código y recursos que se compila o bien en un ejecutable (exe) o una dll (librería de enlace dinámica). Por defecto Unity incluye todo el código en una Assembly predefinido llamada Assembly-c-sharp.dll. Sirve para organizar el código.\n¿Para qué lo quiero?\nPodemos definir varios para que Unity solo tenga que recompilar las partes que hayas cambiado en ver de todo el proyecto\nSirve para organizar, que permite trocear tu proyecto y mantenerlo en piezas pequeñitas.\nCada Assembly representa un sistema de limites, lo que te limita a la hora de escribir código espaguetti.\nComo lo añado\nSimplemente tienes que ir a la carpeta en la que tienes el código y crear un Assembly con botón derecho (Create &gt; Assembly Definition) eso es todo, puedes comprobar que funcionó clicando a un script y mirando en el inspector\n\nAhora todo está lleno de errores T-T\nEs un resultado de los límites de los que comentábamos en el apartado *¿para qué lo quiero? *\nAhora tenemos clases que dependen de clases que están en un Assemble completamente diferente. Es el momento de decidir si queremos permitírselo o no. En el ejemplo, la dependencia era por una clase llamada Core (nucleo) es normal que esa clase sea dependencia de muchas otras, por lo que tiene sentido que se lo permitamos. Para ellos, vamos al Assembly que depende del otro y en el inspector añadimos en Assembly Definition References el Assembly del que dependemos\nBibliografía\nyoutu.be/HYqOSkHI674"},"Unity/3--Programación/Atributos":{"title":"Atributos","links":[],"tags":[],"content":"RequireComponent\nSi añades el componente a un GameObject, añadirá automáticamente otro componente del tipo indicado, además impedirá borrarlo\n[RequireComponent(typeof(Rigidbody))]\nRequireComponent\nRigidbody\nContextMenu\nAñade un botón al menú textual del componente con el nombre dado por como argumento (en el ejemplo Test). Si clicas en dicho botón, se ejecuta el método justo debajo (en el ejemplo, el método pruebita que lanza un mensaje a la consola)\n[ContextMenu(&quot;Test&quot;)]\nvoid Pruebita()\n{\n    Debug.Log(&quot;LA PRUEBITA&quot;);\n}\n\nHeaderAttribute\nSepara las propiedades del código en secciones con el nombre dado como argumento\n[Header(&quot;Health Settings&quot;)]\npublic int health = 0;\npublic int maxHealth = 100;\n \n[Header(&quot;Shield Settings&quot;)]\npublic int shield = 0;\npublic int maxShield = 0;\n\nExecuteInEditMode\nPermite ejecutar código incluso sin poner el modo Play\n[ExecuteInEditMode]\nGradientUsage\nSirve para que aparezca un editor de gradiente. Importante: Se debe indicar el uso o no de HDR como argumento\n[GradientUsage(true)]\npublic Gradient test;\n\n\nHideInInspector\nPermite ocultar una variable en el inspector pero ser serializada\n[HideInInspector]\n \nint p = 5;\n\nInspectorName\nPermite poner un nombre en el inspector diferente al del código\n[InspectorName(&quot;16 bits&quot;)]\n\nMinAttribute\nPermite poner límite inferior a una variable\nMultilineAttribute\nPermite que un string pueda ser editado como un campo de texto multilínea\n\nRange\nGenera un slider mediante indicándole mínimo y máximo\n// This integer will be shown as a slider,\n// with the range of 1 to 6 in the Inspector\n[Range(1, 6)]\npublic int integerRange;\n \n// This float will be shown as a slider,\n// with the range of 0.2f to 0.8f in the Inspector\n[Range(0.2f, 0.8f)]\npublic float floatRange;\n\nMenuItem\nusing UnityEngine;\nusing UnityEditor;\n \npublic class MyPlayer : MonoBehaviour\n{\n    [MenuItem(&quot;AssetDatabase/LoadAssetExample&quot;)]\n    static void ImportExample()\n    {\n        Texture2D t = (Texture2D)AssetDatabase.LoadAssetAtPath(&quot;Assets/Textures/texture.jpg&quot;, typeof(Texture2D));\n    }\n}\n\nMirar SerializeField y Serializar\nFormerlySerializedAs\nPara variables que han cambiado de nombre\n[FormerlySerializedAs(&quot;hitpoints&quot;)]\n    public int health;\n    ``` \n \nCUIDADO ⚠️\n \nTen cuidado porque pensaba que una vez Unity se lo había tragado, ya podías borrar el atributo, pero luego al cambiar de escena se pierde la ref\n \n[docs.unity3d.com/ScriptReference/Serialization.FormerlySerializedAsAttribute.html](docs.unity3d.com/ScriptReference/Serialization.FormerlySerializedAsAttribute.html)\n \n# Keywords\n \nFormerly Serialized As serializadas anteriormente antes llamada llamadas referencia"},"Unity/3--Programación/Cambiar-opacidad-material-por-código":{"title":"Cambiar opacidad material por código","links":[],"tags":[],"content":"Para cambiar opacidad:\nRenderer.material.SetColor(&quot;_Color&quot;, new Color(1, 1, 1, 0.5f));"},"Unity/3--Programación/Como-funcionan-las-corrutinas":{"title":"Como funcionan las corrutinas","links":[],"tags":[],"content":"Hasta donde yo entiendo, la corrutina es una función que tiene la capacidad de crear un hilo diferente al principal (no bloquea el proceso principal) y se inicia con StartCoroutine(MetodoDeCorrutina(algunaVariableOpcional))\nDentro de la corrutina, sin embargo, sí podemos bloquear el hilo para lo que necesitemos, esto se hace con yield return\nEn resumen: yield return bloquea el hilo; StartCoroutine, no\nEjemplo\n StartCoroutine(playEngineSound());\n ``` \n \n```cs \n   IEnumerator playEngineSound()\n    {\n        // We set start of engines sound\n        _audio.clip = startEngineClip;\n        _audio.Play();\n        // We wait until it&#039;s over\n        yield return new WaitForSeconds(_audio.clip.length);\n        // then, we change the clip to the one that must be looped\n        // it corresponds to the sound of the engines continously working\n        _audio.clip = loopEngineClip;\n        // The AudioSource plays in loop the sound of engines running\n        _audio.Play();\n    }\n    ``` \n \n# Otro ejemplo\n \n```cs \npublic void FuncionNormal() { // Esta función NO se bloqueará en ningún momento\n\tprint(&quot;Primer mensaje&quot;);\n\tStartCoroutine(FuncionCorrutina());\n\tprint(&quot;Segundo mensaje&quot;);\n}\n \npublic IEnumerator FuncionCorrutina() { // Esta función SÍ se bloquea\n\tyield return WaitForUserInput();\n\tprint(&quot;El usuario pulsó!&quot;)\n}\n \npublic IEnumerator WaitForUserInput() {\n        while (!Input.GetKeyDown(KeyCode.Return)) { // Espera hasta que pulsa enter\n\t\tprint(&quot;...&quot;);\n\t\tyield return null;\n\t}\n}\n \nLo que sale por consola:\nPrimer mensaje\n...               (Se ha iniciado la corrutina y ya ha enviado un msj)\nSegundo mensaje   (El hilo principal se sigue ejecutando)\n...\n...\n...               (Sigue mandando mensajes mientras no se pulse)\n...\n...\nEl usuario pulsó! (Al pulsar, la corrutina sigue su curso)\nCoroutineExample.cs\nKeywords\ncorutinas coroutine corutine"},"Unity/3--Programación/Cómo-funciona-Time.deltaTime":{"title":"Cómo funciona Time.deltaTime","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/3--Programación/Dots/Burst-compiler":{"title":"Burst compiler","links":[],"tags":[],"content":"Para poder usar este compilador, se deben emplear tipos primitivos o estructuras que solo contengan tipos primitivos\nAñade librerías de alto rendimiento para ser usadas por el compilador. Empleando tipos primitivos y arrays especializados:\n\n\nUnity.Mathematics\n\n\nUnity.Collections\n\n\nUnity.Graphics (Para renderizar, solo URP/HDRP)\n\n"},"Unity/3--Programación/Dots/Dots":{"title":"Dots","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\n¿Qué es?\nEs una nueva forma de trabajar que está implementando Unity\n¿Por qué es mejor?\nEstá enfocada en 3 pilares fundamentales:\nECS (Entity Component System). Relacionado con la memoria y la información (data). Sirve para que el procesador tenga menos “fallos” (se llaman así) al acceder a la info en la cache. Vamos, que es más eficiente en cuanto a lectura de datos. Por lo visto también es más escalable.\nJobs (C# Jobs System) para programación multihilo. (proceso en paralelo, muchísimo más eficiente)\nBurst compiler (en lugar de Roslyn supongo) Genera código nativo para que el hardware lo ejecute de forma más eficiente u óptima.\n¿Cómo funciona?\nSe compone de 3 packages, uno para cada pilar y se pueden usar de manera independiente.\nHan preparado un tuto para ECS aquí y más info aquí\nTambién hay un proyecto ultra lightweight para desarrollar juegos para móviles muy limitados aquí\n¿Cómo se instala?\nEn un proyecto URP o HDRP debes entrar en el Package Manager y, como está en desarrollo, hay que añadir por nombre y poner (se supone que en este order (según el tipo del video de Youtube y a 12/03/2023):\n\ncom.unity.rendering.hybrid\n\nSin embargo, a mi no se me añadieron las depencias, así que probablemente hay que hacerlo como lo dicen (aunque no lo explicitan) en el manual de Unity (12/03/2023):\n\n\ncom.unity.entities\n\n\ncom.unity.entities.graphics\n\n\ncom.unity.dots.editor\n\n\nAunque creo que con que instales el primero, se te instalan los demás (como tiene sentido, compruebalo por si acaso)\nEs recomendable ahora ponerse el layout que preparé para trabajar cómodamente con este sistema (otros layouts aquí)\nSi entramos en Project Settings &gt; Editor y bajamos hasta Enter Play Mode Settings, podemos activar Enter Play Mode Options, lo cual hará que Play Mode sea más rápido. Este magia negra tiene sus limitaciones que pueden verse en algún sitio de aquí (según el tipo del vídeo)\nComprobaciones, por si acaso:\n\n\nProject Settings &gt; Graphics Debería ser URP o HDRP\n\n\nProject Settings &gt; Player &gt; Other Settings &gt; Rendering &gt; Color Space Debe ser Linear\n\n\nEn la pestaña Jobs &gt; Burst &gt; Enable Compilation esto es primordial y nos permitirá aumentar increíblemente el rendimiento.\n\n\n¿Cómo se usa?\nPara que los GameObjects se conviertan en entidades debemos meterlos en una sub escena. Entonces en la jerarquía, botón derecho &gt; Nueva sub escena\nInspector\n\n\n\nConvertir GameObjects a Entities (Subescenas)\nLa subescenas se pueden cerrar con estos dos botones\n\nSin embargo, los GameObjects quedarán cargados hasta haber pulsado Unload\n\nProgramación\nInstancias (carpetas y Baker)\nEstructura de carpetas para el código\n\nEste Script está en ComponentsAndTags\nComo Entities no maneja objetos → usamos Struct\nComo Entities no maneja GameObjects → usamos Entity\nCreo que usamos float2 porque viene de Mathematics, librería especial para BurstCompiler\nNótese que estamos implementando IComponentData, no sé para qué, pero creo que es obligatorio\nComponentsAndTags/GraveyardProperties.cs\n\nSin embargo, este código no lo podemos poner en un GameObject porque no hereda de MonoBehaviour, por lo que crearemos un Custom Baker\nLo que haremos será crear un script normal MonoBehaviour en AuthoringAndMono y copiar todos los campos que creamos en el Struct pero cambiando el Entity por GameObject, ya que Entity no es un tipo editable (por lo menos desde el Inspector)\nAuthoringAndMono/GraveyardMono.cs\n\nY aquí viene la clave (el Baker) que se encargará de inicializar el struct con los valores que obtiene del componente GraveyardMono\nEn el mismo archivo (GraveyardMono.cs) creamos una nueva clase que herede de Baker&lt;&gt; con nuestra recien creada clase MonMonoBehaviour entre diamantes.\nE implementamos el método abstracto Bake() tal y como se ve en la captura\nAuthoringAndMono/GraveyardMono.cs\n\nGracias a lo que hemos hecho, ahora consta como EntityComponent\nEl 44 que sale en el prefab es el índice y el 1 que sale tras los dos puntos es la versión\nGameObject que tiene GraveyardMono\n\nSi en Entities Hierarchy clicamos en el circulito y pone Runtime podremos ver el GameObject referenciado por el Component que hemos creado\n\nValores aleatorios\nPor una parte debemos crear una estructura nueva\nRecuerda que debe ser la librería de Mathematics!\n\n\n\n                  \n                  Marcado en rojo lo nuevo \n                  \n                \n\nRecuerda que debe ser la librería de Mathematics!\n\nComprobamos que ha salido bien\n\nAspects (usamos ambos structs)\nEsto nos permitirá combinar varios ComponentData en un mismo coso y nos dará una interfaz “fácil de usar” para nosotros. Tiene muchas cosas muy chulas, pero al principio será confuso\nTenemos que hacer los struct de Aspect como readonly y partial por temas internos sobre la generación de código automática. Simplemente radiofórmula y ya\nEl campo instance se refiere a la propia entidad asociada a este Aspect\nEl campo TransformAspect se refiere a uno de los dos Aspect que viene por defecto\nEl campo GraveyardProperties debe ser RefRO, que lo que nos generará es una referencia de solo lectura (ReadOnly). La razón por la que queremos que sea readonly es porque cuando empecemos a lanzar un montón de tareas en paralelo que tendrán sus correspondientes dependencias, se deben poder leer en paralelo pero no escribir en ellas, ya que para escribir hay que ser muy cauteloso y dice algo de que Unity se encarga de no sé qué y que GraveyardProperties estará estático durante toda la ejecución\nEn el campo de GraveyardRandom sí necesitamos tener derechos de escritura porque vamos a estar generando números aleatorios, ya que va a estar cambiando la seed\n(añadiremos más cosas según avancemos)\n\nY teóricamente debería verse\n\nSystems\nISystem es la forma preferente de crear código ejecutable ya que es completamente compatible con BurstCompiler, sin embargo, si tienes problemas, se puede cambiar a SystemBase\nOnCreate equivale a Start o Awake\nOnDestroy para cuando se destruye\ny\nOnUpdate se ejecuta cada frame\n\nTengo un problema\nLa tarea previa lee de una propiedad en la que se esta escribiendo\nInvalidOperationException: The previously scheduled job LocalToWorldSystem:ComputeRootLocalToWorldJob reads from the ComponentTypeHandle&lt;Unity.Collections.NativeText.ReadOnly&gt; ComputeRootLocalToWorldJob.JobData.LocalTransformTypeHandleRO. You are trying to schedule a new job SpawnZombieJob, which writes to the same ComponentTypeHandle&lt;Unity.Collections.NativeText.ReadOnly&gt; (via SpawnZombieJob.JobData.__GraveyardAspectTypeHandle.GraveyardAspect_TransformAspect_m_LocalTransformCAc). To guarantee safety, you must include LocalToWorldSystem:ComputeRootLocalToWorldJob as a dependency of the newly scheduled job.\nBibliografía\nlearn.unity.com/tutorial/what-is-dots-and-why-is-it-important#5ef9fe65edbc2a002094eff5\nlearn.unity.com/tutorial/entity-component-system#\nblogs.unity3d.com/2019/03/08/on-dots-entity-component-system/\nwww.youtube.com/watch"},"Unity/3--Programación/Dots/ECS-(Entity-Component-System)":{"title":"ECS (Entity Component System)","links":[],"tags":[],"content":"Optimiza teniendo en mente el funcionamiento de la RAM, la cache y la CPU (y su cache también).\nNormalmente programamos orientado a objetos, pero con este método programas orientado a datos, es decir, creando bloques de información del mismo arquetipo (o tipo de dato) para minimizar los fallos de RAM. es algo así como cuando vas a tomar un bit de información, tomas todo un chunk (de 16KB) de información para usarla a la vez\nECS significa:\n\n\nEntity - Indices e ID de la info\n\n\nComponent - La info en sí\n\n\nSystem - Los manejadores de la info (algo así como controllers)\n\n\nComponent\nDebido a que funciona con chunks de 16KB, si tenemos muchos arquetipos con poco info, nos provocará pérdida de espacio en RAM.\nSystem\nCon los System hay que tener MUCHO cuidado con el orden en el que se ejecutan las cosas.\nCada frame está dividido en\n\n\nGrupo de inicialización (no habrá mucho que hacer)\n\n\nGrupo de simulación (donde va la mayoría de cosas)\n\n\nGrupo de presentación (donde se produce el renderizado)\n\n"},"Unity/3--Programación/Dots/Jobs":{"title":"Jobs","links":[],"tags":[],"content":"Para ejecutar en:\n\n\nMain thread → Run()\n\n\nEn un Worker Thread → Schedule()\n\n\nEn paralelo → ScheduleParallel()\n\n\nKeywords\nC# CSharp Jobs System Unity"},"Unity/3--Programación/Inicialización-inline-de-structs":{"title":"Inicialización inline de structs","links":[],"tags":[],"content":"Para la siguiente estructura de ejemplo\npublic struct ClientRpcParams\n{\n\tpublic ClientRpcSendParams Send;\n\tpublic ClientRpcReceiveParams Receive;\n}\nEsto es Send\npublic struct ClientRpcSendParams\n{\n\tpublic IReadOnlyList&lt;ulong&gt; TargetClientIds;\n\tpublic NativeArray&lt;ulong&gt;? TargetClientIdsNativeArray ;\n}\nQuedaría así\nprivate ClientRpcParams _cParams = new ClientRpcParams() {\n\tSend = new ClientRpcSendParams() {\n\t\tTargetClientIds = new ulong[] { ulong.MaxValue }\n\t}\n};"},"Unity/3--Programación/Librerias-Unity":{"title":"Librerias Unity","links":[],"tags":[],"content":"Ir a la web de la librería en NuGet y descargar manualmente\n\nLe cambiamos la extensión de .nupkg a .zip\nAsí podremos acceder a sus dulces, dulces librerías\nEn Visual Studio\nVer &gt; Explorador de soluciones\nEn el explorador de soluciones: Hacemos click derecho en Referencias y Agregar Referencia\n\n\nEn caso de que no esté “Agregar referencia” que es lo más probable:\n\n\nLo más seguro es que haya que instalar Desarrollo de escritorio de .NET\n\n\nOtra posible solución es cambiar en Unity el target de .Net en PlayerSettings &gt; Other settings &gt; Configuration &gt; Api Compatibility Level a .NET 4.x\n\n\n\nEspero que ahora esté lo de Agregar referencia T-T. Si no, tocará buscar en Google…\nAgregar referencia &gt; Examinar… y seleccionas la librería\nEn Unity\nBajo la carpeta Assets, hay que crear una carpeta llamada “Plugins” (imprescindible que se llame así)\nDentro de esa carpeta se arrastran las librerias y ya\n\nReferencias\ndocs.microsoft.com/en-us/visualstudio/gamedev/unity/unity-scripting-upgrade\nstackoverflow.com/questions/56231655/cant-add-reference-in-visual-studio-2019\nPor lo que creo que hay que instalar las herramientas de Visual Studio: “Inside the Visual Studio Installer enable MS Build Tools and VC++ 2019 v16.00 (v160) toolset for desktop. ” github.com/mozilla/DeepSpeech/blob/master/native_client/dotnet/README.rst"},"Unity/3--Programación/Patrón-de-diseño-Command-Unity":{"title":"Patrón de diseño Command Unity","links":[],"tags":[],"content":"¿Qué es?\nEs un patrón de diseño que encapsula la lógica de una acción o evento y la configura para que se pueda llamar después desde otro script.\nEsto mantiene el código limpio, aislado y simplifica el proceso de llamar a un acción o evento.\nEjemplo\nLa acción de mover está anclada a este script en concreto, pero ¿y si quisiéramos que fuera modular y así cualquier script pudiera ejecutar esta acción?\nif(Input.GetKeyDown(Keycode.S))\n{\n  transform.Translate(Vector3.back);\n}\nEncapsulamos esa acción en una clase comando. Ahora esa acción la realiza el comando Execute. Puede parecer un trabajo inútil, pero ahora esta acción se puede almacenar, pasar por parámetro y manipular como necesitemos\nclass MoveCommand\n{\n  Transform moved;\n  \n  public MoveCommand(Transform target)\n  {\n      moved = target;\n  }\n  public void Execute()\n  {\n      moved.Translate(Vector3.back);\n  }\n}\n//then where we detect input\nif(Input.GetKeyDown(Keycode.S))\n{\n  MoveCommand command = new MoveCommand(transform);\n  command.Execute();\n}\nEl uso de este patrón es limitado ya que normalmente los programadores prefieren usar simplemente delegados, sin embargo, es especialmente útil en ciertas situaciones. Ejemplo de ello es el de implementar la funcionalidad deshacer. Como ahora las acciones son objetos, podemos llevar fácilmente un registro y ejecutarlas en sentido inverso."},"Unity/3--Programación/Testing---Pruebas-unitarias":{"title":"Testing - Pruebas unitarias","links":["Unity/3--Programación/Assembly","Unity/3--Programación/Atributos","Unity/2--Técnicas/Addressable","Programación/Lenguajes-de-programación/CSharp/Reflexion-Reflection"],"tags":[],"content":"Para ver Testing con Zenject mirar aquí\n\n\n                  \n                  ] \n                  \n                \n\nPlayMode vs EditMode\nTenemos dos opciones, la de Play y la de Edit.\nEl PlayMode está pensado para codigo que necesita ser ejecutado en una escena en play. Y el EditMode es para codigo que puede ejecutarse en cualquier otro sitio. Dicho de otra forma, PlayMode es para las clases que heredan de MonoBehaviour y EditMode para las que no.\nLos atributos que se utilizan son: [Test] para EditMode y [UnityTest] para PlayMode\nConfigurar el entorno\nCreamos una carpeta en el proyecto llamada Tests\nAbrimos la ventana Test Runner (Window &gt; General &gt; Test Runner)\nSeleccionamos la carpeta Tests y click en Create EditMode Test Asembly Folder\n\nAhora podemos crear nuestro primer script de pruebas, ahora la ventana habrá cambiado y deberemos clicar en Create Test Script in current folder\n\nNecesitamos que todos los scripts a testear estén asociados a un Assembly para que dichos tests puedan acceder al código a probar. Por esa razón, en la carpeta donde esté el código a probar, deberemos crear un assembly. Una vez creado, volvemos al assembly de los pruebas, no el que acabamos de crear y añadimos la referencia (ahora sí) al que acabamos de crear. Es decir, tenemos 2 assemblies, uno se crea automáticamente al crear la carpeta de test, el otro lo creamos manualmente junto al código que queremos probar. En el que se ha creado automático, añadimos la referencia del que está junto a nuestro código.\n\n\n                  \n                  Muy importante \n                  \n                \n\nMuy importante fijarnos que Assembly References esté nunit.framework.dll\n\n\n\nY clicamos aplicar\nLa primera prueba\nEditMode\nAbrimos el script que creamos antes.\nPodemos cambiar el nombre de los métodos y crear más sin problema. Lo único es que esté etiquetado con el atributo Test (Los atributos que se utilizan son: [Test] para EditMode y [UnityTest] para PlayMode)\nConsisten en Assertion (en español afirmación o aseveración) en el cual el primer valor es el esperado, y el segundo el obtenido. ejemplos:\n// Prueba EditMode\n[Test]\npublic void UpTest() \n{\n    Assert.AreEqual(new Vector3(0, 1, 0), Direction.Up);\n}\nPlayMode\nPara el PlayMode debemos tener en cuenta que debemos esperar a que la acción realmente ocurra, por lo que en la línea de yield return, debemos esperar el tiempo correspondiente (una shit, la verdad)\n// Prueba PlayMode\npublic IEnumerator MoveUpTest()\n{\n    var gameObject = new GameObject();\n    var sheep = gameObject.AddComponent&lt;Sheep();\n    sheep.MoveUp();\n    yield return new WaitForSeconds(sheep.JumpDuration);\n \n    Assert.AreEqua(new Vector3(0, 1, 0), sheep.transform.position);\n}\nCarga de Prefabs\nEn el ejemplo anterior hemos creado un GameObject con todos los componentes necesarios, pero esto es poco escalable a medida que el GameObject se haga más complejo. Para evitar esto, podemos instanciar los prefabs directamente con Addressables.\nInstalamos Addressables\n\nAñade Unity.Addressables y Unity.ResourceManager al assembly de test\n\nVe al prefab y activa en la parte de arriba del inspector, la casilla “Addressable” y le asignamos una ruta única\n\nLo cargamos con este método LoadAssetAsync&lt;GameObject&gt;() y con yield return new WaitUntil(() =&gt; zombieTask.IsCompleted) esperamos a que cargue (ambas tareas son imprescindibles) con zombieTask.Result obtenemos finalmente el GameObject (Prefab) a instanciar\nAlternativa\nAunque los Addressables son la mejor opción por lo comentadoaquí, si queremos evitar añadir esa dependencia, podemos depender de la carpeta Resources, pero en lugar de meter todos los prefabs en esa carpeta, ponemos solo un prefab que tenga la referencia de todos los demás prefabs\n\nUsar una escena predefinida\nPero mejor incluso que instanciar prefabs sería que esos prefabs (por lo menos los iniciales) estuvieran ya en la escena\nY esto es bastante más fácil\nPodemos tanto crear una escena dedicada a ciertas pruebas como usar nuestras escenas reales de juego y simplemente cargarlas e, importante, esperar a que cargue igual que hacíamos con la instancia de los prefabs yield return new WaitUntil(() =&gt; task.isDone)\nEn este ejemplo estoy cargando una escena real y poniendo a prueba que efectivamente pueda interactuar con los elementos preexistentes.\nObtengo un GameObject de la escena, lo desactivoy lo vuelvo a activar. Inicio el host y espero para ver los cambios.\n[UnityTest]\npublic IEnumerator MiPruebaQueRequiereUnaEscena()\n{\n    // Cargar la escena de prueba\n    var task = SceneManager.LoadSceneAsync(&quot;Room&quot;);\n \n    yield return new WaitUntil(() =&gt; task.isDone);\n \n    UnityEngine.Debug.Log(&quot;ANTES DE INICIAR&quot;);\n    // Resto de la lógica de la prueba\n    yield return new WaitForSeconds(3);\n    var hud = GameObject.Find(&quot;Network Helper HUD&quot;);\n    hud.SetActive(false);\n \n    yield return new WaitForSeconds(3);\n    hud.SetActive(true);\n    yield return new WaitForSeconds(3);\n \n    NetworkManager.Singleton.StartHost();\n    UnityEngine.Debug.Log(&quot;TRAS INICIAR&quot;);\n    yield return new WaitForSeconds(3);\n \n}\nCampos privados configurados con el inspector\nEs decir, los campos que son\n[SerializeField] private AudioSource m_ThunderAudioSource;\nComponente a probar\npublic class ClockAudioManager : MonoBehaviour\n{\n    [SerializeField] private AudioSource m_ClockAudioSource;\n \n    public void PlayClock()\n    {\n        m_ClockAudioSource.Play();\n    }\n}\nAsignación de las referencias por código\nvar audioManagerGO = new GameObject();\n \naudioSource1 = audioManagerGO.AddComponent&lt;AudioSource&gt;();\naudioSource1.clip = AudioClip.Create(&quot;clip1&quot;, 1, 1, 1000, false);\n \nclockAudioManager = audioManagerGO.AddComponent&lt;ClockAudioManager&gt;();\n \nvar so = new SerializedObject(clockAudioManager);\nso.FindProperty(&quot;m_ClockAudioSource&quot;).objectReferenceValue = audioSource1;\nso.ApplyModifiedProperties();\nEditar variables privadas y ejecutar métodos privados\nSi tienes que usar esto, probablemente estés haciendo algo mal, ya que no estás probando el código como una API. Probablemente estás intentando hacer testing de caja blanca o tu código sea demasiado espagueti. Si aún así lo necesitas, tendrás que usar reflection\nCode Coverage\nEsta es una herramienta que te indica qué partes de tu código han sido probadas y cuales no. Está en la Unity Registry. Ya solo con la documentación se aprende muchísimo de pruebas unitarias así que está recomendadísimo\nInstala también el Samples y lee el archivo Worksheet\n\nTrucos\nTests parametrizados\nTomará todos los valores de values y los probará con todos los valores de values2\nstatic int[] values = new int[] { 1,3, 2, 4 , 5};\nstatic int[] values2 = new int[] { 5, 6 };\n \n[Test]\npublic void PlayTestsSimplePasses2([ValueSource(nameof(values))] int a, [ValueSource(nameof(values2))] int b)\n{\n    Assert.Less(a, b);\n}\nTambién lo puedes hacer a lo bruto, especialmente si los valores son exclusivos de una prueba\npublic class MyTestsClass\n{\n   [Test]\n   public void Test(\n       [Values(&quot;a&quot;, &quot;b&quot;)] string someString,\n       [Values(5, 10)] int someInt)\n   {\n       Assert.Pass();\n   }\n}\nSetUp y TearDown\nProbablemente, siempre que hagas pruebas, tendrás dos fases que siempre se repiten: La de configuración, donde instancias el GameEngine y demás y otra de limpieza para destruir dicho GameEngine y demás\nPuedes crear estos dos métodos para hacer estas tareas que se repetirás siempre que ejecutes un test en ESTE archivo de tests\nLo suyo es que agrupes los tests en base a qué inicializas y siempre hay que borrar los objetos estos porque te la lian entre ejecución y ejecución por culpa de los duplicados\n[SetUp]\npublic void Setup()\n{\n    GameObject gameGameObject = \n        MonoBehaviour.Instantiate(Resources.Load&lt;GameObject&gt;(&quot;Prefabs/Game&quot;));\n    game = gameGameObject.GetComponent&lt;Game&gt;();\n}\n \n[TearDown]\npublic void Teardown()\n{\n    Object.Destroy(game.gameObject);\n}\nIgnorar un conjunto de prueba\nPodrías verte en la necesidad de ignorar un caso de prueba si un valor no te interesa\nEl ejemplo de Unity (el de la imagen) es un poco roñosete, pero podrías ejecutarlo con un for de 1 a 10 pero que el 5 (por ejemplo) no te venga bien, pues lo ignoras y au\npublic class MyTestsClass\n{\n   [Test]\n   [ParameterizedIgnore(&quot;b&quot;, 10)]\n   public void Test(\n       [Values(&quot;a&quot;, &quot;b&quot;)] string someString,\n       [Values(5, 10)] int someInt)\n   {\n       Assert.Pass();\n   }\n}\nBibliografía\nwww.youtube.com/watch \nwww.kodeco.com/9454-introduction-to-unity-unit-testing \ndocs.unity3d.com/Packages/com.unity.test-framework@2.0/api/UnityEngine.TestTools.ParameterizedIgnoreAttribute.html \nforum.unity.com/threads/unit-testing-monobehaviour-classes-that-have-private-fields-set-from-the-inspector.594451/ \n(no incluido en la página, pero muy interesante) learn.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices#characteristics-of-a-good-unit-test \n(no incluido en la página, pero muy interesante) unity.com/es/how-to/testing-and-quality-assurance-tips-unity-projects"},"Unity/3--Programación/Zenject/Análisis-Zenject-Hero":{"title":"Análisis Zenject-Hero","links":["Unity/3--Programación/Zenject/Unity-Zenject-DETALLADO"],"tags":[],"content":"Project Context\nLo primero que se ejecuta es el Project Context, que define las dependencias globales.\nEn Resources hay un prefab llamado ProjectContext que tiene su correspondiente componente y un ScriptableObject llamado GameSettings, ambas cosas están en `Resources.\n\n\n                  \n                  Nota \n                  \n                \n\nEl código que ha generado este SO se llama GameSettingsInstaller y está en la carpeta Code &gt; Installers\n\n\nGameInstaller (componente)\nSignalBusInstaller.Install(Container); Esto activa los signals, puede estar en cualquier installer y se pone tal cual. Recomiendan hacerlo 1 vez en el ProjectContext o una por cada escena\nGameSettings (ScriptableObject)\n\nAsocias los valores de las instancias\n\nEn otro sitio (en este caso la UI), se recibe el valor\n\nEscena Main\nEl punto de partida es la escena “Main” en Assets &gt; Scenes. Ahí hay un SceneContext vacío, creo que podría no estar ya que también está en la escena Level y un botón en UI - Canvas &gt; Start Game - Btn\nEse botón tiene el componente ZenjectBinding que se referencia a sí mismo como componente y tiene UseSceneContext activado\n\nEl SceneContext crea un GO DontDestroyOnLoad. Sinceramente creo que nada de esta escena es interesante, ya que todo lo vuelve a crear en Level\nEscena Level\nAhora SceneContext sí tiene cosas:\nPodemos ver los Installers arriba, con los que ya estamos familiarizados, y abajo los de tipo ScriptableObject\nVamos a analizar las cosas que tengan que ver con el Player, tiene 3 Installer:\nPlayerSettingsInstaller corresponde a un SO, lo que nos permitirá ir variando entre diferentes para comprobar \nPlayerPrefabInstaller Instancia el prefab y asocia su PlayerFacade\nEstos dos se utilizan en el SceneContext, en la escena\nPlayerInstaller se encuentra en el raíz del prefab e inicializa la mayoría de cosas mediante un GameObjectContext en el mismo GameObject\n\nPlayerSettingsInstaller (ScriptableObject)\nTiene como nombre de archivo PlayerSettings y se resume en 2 variables pero distribuídas entre varias clases\n\nSupongo que con el objetivo de que finalmente se vea con esta configuración en el Inspector\n\nEn este Installer, estamos haciendo uso de las propiedades de has instanciado en el propio SO\nLo que estamos haciendo aquí es decirle a Zenject que cuando necesite un PlayerMovement.Settings, utilice la instancia que hemos creado, es decir, Player.Movement\n\nEsto nos da la flexibilidad de poder cambiar las propiedades del Player creando los SO que queramos, de tal forma que creas una instancia de este SO, se lo pasas al ScriptableObjectInstaller y ya tienes esas propiedades enlazadas\n\nEjemplo de uso de las asociaciones que hemos creado en este SOInstaller\nEn la clase PlayerMovement vemos varios requisitos i.e Settings (PlayerMovement.Settings), PlayerModel, PlayerInputState y PlayerAnimationStates\nPues ese Settings se satisface gracias a que en el ScriptableObjectInstaller hemos enlazado que si quiere un Settings, coja ese\nComo comentamos antes, PlayerMovement necesita un PlayerMovement.Settings y como hicimos el BindInstance(PlayerMovement.Settings) ahora lo detectar y satisface con él la dependencia\nPlayerPrefabInstaller\n\n\nTan solo tiene esto, pero qué hace?\nFromComponentInNewPrefab crea una instancia de ese prefab en la escena (Instantiate) y toma de dicha Instance el componente PlayerFacade y lo enlaza Bind, de tal forma que cada dependencia que necesite un PlayerFacade cogerá ese (y solo ese AsSingle)\nUnderTransformGroup, le indica de qué GameObject debería caer esta nueva instancia, por lo que parece ser que busca un GameObject de nombre Player y es ahí donde instancia ese prefab, como no existe, crea uno nuevo\nResumen\n\n\nEl PlayerSettingsInstaller asocia los valores del SO (una clase que contiene un float y una clase que contiene un prefab)\n\n\nEl PlayerPrefabInstaller pide mediante [Inject] la clase con el prefab que PlayerSettingsInstaller acaba de asociar, crea la instancia de este prefab, y de esa instancia toma y asocia PlayerFacade\n\n\nLa instancia que acaba de crear PlayerPrefabInstaller es el prefab player, y tiene un GameObjectContext con el que asocia todo el contenido de PlayerInstaller\n\n\nPlayerInstaller\n\nFlipScreen (Signals)\nEn el GameObject SceneContext nos encontramos un installer llamado FlipScreenInstaller\nSuscribe con DeclareSignal la señal PlayerMovedOutOfScreenSignal \nAdemás registra en la instancia que creamos en la línea anterior (accedida mediante FromResolve) que cuando esta se ejecute, se lance el método FlipScreen de la clase FlipScreenManager. No estoy nada seguro, pero creo que gracias a estar usando el FromResolve, podemos obtener obtener las variables flipScreenManager y signalOutScreen y pasarlas al método\n\nUna vez todo registrado, se ejecuta en la clase BorderCollider, cuando detecta que el jugador ha tocado una pared, lanza el evento\n"},"Unity/3--Programación/Zenject/Unity-Zenject-DETALLADO":{"title":"Unity Zenject DETALLADO","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/(DI)-Dependency-Inyection","Unity/3--Programación/Zenject/Unity-Zenject-GUÍA-RÁPIDA","Unity/3--Programación/Zenject/Análisis-Zenject-Hero","Programación/1--Teoria-Programación/Patrones-de-diseño/patrón-de-diseño-SOLID-design-pattern"],"tags":[],"content":"Es una librería gratuita para la implementación de la inyección de dependencias (DI) que puedes encontrar aquí, en Github\nPara info general del patrón de diseño (DI) Dependency Inyection,  mira aquí\nPara ver la instalación y primeros pasos, ve a la guía rápida\nPara ver el analisis a un proyecto real de Zenject, click aquí\nGuía actualizada a Febrero del 2024, he instalado la versión 9.2.0 de la librería en Unity 2022.3.4f1, pero debería valer para Unity &gt;= 2018.4.13\nResolución de dependencias / Tipos de inyección o patrones de inyección\nPor constructor (preferible)\nEs preferible porque \n\n\nPuedes ver de un golpe todas las dependencias y elimina cualquier duda sobre cuándo serán resueltas. \n\n\nTe permite utilizar propiedades de solo lectura para asegurarte de que las dependencias no se pueden modificar durante la ejecución\n\n\nMantiene tu código agnóstico del contenedor de DI, lo cual te permite cambiar de framework o eliminarlo por completo fácilmente\n\n\nHace evidente cuándo estás violando el principio de Responsabilidad Única, ya que un constructor con demasiados argumentos es probable que lo esté violando y que debería dividirse en varias clases\n\nPor campo\nLa inyección sucede exactamente después de que el constructor haya sido llamado\n\nPor propiedad\nEs muy similar a por campo, pero se debe usar con cautela porque complica ver las dependencias de un vistazo y averiguar cuándo y dónde se han rellenado\n\nPor método\nVas a usar mucho este porque como MonoBehaviour no permite constructores, usarás este en su lugar\n\nPara un análisis del uso correcto de los diferentes métodos, puede leer esto\nEn una clase NO MonoBehaviour, se pone en el constructor haciendo referencia a la interfaz\n\nPara las clases MonoBehaviour, Zenject escanea estas clases en busca de la etiqueta [Inject] e intenta resolver las dependencias\nConfiguración de dependencias\nLos primero pasos están indicados arriba\nPodemos añadir una configuración más precisa con los métodos que trae Zenject\nTodas están siendo usadas con una lógica predefinida, pero puedes especificar tú manualmente para lo que necesites\n\nIdentificador\nWithId() nos permite establecer un identificador por si tenemos diferentes implementaciones para una misma resolución de contrato, es decir, IWeapon podría tener un PlayerWeapon y un EnemyWeapon que la implementen y Zenjekt te sirva la que le especifiques con este ID.\nNo tiene por qué ser string, cualquier cosa que implemente el operador equals, podría ser un Enum o una clase entera\n\nMétodo de construcción de la instancia\n3 de los métodos más usados para generar o usar la instancia es poniendo From y el tipo de generados, te permite elegir de qué forma se va a generar la instancia, en este caso\nFromNew\nFromNew utilizará el operador new de C# (por defecto se usa este)\n\nFromInstance\nFromInstance que obtiene la referencia del resultado de un tipo que le hayas pasado. Es útil para encapsular dependencias con construcciones más complejas\n\nFromFactory\nFromFactory lo cual te permite encapsular la lógica de creación todavía más con la creación de Factories, las cuales son perfectas para situaciones en las que tus dependencias tienen sus propias dependencias, que pueden ser inyectadas directamente en tu factoría\n\nFromResolve\nFromResolve Creo que busca alguna instancia que ya existiera en el contenedor\n\nÁmbito\nEstos métodos comienzan por As seguido del ámbito\nEl ámbito determina cuán común se van a reutilizar las diferentes inyecciones\nAsTransient\nPor defecto es AsTransient que indica al constructor no reutilizar la instancia, es decir, se creará una nueva cada vez que sea pedida. Es lo contrario a Singleton\n\nAsCached\nAsCached pide reutilizar la misma instancia de resolución de tipo para cada tipo de inyección, pero crea una nueva para cada tipo enlazado, aunque deriven de la misma clase (con el ejemplo de abajo se entiende)\n\nAsSingle\nAsSingle es idéntico a Singleton, solo una instancia para toda la app\nPor lo general usarás esta forma, AsTransition y AsCached serán solo para casos especiales\nEjemplo\nEn este caso, aunque AudioService implementa IAudioService, AsCached creará una instancia para AudioService y otra para IAudioService. Es decir, tendremos dos instancias, una que corresponde a AudioService y otra a IAudioService\nPor el contrario, si están puestas como Single, independientemente del tipo que pidas (IAudioService o AudioService) te devolverá la misma instancia\n\n\nInstaladores 2\nExisten 3 tipos:\nInstaller&lt;&gt;\nUno de los métodos más sencillos es crear una subclase de Installer, entonces referenciarse a sí misma como argumento genérico, con lo que la clase base (madre), puede definir un método estático que la exponga. Eso hace que el instalador sea mucho más fácil de reutilizar.\npublic void GameInstaller : Installer&lt;GameInstaller&gt;\n{\n    public override void InstallBindings()\n    {\n        Container.Bind&lt;IPlayer&gt;.To&lt;Player&gt;();\n    }\n}\npublic void AppInstaller : MonoInstaller\n{\n    public override void InstallBindings()\n    {\n        GameInstaller.Install(Container);\n    }\n}\nAdemás también puede añadir más parámetros incluyendo más argumentos genéricos\nSegún InfallibleCode, aunque este sea el más simple, seguramente sea el que menos uses\n\nMonoInstaller\nEs lo mismo pero siendo un MonoBehaviour, por lo que puedes ponerlos en GameObjects, es el tipo más común de instalador porque sus propiedades se pueden modificar directamente desde el Inspector\npublic void AppInstaller : MonoInstaller\n{\n    public string PlayerName;\n    public override void InstallBindings()\n    {\n        GameInstaller.Install(Container, PlayerName);\n    }\n}\nScriptableObjectInstaller\nSon igual que MonoInstaller ya que puedes editar sus propiedades desde el inspector, pero tienes todos los beneficios de los ScriptableObjects, como mantener los cambios hecho en play. Además, puedes crear versiones del mismo (configuración de dificultad fácil, medio, dificil…) y ponerlas en uso según necesites\npublic class DifficultySettingsInstaller : ScriptableObjectInstaller\n{\n    public Player.Settings Player;\n    public SomethingElse.Settings SomethingElse;\n    // ... etc.\n \n    public override void InstallBindings()\n    {\n        Container.BindInstances(Player, SomethingElse, etc.);\n    }\n}\n\nReutilizar los MonoInstallers\nPrefabs en escena\nLos MonoInstaller se deben poner en un GO, puedes ponerlos como componente junto al SceneContext pero si quieres reutilizarlo, también pueden ir en su propio GO y de él, crear un prefab.\n\nVarias escenas pueden referenciar ese prefab y cambiar las propiedades para ajustarse a las necesidades especificas de cada escena\n\nInstaladores Prefab \nOtro método es añadiendo los prefabs directamente al Scene Context\nPermite mantener la jerarquía más limpia pero no te permite hacer modificaciones específicas de la escena\n\nRecursos\nPor último, puedes tener el prefab en Resources y cargarlo desde otro instalador\n\n\nContextos\nSon la forma en la que Zenject une los contenedores con los instaladores\nCada contenedor está unido a un contexto, y cada contexto tiene una lista de instaladores. Así es como cada contenedor sabe qué dependencias debe crear. Existen los siguiente tipos:\nScene Context (Contexto de escena)\nEs el punto de entrada de cada escena. Es el primer script que se ejecutará una vez se ha inicializado el del contexto de proyecto (que veremos en seguida)\n\nGameObject Context (Contexto de GO)\nEs un contexto de subcontenedor y sirve como un mecanismo de agrupado en base a los GameObject. Una escena puede tener múltiples instancias del mismo contexto GO. Se suelen utilizar para implementar el patrón de diseño fachada\n\nDecorator Context (Contexto de Decorador)\nEs un contexto anidado asociado a su propia escena. Su objetivo es añadir funcionalidad dinámicamente a una escena a través de la característica de edición multiescena. Lo hace anidandose a sí mismo en el Scene Context de la escena en la que se añade. A diferencia del contexto de GO, el Scene Context y el Deco Context comparten el mismo contenedor\n\nProject Context (Contexto de Proyecto)\nEste es global y debe estar como prefab en la carpeta Resources. Se usa para crear dependencias globales a lo largo de todo el proyecto. Solo se inicializa una vez justo al ejecutar la app y sus dependencias se reutilizan en cada escena.\n\nEste es el orden en el que se ejecuta cada contexto\n\n\n\nMétodos alternativos para asociarlo cada interfaz en el instalador\nMirar Evita usar MonoBehaviour cuando no es necesario ahí se explica que es esto y está la forma buena de hacerlo\nSe puede hacer así pero es mejorable\npublic class GameInstaller : MonoInstaller&lt;GameInstaller&gt;\n{\n    public void override InstallBindings()\n    {\n        Container.Bind&lt;IInitializable&gt;().To&lt;TwitterService&gt;().AsSingle();\n        Container.Bind&lt;IDisposable&gt;().To&lt;TwitterService&gt;().AsSingle();\n        Container.Bind&lt;ITickable&gt;().To&lt;TwitterService&gt;().AsSingle();\n    }\n}\nEsta opción es un poco mejor\n\nUsando un poco de Refletion podemos evitar tener que escribir cada interfaz que tiene la dependencia, pero queda feo\n\n\nla forma buena está en la guía rápida, en la parte Evita usar MonoBehaviour cuando no es necesario\nMétodos de comunicación\nPero qué pasa si el dependiente (o clase de alto nivel, definición explicada aquí necesita comunicarse con la dependencia (o clase de bajo nivel)?\n\n\n                  \n                  Atención \n                  \n                \n\nLa forma buena está en la guía rápida\n\n\nMétodo 1: Clase dependiente ejecuta método en clase dependencia\n\n\n                  \n                  No recomendable \n                  \n                \n\nEste método nos lleva a pasar una referencia de la clase dependencia a la dependiente.\nLo cual acopla las clases entre sí\n\nMétodo 2: Clase dependencia escucha evento elevado por clase dependiente\n\n\n                  \n                  No recomendable \n                  \n                \n\nEste método nos lleva a pasar una referencia de la clase dependiente a la dependencia, lo cual también nos acopla las clases\n\n# Inyecciones complejas\nZenject es muy bueno para proyectos extensos y complejos y permite este tipo de inyecciones. Veamos los subcontenedores o contenedores anidados\nLo bueno es que ya se han visto :P\nSceneContext que es necesario para cada escena es, en realidad, un subcontenedor ya que tanto SceneContext como cualquier otro hereda de sus asociaciones de ProjectContext. A su vez, GameObjectContext hereda de SceneContext sus asociaciones\nUn Subcontenedor (Sub-Container (Nested Container)) en realidad se trata de\n\n\nChild of another container\n\n\nBindings are only visible to itself and its children\n\n\nUsed to abstract related dependency\n\n\n\nEste es el método más sencillo de implementar un subcontenedor\nPero esta forma rara vez se ve\n\nEsto ya me dio pateo hacerlo, es básicamente un ejemplo bastante completo en el que pone a prueba los beneficios del uso de los subcontenedores, el enlace al vídeo es este\nFactorías (Factories)\nPara que se usan mucho. Explicadas aquí.\nSirven para crear objetos de forma dinámica.\nEl ejemplo adapta esta clase Enemy que requiere una instancia de Player, para tener un objetivo que atacar\n\nCreamos la clase anidada Factory\nPodría no ser anidada, pero es conveniente\nEsta clase Factory debe heredar de PlaceholderFactory&lt;Enemy&gt;\n\nCreamos la clase que, por cada tick, intentará crear una instancia de Enemy\n\nVamos a instalar todo lo que acabamos de hacer:\n1er paso: Como EnemySpawner tiene la dependencia de la interfaz ITickable, se la asociamos\n2do paso: Registramos Player como una dependencia de tipo Singleton. Como no indica nada, la instancia se crea FromNew, es decir, por defecto\n3er paso: Registramos que el objeto Enemy, se creará gracias a Enemy.Factory\n\nEsto funciona porque PlaceholderFactory&lt;T&gt; tiene un método Create (lo usamos en EnemySpawner.Tick()). Que emplea genera una instancia del tipo T, con los argumentos que T le solicita. En este caso, Player, que lo asociamos en el instalable y, por tanto, ya lo tiene\nParámetros de tiempo de ejecución: Variación de variables\nPero ¿qué pasa si queremos hacer variaciones entre los distintos valores de Enemy?\nEntiendo que hay que respetar el orden de los tipos para que funcione\n\nEste nuevo valor, que estamos pidiendo en el PlaceholderFactory, lo estamos satisfaciendo en el Create\n\nPor último, hay que adaptar la asociación al nuevo valor\n\n\nMemoryPools\nSi un objeto se crea y destruye repetidas veces, puede dar tirones\n\nPara evitar este problema, podemos acudir a las MemoryPool\n\nBásicamente se gestiona igual, pero haciendo Spawn y Despawn\n\nLo mismo con el instalador\n\nEsto sirve para que precargue 10 instancias de la clase Drink\n\nCon más argumentos (p.e. nombre y precio de la bebida?)\n\n\nBibliografía\nReadme de Zenject en Github\nGetting Started with Zenject @Infallible Code (Playlist)\nFactories - Zenject - Github"},"Unity/3--Programación/Zenject/Unity-Zenject-GUÍA-RÁPIDA":{"title":"Unity Zenject GUÍA RÁPIDA","links":["Programación/1--Teoria-Programación/Patrones-de-diseño/(DI)-Dependency-Inyection","Unity/3--Programación/Zenject/Análisis-Zenject-Hero","Unity/3--Programación/Zenject/Unity-Zenject-DETALLADO","Programación/1--Teoria-Programación/Patrones-de-diseño/patrón-de-diseño-SOLID-design-pattern","Unity/3--Programación/Testing---Pruebas-unitarias","tags/WIP"],"tags":["WIP"],"content":"Es una librería gratuita para la implementación de la (DI) Dependency Inyection que puedes encontrar aquí, en Github\nPara info general del patrón de diseño (DI) Dependency Injection, (DI) Dependency Inyection\nEsta guía se complementa con otra guía más detallada de la librería en esta pág de WikiJavi, son complementarias, eso quiere decir que casi no se repite información, por tanto, deberías leer las dos, pero como la detallada trata tanto teoría como casos especiales / alternativos, en la mayoría de casos puedes saltarte el detalle si la teoría ya la conoces.\nProyecto de ejemplo\n⭐ Además hay un análisis mío a un ejemplo aportado por la gente de Zenject aquí\n\n\n                  \n                  Guía actualizada a Febrero del 2024, he instalado la versión 9.2.0 de la librería en Unity 2022.3.4f1, pero debería valer para Unity &gt;= 2018.4.13 \n                  \n                \n\nInstalacion\nExisten 4 métodos\n\n\nDesde Github importando el package\n\n\nDesde la Asset Store de Unity\n\n\nUPM Branch (ni idea)\n\n\nDesde el repo de Github importando el dll\n\n\nYo lo he instalado desde la Asset Store (Por alguna razón se llama Extenject)\n\n\n                  \n                  NOTA ADICIONAL \n                  \n                \n\nEn el manual de Zenject indican que puedes activar una movida que optimiza el juego entero ya que mueve operaciones de ejecución a la build, por lo que lo hará más rápido. Se hace una vez y te olvidas. Para hacerlo se debe hacer ir al menú Create &gt; Zenject &gt; Reflection Baking Settings\n\n\nCheatSheet mejorado\nHe cambiado el CheatSheet por nombres que se entienden en vez de la caca de Foo y Bar. Traducido automáticamente por ChatGPT y en la versión que tienen el 04.03.2024 en su github\nDisponible en mi Drive\nTengo un problema\nHe puesto un ITickable, IInitializable… y no se ejecutan su métodos, pero no da error\nProbablemente sea porque has hecho Bind y no BindInterfacesAndSelfTo. Si haces solo Bind, no estarás inyectando las interfaces pese a no dar un error\nError CS0119 &#039;DiContainer.Bind&lt;TContract&gt;()&#039; es método, que no es válida en el contexto indicado\nFíjate si has puesto los paréntesis en el método Bind. Es decir\nContainer.Bind&lt;ClockAudioManager&gt;() en lugar de Container.Bind&lt;ClockAudioManager&gt;\nError CS0119 &#039;ConcreteBinderGeneric&lt;IClockAudioManager&gt;.To&lt;TConcrete&gt;()&#039; es método, que no es válida en el contexto indicado\nMismo problema, pero con To en vez de Bind. Fíjate si has puesto los paréntesis. Es decir\nContainer.Bind&lt;IClockAudioManager&gt;().To&lt;ClockAudioManager&gt;() \nen lugar de \nContainer.Bind&lt;IClockAudioManager&gt;.To&lt;ClockAudioManager&gt;\nInstaladores\nDebemos crear una clase que derive de MonoInstaller (más opciones en la sección\nInstaladores 2), podemos llamarla como Infallible Code, GameInstaller.cs\nEste será el punto de inicio de la app, donde se configuran todas las dependencias y que será el esqueleto de nuestro juego\nusing System;\nusing Zenject;\n \npublic class GameInstaller : MonoInstaller\n{\n    public override void InstallBindings()\n    {\n        // Container es el objeto donde ven a parar las dependencias\n        // Bind es el método que las añade\n        Container.Bind&lt;IAudioService&gt;()\n        // To es la implementación concreta que recibirán los clientes\n            .To&lt;DebugAudioService&gt;()\n        // As single se refiere a que la instancia es única (Singleton)\n            .AsSingle();\n \n        // NonLazy quiere decir que la instancia de EnemySpawner debe crearse en cuanto la escena cargue\n        Container.Bind&lt;EnemySpawner&gt;().AsSingle().NonLazy();\n    }\n}\nMás en profundidad en la guía detallada\nCreamos un Scene Context, que está en el \n\nMenú contextual de crear un GameObject &gt; Zenject &gt; Scene Context\n\n\nEl script instalador GameInstaller.cs, debe estar como componente en un GameObject, supongo que estaría bien que estuviese junto al SceneContext\n\nAhora hay que validar que todo vaya bien en \n\n\nEdit &gt; Zenject &gt; Validate Current Scenes \n\n\nAlt + Shift + V\n\n\nAlt + Shift + R (este comando además incia el juego)\n\n\n\nResolución de dependencias / Tipos de inyección o patrones de inyección\nPor constructor (preferible) pero solo para No MonoBehaviour\nEs preferible porque \n\n\nPuedes ver de un golpe todas las dependencias y elimina cualquier duda sobre cuándo serán resueltas. \n\n\nTe permite utilizar propiedades de solo lectura para asegurarte de que las dependencias no se pueden modificar durante la ejecución\n\n\nMantiene tu código agnóstico del contenedor de DI, lo cual te permite cambiar de framework o eliminarlo por completo fácilmente\n\n\nHace evidente cuándo estás violando el principio de Responsabilidad única, ya que un constructor con demasiados argumentos es probable que lo esté violando y que debería dividirse en varias clases\n\n\n\nPor campo\nLa inyección sucede exactamente después de que el constructor haya sido llamado\n\nPor propiedad\nEs muy similar a por campo, pero se debe usar con cautela porque complica ver las dependencias de un vistazo y averiguar cuándo y dónde se han rellenado\n\nPor método (preferible para MonoBehaviour)\nDeberías usar mucho este porque como MonoBehaviour no permite constructores, este es su sustituto\n\nPara un análisis del uso correcto de los diferentes métodos, puede leer esto\nEn un clase NO MonoBehaviour, se pone en el constructor haciendo referencia a la interfaz\n\nPara las clases MonoBehaviour, Zenject escanea estas clases en busca de la etiqueta [Inject] e intenta resolver las dependencias\n\nIncluir Scripts y Gameobjects de la escena como inyección\nPodríamos poner en el GameInstaller una referencia, y pasar esa referencia como argumento, pero eso es tedioso y no mejora mucho el sistema que ya podías implementar sin usar DI. Para eso está ZenjectBinding\nEs un componente que nos permite dar a conocer un Script o GameObject a Zenject\n\nDe tal forma que en el installer, en lugar de poner la referencia, pones el nombre de la clase y se resuelve solo\n\nConfiguración de dependencias\n[[Unity Zenject GUÍA RÁPIDA#Instalacion|Los primeros pasos están indicados arriba]+\nPara ver las posibles configuraciones, están en la guía detallada\nPodemos añadir una configuración más precisa con los métodos que trae Zenject\nTodas están siendo usadas con una lógica predefinida, pero puedes especificar tú manualmente para lo que necesites\n\nÁmbito\nPara saber también del método AsCached visitar la guía detallada\nEstos métodos comienzan por As seguido del ámbito\nEl ámbito determina cuán común se van a reutilizar las diferentes inyecciones\n\n\n                  \n                  Fíjate \n                  \n                \n\nPor defecto es AsTransient que indica al constructor no reutilizar la instancia, es decir, se creará una nueva cada vez que sea pedida. Es lo contrario a Singleton\n\nReutilizar los MonoInstallers\nEsto está en la guía detallada\nContextos\nSon la forma en la que Zenject une los contenedores con los instaladores\nEsto está en la guía detallada\nEvita usar MonoBehaviour cuando no es necesario\nMuchas veces usamos MonoBehaviour en servicios para poder usar el ciclo de vida de Unity (Start(), Update() o OnDestroy()) pero ni siquiera lo necesitamos en la escena para nada.\nPara ello, se pueden utilizar la interfaces de Zenject IInitializable, ITickable, ILateTickable, IFixedTickable o IDisposable\nIInitializable para implementar Initialize() que emplea Start()\nITickable, ILateTickable, IFixedTickable para implementar Tick() que emplean Update(), LateUpdate() y FixedUpdate()\nIDisposable para implementar Dispose() que se llama cuando la app se cierra, la escena cambia o cuando se destruye el objecto SceneContext, por lo que se debe usar para la limpieza de la clase\n\n\n                  \n                  Cuidado: Versión parcial \n                  \n                \n\nAhora hay que asociar cada interfaz con la clase que las implementa en el instalador\nPara otros métodos alternativos de asociar interfaces a una dependencia mirar su apartado en la guía completa\npublic class GameInstaller : MonoInstaller&lt;GameInstaller&gt;\n{\n    public void override InstallBindings()\n    {\n        Container.BindInterfacesTo&lt;TwitterService&gt;();\n    }\n}\n\n\n                  \n                  Cuidado: Versión parcial \n                  \n                \n\nComo el punto de esto es que otras clases pueden referenciarlo, debemos añadir también la propia clase\npublic class GameInstaller : MonoInstaller&lt;GameInstaller&gt;\n{\n    public void override InstallBindings()\n    {\n        Container.BindInterfacesTo&lt;TwitterService&gt;();\n        Container.Bind&lt;TwitterService&gt;();\n    }\n}\nPero se puede hacer todo en una línea\npublic class GameInstaller : MonoInstaller&lt;GameInstaller&gt;\n{\n    public void override InstallBindings()\n    {\n        Container.BindInterfacesAndSelfTo&lt;TwitterService&gt;();\n    }\n}\nMétodos de comunicación\nPero qué pasa si el dependiente (o clase de alto nivel, definición explicada aquí) necesita comunicarse con la dependencia (o clase de bajo nivel)?\nPero qué pasa si la dependencia (o clase de bajo nivel, definición explicada aquí) necesita comunicarse con la dependiente (o clase de alto nivel) o a cualquier otro (sub)sistema?\nInfo detallada aquí\nUna solución muy popular es tener un intermediario que avise de los cambios a la dependencia, esto se llama patrón observer, en Zenject está implementado como señales (Signals)\nSeñal básica\nEn el siguiente ejemplo, la clase de alto nivel, una UI, manda a otra de bajo nivel Player un cambio en la variable de salud.\n\nLa solución es crear una clase llamada PlayerHealedSignal (Nombre de la dependencia, Evento en pasado, Palabra Signal). Por organización la mete en una clase dedicada a las Signals\nEsta es la forma básica de Signal, así ya funciona, pero después le añadiremos más complejidad (no mucha)\n\n\nEn la dependencia se inyecta la clase señal, y se lanza cuándo es preciso\nAunque también podríamos haber creado una nueva instancia. i.e.\n{\n new PlayerHealedSignal().Fire()\n}\n\nRegistramos en el instalador, inyecta (primera línea en amarillo) la señal a las clases que la hayan pedido (en este caso, solo Player)\nDespués, asocia el desencadenado de la señal (PlayerHealedSignal) con quién deba escuchar o qué se deba ejecutar. En este caso esta usando una asociación estática, es decir un método, pero podría haberlo hecho con otra clase\n\n\n                  \n                  Nota \n                  \n                \n\n CombatTextFactory requiere el prefab de CombatText y el canvas donde será ubicado\n\n\nSeñal con argumentos\nAhora queremos pasar qué cantidad de vida ha cambiado, lo podemos hacer mediante otro argumento genérico en la señal\nDe esta forma ya acepta variable enteras como argumento y la línea anterior de .Fire() ahora da error\n\nY deberemos actualizar la llamada\nPlayer.cs\n\nTambién hay que actualizar el instalador\nGameInstaller.cs\n\nAhora crea una asociación adicional (más útil) para que se genere el mensaje a partir de la factory.\nPara ello le pasa una función lambda que crea el mensaje con el mensaje correspondiente.\n\nY ahora esto lo puedes asociar con cualquier acción o subsistema como una barra actualizando automáticamente, partículas, sonidos…\nInyecciones complejas\nMirar el manual detallado\nTesting\nSe configura igual que un test normal de Unity pero debes añadir a las referencias el assembly Zenject-TestFramework\nEditTests (Unit Tests)\nLas particularidades es que la clase debe heredar de ZenjectUnitTestFixture e ir decorada con un atributo [TestFixture]\nLo único que hace ZenjectUnitTestFixture es que cada vez que se ejecuta un test, el contenedor es creado de nuevo, lo cual nos evita que hayan contaminaciones entre los test\nUtilizando Resolve\nusing System;\nusing Zenject;\nusing NUnit.Framework;\n \n[TestFixture]\npublic class TestLogger : ZenjectUnitTestFixture\n{\n    [SetUp]\n    public void CommonInstall()\n    {\n        Container.Bind&lt;Logger&gt;().AsSingle();\n    }\n \n    [Test]\n    public void TestInitialValues()\n    {\n        var logger = Container.Resolve&lt;Logger&gt;();\n \n        Assert.That(logger.Log == &quot;&quot;);\n    }\n \n...\n\n\n                  \n                  Fíjate \n                  \n                \n\nEn el método [SetUp] podemos ver una asociación con el contenedor de dependecias y su resolución en el [Test]\n\n\nMejor incluso, para evitar tanta llamada a Resolve y tanta variable inútil, inyectar en el propio test\nusing System;\nusing Zenject;\nusing NUnit.Framework;\n \n[TestFixture]\npublic class TestLogger : ZenjectUnitTestFixture\n{\n    [SetUp]\n    public void CommonInstall()\n    {\n        Container.Bind&lt;Logger&gt;().AsSingle();\n    }\n \n    [Inject]\n    Logger _logger;\n \n    [Test]\n    public void TestInitialValues()\n    {\n        Assert.That(logger.Log == &quot;&quot;);\n    }\n \n...\nPlayTests\nIntegration Tests\nEl siguiente ejemplo lo mejora\npublic class SpaceShipTests : ZenjectIntegrationTestFixture\n{\n    [UnityTest]\n    public IEnumerator TestVelocity()\n    {\n        // Aquí configura el estado inicial creando los GO de cero, cargando prefabs/escenas, etc\n \n        PreInstall();\n \n        // Métodos bind\n        Container.Bind&lt;SpaceShip&gt;().FromNewComponentOnNewGameObject()\n            .AsSingle().WithArguments(new Vector3(1, 0, 0));\n \n        PostInstall();\n \n        // A partir de aquí las pruebas utilizando los Resolve o campos [Inject]\n        var spaceShip = Container.Resolve&lt;SpaceShip&gt;();\n \n        Assert.IsEqual(spaceShip.transform.position, Vector3.zero);\n \n        yield return null;\n \n        // Should move in the direction of the velocity\n        Assert.That(spaceShip.transform.position.x &gt; 0);\n    }\n}\nVariante de lo mismo\npublic class SpaceShipTests : ZenjectIntegrationTestFixture\n{\n    void CommonInstall()\n    {\n        PreInstall();\n \n        Container.Bind&lt;SpaceShip&gt;().FromNewComponentOnNewGameObject()\n            .AsSingle().WithArguments(new Vector3(1, 0, 0));\n \n        PostInstall();\n    }\n \n    [Inject]\n    SpaceShip _spaceship;\n \n    [UnityTest]\n    public IEnumerator TestInitialState()\n    {\n        CommonInstall();\n \n        Assert.IsEqual(_spaceship.transform.position, Vector3.zero);\n        Assert.IsEqual(_spaceship.Velocity, new Vector3(1, 0, 0));\n        yield break;\n    }\n \n    [UnityTest]\n    public IEnumerator TestVelocity()\n    {\n        CommonInstall();\n \n        // Wait one frame to allow update logic for SpaceShip to run\n        yield return null;\n \n        // Should move in the direction of the velocity\n        Assert.That(_spaceship.transform.position.x &gt; 0);\n    }\n}\nSceneTests\nWIP\nBibliografía\nReadme de Zenject en Github\nGetting Started with Zenject @Infallible Code (Playlist)\nUnit tests\nIntegration Tests\nScene tests\nKeywords\nTests unit test unittest pruebas unitarias"},"Unity/4--Eficiencia-y-optimización/4.1---Buenas-prácticas/Consejos-generales":{"title":"Consejos generales","links":["Unity/4--Eficiencia-y-optimización/4.1---Buenas-prácticas/Organización-de-un-proyecto-Unity","Unity/4--Eficiencia-y-optimización/4.1---Buenas-prácticas/Evita-el-código-espaguetti","Unity/2--Técnicas/Addressable","Unity/4--Eficiencia-y-optimización/Profiling-and-optimizing"],"tags":[],"content":"Optimización de desarrollo\nBuild\nSi la build está en modo desarollo Build Settings &gt; Development Build tienes un par de ventajas: \n\n\npor una parte, la compilación será bastante más rápida, aunque la ejecución será un poco más lenta, pero para ir haciendo builds de debug viene genial\n\n\npor otra parte, (solo Android, though) permite actualizar la build a base de parches, en lugar de tener que compilar el proyecto entero\n\n\nOtra configuración que tiene un efecto similar es cambiar de compilación IL2CPP a Mono: Mono al estar menos comprimida / compilada que la otra, el tiempo de compilación será menos aunque el rendimiento será peor, perfecta para debug\nUso ágil de Unity\nLa mejor recomendación para esto es usar los layouts, arriba derecha. Tengo preparados para Animación, Programación, Pruebas unitarias, Profiling, Settings y demás en mi Drive\nmás tips aquí\nmás tips todavía aquí\nOrganización de un proyecto Unity\nOrganización de un proyecto Unity\nEvita el código Spaguetti Espagueti\nEvita el código espaguetti\nOptimización de rendimiento\nUtilizar StringBuilder para optimizar el manejo de strings tochos. No utilizar en pequeños ya que empeora el rendimiento\nAssets\nAddressable\nFrom the window drop-down, select Asset Management &gt; Addressables &gt; Groups\nProfiling / perfiles\nProfiling and optimizing\nHerramientas genéricas\nCPU Profiler \nMemory Profiler\nMemory Analyzer\nLas mejores herramientas son las específicas de la plataforma:\n\n\nPara iOS: Instruments y XCode Frame Debugger\n\n\nPara Android: Snapdragon Profiler\n\n\nPara plataformas que ejecutan CPU/GPU Intel: VTune e Intel GPA\n\n\nPara PS4: la suite Razor y VR Trace\n\n\nPara Xbox: la herramienta Pix\n\n\nmás info aquí\nDisección de trazas de inicialización\n\nLa captura de pantalla anterior es de un seguimiento de Instruments de un proyecto de ejemplo que se ejecuta en un dispositivo iOS. Dentro del método  startUnity específico de la plataforma, tenga en cuenta los métodos UnityInitApplicationGraphics y  UnityLoadApplication\nUnityLoadApplication contiene métodos que cargan e inicializan la primera escena del proyecto. Esto incluye deserializar e instanciar todos los datos necesarios para mostrar la primera escena, como compilar sombreadores, cargar texturas e instanciar GameObjects. Además, todos los MonoBehaviours en la primera escena tienen sus devoluciones  Awake de llamada ejecutadas en este momento.\nDisección de trazas en tiempo de ejecución\nel principal lugar de interés es el método PlayerLoop se ejecuta una vez por frame\n\nLa captura de pantalla anterior es de una ejecución de creación de perfiles de un proyecto de ejemplo de Unity 5.4 e ilustra varios de los métodos más interesantes dentro de PlayerLoop. Los nombres de los métodos dentro de PlayerLoop pueden variar entre las versiones de Unity.\nPlayerRender es el método que ejecuta el sistema de renderizado de Unity. Esto incluye seleccionar objetos, calcular lotes dinámicos y enviar instrucciones de dibujo a la GPU. Cualquier efecto de imagen o devolución de llamada de secuencia de comandos basada en representación ( OnWillRenderObject, por ejemplo) también se ejecuta aquí. En general, este debería ser el principal consumidor de tiempo de CPU mientras el proyecto es interactivo.\nBaseBehaviourManager::CommonUpdate&lt;UpdateManager&gt; es la familia de métodos más interesante para inspeccionar, porque es el punto de entrada para la mayor parte del código de script que se ejecuta dentro de un proyecto de Unity.\nSe habla en más detalle de algún método del orden de ejecución de unity en el enlace\nDiseccionando un método de script\nbusque líneas de seguimiento que contengan un objeto ScriptingInvocation . Ahí hace la transición al tiempo de ejecución del script para ejecutar el código del script\nCarga de Assets\nAsset loading can also be identified in CPU traces. The main method indicating an Asset load is SerializedFile::ReadObject. This method connects a binary data stream (from a file) to Unity’s serialization system, which operates via a method named Transfer. The Transfer method can be found on all Asset types, such as Textures, MonoBehaviours and Particle Systems.\nIn general, if a performance stutter is seen during runtime and a performance trace shows significant time being used by SerializedFile::ReadObject, the framerate is being reduced due to Asset loads. Note that, in most cases, SerializedFile::ReadObject can be found on the main thread only when synchronous Asset loads are requested via the SceneManager, Resources or AssetBundle APIs.\nConsumo de memoria\nPara problemas de consumo de memoria se puede usar Memory Profiler package, más info aquí del paquete y para un tutorial de Unity al respecto aquí\nSobre corrutinas aquí\nRevisar carga de Assets aquí\nBiblio\ndocs.unity3d.com/es/2018.4/Manual/BestPracticeUnderstandingPerformanceInUnity1.html \nMirar esto: unity.com/how-to/unity-ui-optimization-tips"},"Unity/4--Eficiencia-y-optimización/4.1---Buenas-prácticas/Evita-el-código-espaguetti":{"title":"Evita el código espaguetti","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/4--Eficiencia-y-optimización/4.1---Buenas-prácticas/Organización-de-un-proyecto-Unity":{"title":"Organización de un proyecto Unity","links":["tags/WIP"],"tags":["WIP"],"content":"WIP\nBiblio\nunity.com/how-to/organizing-your-project"},"Unity/4--Eficiencia-y-optimización/Limitar-los-frames-o-framerate-o-fps":{"title":"Limitar los frames o framerate o fps","links":[],"tags":[],"content":"En algún Start ponemos\nApplication.targetFrameRate = 60;"},"Unity/4--Eficiencia-y-optimización/Optimizaciones-en-Unity":{"title":"Optimizaciones en Unity","links":[],"tags":[],"content":"Consejos de Toptal\nUpdateLoops\nCachear calculos y las operaciones costosas posibles en Awake en lugar de Update, por ejemplo para cachearlas y no tengas que repetirlas\nInstanciación\nCrear una pool de prefabs para poder reutilizarlos. Especialmente para prefabs muy pesados\nRenderizado\nLOD u Occlusion Culling. Optimización de modelos (polígonos, normales (hard edges), coordenadas UV o vértices de color). Limitar luces dinámicas, intenta bakear todo lo posible.\nLlamadas a Dibujado\nStatic Batching (procesamiento estático) para objetos inmóviles (paredes, suelos, rocas, árboles…) y dinámico para el resto. Para ello, primero hace falta preparar la escena (los objetos que van en lote (batch) deben compartir materiales). Y el dinámico solo se puede usar con modelos lowpoly.\nYou may need to create an atlas from a texture to be able to share one material between distinct objects. A good tip is to use higher resolution scene lightmap textures (not generated resolution, but texture output resolution) to lower the texture total when you are baking light in a larger environment.\nProblemas de sobredibujado\nLimita el uso de texturas transparentes porque causan problemas de ratio de rellenado. Sin embargo son un buen recurso para renderizar objetos geométricos en la lejanía, p.e. árboles o arbustos\nPara aplicar una textura transparente, favorece los shaders con mezcla alfa (alpha-blended)  sobre aquellos con prueba alfa (alpha testing) o shaders de recorte (cutout) para plataformas móviles.\nShaders\nOptimiza tus shaders reduciendo el numero de pases usando variables de baja precision y sustituyendo complicados cálculos matemáticos por texturas pregeneradas\nConsejos del vídeo de Profiling (sobre este tema se puede leer en esta página)\nObject Pooling\nInstanciar y destruir GameObjects es muy costoso. Es mejor utilizar Object Pooling. Para un ejemplo de Object Pooling ir a esta página\nNada es gratis\nLos GameObjects vacíos, las cámaras que no renderizan o los scripts MonoBehaviour sin Update también tienen un impacto en el rendimiento\nDividir la carga de trabajo entre diferentes frames\nSi tienes que hacer un calculo complejo como un pathfinding o algo así, puedes hacer calculos intermedios para dividir la carga en varios frames\nOtro ejemplo sería dividir una escena grande en escenas más pequeñas e ir cargandolas según sea necesario\nBibliografía\nwww.toptal.com/unity-unity3d/top-unity-development-mistakes \n7 Ways to Optimize your Unity Project with URP @Unity\nKeywords\nOptimization Performance Rendimiento Eficiencia Eficiente Óptimo Optimo Optimización"},"Unity/4--Eficiencia-y-optimización/Optimización-de-Atlas":{"title":"Optimización de Atlas","links":[],"tags":[],"content":"Es conveniente que las dimensiones del atlas (conjunto de sprites en una misma imagen) sea una potencia de 2, por ejemplo 1024 * 512"},"Unity/4--Eficiencia-y-optimización/Optimizar-XR":{"title":"Optimizar XR","links":[],"tags":[],"content":"Bibliografía\nlearn.microsoft.com/en-us/windows/mixed-reality/develop/unity/performance-recommendations-for-unity \nlearn.microsoft.com/en-us/windows/mixed-reality/develop/unity/recommended-settings-for-unity\nKeywords\nAR VR"},"Unity/4--Eficiencia-y-optimización/Profiling-and-optimizing":{"title":"Profiling and optimizing","links":[],"tags":[],"content":""},"Unity/5--Físicas/Colisiones":{"title":"Colisiones","links":[],"tags":[],"content":"De todas las formas que hay, esta funciona, así que vamos a usar esta:\nLa pieza que se mueve y genera la colisión tendrá un collider y un rigidbody\n\nTanto el rigidbody, como el collider, como los métodos serán del mismo tipo i.e. 2D o 3D\n\nPara que la pieza no caiga, el Rigidbody se puede tanto poner tanto kinematic como normal con gravedad 0\n\nLa pieza que recibe la colisión tendrá el collider (el cual estará con isTrigger activado) y tendrá un script OnTriggerEnter\n\nprivate void OnTriggerEnter2D(Collider2D other)\n{\n\tprint(&quot;Colisión&quot;);\n}"},"Unity/6--Animaciones/Character-Animation---Origenes-diferentes":{"title":"Character Animation - Origenes diferentes","links":[],"tags":[],"content":""},"Unity/6--Animaciones/Character-Animation":{"title":"Character Animation","links":["Unity/6--Animaciones/Character-Animation---Origenes-diferentes"],"tags":[],"content":"Para los problemas que pueden surgir con los CharacterController, mirar este enlace, probablemente sea suficiente para resolver cualquier cosa.\nPara poder obtener el eje cartesiano en el que añadir las animaciones, ejemplo:\n\nDeberemos crear un AnimatorController en el avatar que se va a mover.\n\nDentro de la pestaña Animator, haremos botón derecho y Create State &gt; From New Blend Tree.\nY añadimos en la parte izquierda los parámetros necesarios (en la captura son “Horizontal” y “Vertical”).\n\nAccedemos dentro del nuevo estado creado, y ponemos el blend tree en foto (hacemos click)\n\nEn la ventana inspector ponemos el Blend Type a 2D Direccional\n\nParecerá que no ha cambiado nada, pero al añadir 2 Motion Field, se creará el eje cartesiano\n"},"Unity/6--Animaciones/Transición-de-animaciones":{"title":"Transición de animaciones","links":[],"tags":[],"content":"Si queremos que la transición sea inmediata:\n\n\nQuitar Has exit time\n\n\nPoner Transition duration a 0\n\n\nHas exit time sirve para cuando quieres que avance automáticamente de una animación a otra, es decir, sin una condición como por ejemplo un trigger"},"Unity/6--GUI/Como-hacer-una-ventana":{"title":"Como hacer una ventana","links":[],"tags":[],"content":"Comenzamos creando un panel\n\n\n                  \n                  Truco \n                  \n                \n\nPara que no esté mareando todo el rato el contenido (se mueve y rota sin querer), se puede utilizar la herramienta mover, que hará que solo puedas mover las anclas\n\n\nPrimero ajustamos las anclas, que son el espacio proporcional que queremos usar\nDentro de las anclas, ajustamos el contenido (puntos azules)"},"Unity/6--GUI/Cómo-funcionan-los-LayoutGroup":{"title":"Cómo funcionan los LayoutGroup","links":[],"tags":[],"content":"Por simplicidad, ya que existen varios tipos, hablaremos en términos del Vertical Layout Group, pero se puede aplicar al resto\nEste componente sitúa los elementos uno encima de otro, diviendo por defecto el espacio disponible entre los elementos, independientemente de su tamaño\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAjustes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpacing\nespacio entre elementos\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChild Alignment\nBásicamente es la posición del pivote para el conjunto de elementos. Ejemplo con Abajo derecha, en vez del por defecto Arriba izquieda\n\nControl Child Size\nActiva o desactiva que LayoutGroup controle el ancho y alto de los hijos. \n\n\n                  \n                  CUIDADO \n                  \n                \n\nSi Child Force Expand está activado hará que ocupen todo el espacio deformando los objetos (me pasó en el ejemplo xD)\n\n\nCreo que para que funcione bien se tiene que activar Child Force Expand o añadir un Element Layout para ajustar el tamaño\nEjemplo con ambos activados\n\nPara ilustrar mejor si esto tiene alguna clase de uso podemos dejar el alto para que se autoajuste con el tamaño del padre (Vertical Layout Group) y quitar el ancho para que el tamaño dependa de los hijos.\nPartiendo de esta posición hacemos lo dicho: mantener alto y quitar ancho.\n\nAumentando alto y dismenuyendo el alto del padre, se ve como se ha ajustado el alto (sigue ocupando todo el espacio) y el ancho permanece fijo (se sale del marco del padre)\n\nUse Child Scale\nSirve para objetos que tengan una escala definida. La cosa es que si un objeto tiene una escala diferente de x=1 y=1 irá mal. Activando esta opción, los considerará como toca. Para el ejemplo se ha puesto el círculo con una escala de x=2 y=2\nFíjate que en el de la izquieda el círculo y el texto están superpuestos\n\n\n\n\n\n\n\n\n\n\n\n\n\nSin Use Child ScaleCon Use Child Scale\nChild Force Expand\nHace que los hijos ocupen todo el tamaño del padre\nControladores del Layout / Layout Controllers\nMin Width\nMin Height\nPreferred Width\nPreferred Height\nFlexible Width\nFlexible Height\nLayout Priority\nUsos comunes\nPoner límite máximo de tamaño\nSegún parece hay que poner el Prefered Size al tamaño que quieres, Flexible Size a 0 y desmarcar Child Force Expand del padre\nQuiero que se vea como en un movil aunque la pantalla sea demasiado ancha\nEmpleando el concepto que hemos visto en Poner límite máximo de tamaño, vamos a meter el elemento a limitar dentro de un padre, al cual le vamos a añadir un horizontal layout para poder emplear el Layout Element, que nos permitirá controlar los limites\nEste es el estado inicial, vamos a ajustar los botones!\n\nComo avanzabamos, metemos el elemento en un padre con el Preset de ocupar al padre al completo\n\nMismo preset para el hijo\n\nAñadimos un Horizontal Layout al padre y lo centramos en el Child Alignment\n\nControl Child Size de ambos para reajustar y nos adelantamos quitando el Child Force Expand del ancho, para que luego el Preferred Width del hijo tenga efecto\n\nAñadimos el Layout Element en el hijo y se asignamos el mínimo, el máximo y ==MUY IMPORTANTE==, para que el máximo funcione poner Flexible Width a 0\n"},"Unity/6--GUI/Ejemplo-de-uso-de-los-anchor-(anclas)":{"title":"Ejemplo de uso de los anchor (anclas)","links":[],"tags":[],"content":"Cuando las anclas están juntas. Indican su punto de origen, dejando las dimensiones de la pieza fijas\nEl monitor tiene las anclas en el centro del canvas, por lo que aunque cambiemos el tamaño de la ventana, el monitor mantiene posición (centro del canvas) y tamaño\n\n\n\nAhora hemos igualado el ancho de las anclas al del monitor, es decir, es una fracción del tamaño de la pantalla.\nAhora lo que hará será cambiar el tamaño del monitor de tal forma que ocupe el 60% de la pantaña y deje 20% de espacio a cada lado. De igual forma pasará con el alto, que crecerá ocupando el porcentaje corresponiente y dejando el espacio corresponiente\n\n\nAhora tenemos una combinación de las anteriores, ocupara el 60% de ancho, dejando el 20% a cada lado. pero no cambiará el alto, sino que se mantenderá a\n\nHe ampliado la ventana tanto de ancho como de alto\nVemos que el monitor a crecido de ancho, pero se ha quedado de la misma altura, guardando la misma posición relativa (%) de espacio con los bordes inferior y superior (15% de espacio abajo, 85% arriba)\n\nEjemplo de resolución de problemas\nTenemos el indicador ese con la posición relativa al centro del canvas\n\nPor lo que al estrechar la pantalla, queda fuera de la escena\n\nTenemos algunas opciones a considerar\nPodemos poner las anclas en el centro de la pieza, de esa forma, siempre mantendrá una posición dentro de la pantalla\nLa parte negativa es que, al estar a un lado del canvas, el porcentaje que deja a la izquierda es menor que a la derecha, por lo que al final\nPor lo que pasa de estar centrado en el hueco\n\nA estar cada vez más alejado de la pantalla\n\nEso nos lleva al siguiente punto, si lo que queremos es mantenerlo cerca de la pantalla, podemos guardar la relación entre ellos\nDe esta forma, la distancia entre el elemento y el borde del monitor siempre será un 9% del total del canvas\n\nDa un poco mejor resultado, pero sigue alejándose mucho\n\nAdemás, esta solución solo está funcionando porque se está aplicando sobre un contendor, si tuvieramos una imagen, esta estaría deformándose\n\n\nProbablemente una de las mejores opciones por las que podemos optar es esta\nToma como referencia el espacio que hay entre el borde del monitor y el elemento sin deformar\n"},"Unity/6--GUI/Scroll":{"title":"Scroll","links":[],"tags":[],"content":"Jerarquía\n\nEsta es la jerarquía necesaria para tener un menú con scroll\nScrollList - Es el GameObject que hace de marco y lo conecta todo, tiene como componente ScrollRect que asociará el Viewport con la Scrollbar (sus dos hijos)\n\nViewport - Representa el límite visible de la lista, lo que se salga de esa imagen con mascara no se verá (contiene los componentes Image y Mask)\nContenido - Como hijo de Viewport, tenemos a Contenido, que es el contenedor de todos los items de la lista (contiene los componentes VerticalLayout y ContentSizeFitter - hace que los hijos se ajusten)\n\n\n                  \n                  Importante \n                  \n                \n\nMarcar el Pivot Y de Contenido a 1 para que los items caigan desde arriba de la lista en lugar de empezar en el centro\n\n\n\nDentro de contenido ya podemos poner tantos items como queramos y con el formato que queramos"},"Unity/7--Particulas/Dar-tamaño-a-particula":{"title":"Dar tamaño a particula","links":[],"tags":[],"content":"Es lo normal, las partículas tienden a tener forma cuadrada (o eso creo). Pero se puede cambiar con el Start size 3D"},"Unity/7--Particulas/Problemas-con-particulas-Unity/Partícula-detrás-de-GameObject":{"title":"Partícula detrás de GameObject","links":["tags/WIP"],"tags":["WIP"],"content":"WIP"},"Unity/7--Particulas/Propiedades-de-las-partículas-(configuraciones)":{"title":"Propiedades de las partículas (configuraciones)","links":[],"tags":[],"content":"Menu Particle System\nAlgunos de estos valores tiene una flechita a la derecha para aleatorizar la cosa.\nDuration: Segundos que dura un ciclo, si quitas el loop, una vez pasados dichos segundo, dejarán de aparecer nuevas particulas.\nPrewarm: (necesario tener Looping activado) Para que al comenzar, aparezcan ya las primeras partículas en vez de esperar a que se vayan generando.\nStart lifetime: tiempo inicial que durará cada particula antes de desaparecer. (ese inicial me da que pensar que tal vez haya algún valor que permita aumentar después el tiempo de vida según las partículas se reproducen).\nStart speed: Velocidad.\n3D start size: escalar en x, y o z.\nStart size: escalar en todos los ejes simultáneamente.\nStart color: Seleccionas el color (no tinte) inicial de la particula. Cuidado porque este color se mezclará con lo que selecciones en Color over lifetime.\nFlip rotation: Causa que algunas partículas roten en el sentido opuesto.\nGravity: Para aplicar físicas.\nSimulation space: \n\n\nLocal: Controla si las particulas se animan con el espacio local del objeto, por tanto con el objeto padre. \n\n\nWorld: lo mismo pero en el espacio del mundo.\n\n\nCustom: Relativo a un objeto personalizado (se mueve con un objeto de tu elección).\n\n\nScaling mode:\n\n\nLocal: Solo aplica la escalo del transform del sistema de partículas ignorando cualquier padre.\n\n\nShape: Aplica la escala de la posición inicial de las partículas pero no afecta a su tamaño.\n\n\nEmitter velocity: Si el sistema de partículas está en movimiento qué se debe usar para calcular la velocidad, el Rigidbody o el transform?\nStop action: Cuando acabe el ciclo, qué debe ocurrir con el sistema de particulas?\nShape\nForma en la que se esparcen las particulas. Aquí también se controla el tamaño, la posición y rotación de las particulas\nShape: Las particulas se repartiran equitativamente en la forma seleccionada.\nObviando las evidentes:\nSprite: Se esparcirá en la forma del sprite\n\n\n\n\n                  \n                  La textura tiene que estar en modo Sprite (2D and UI)\n                  \n                \n\nMesh / Mesh renderer: Las particulas se dirigirán en dirección a las normales de las caras y saliendo de la propia malla\n\nAlign to direction: Rotadas en la dirección a la que se mueven. Solo se pueden ver si las partículas van en dirección a ti.\nRandomize direction: direcciones aleatorizadas\nEmission\nRate over time: Cantidad de partículas que se generan por segundo.\nColor over lifetime\nAplica un tinte entre el inicio y el fin de la vida de la partícula.\nRenderer\nComo la mayoría de cosas en Unity, necesitamos un Material\nRender mode\n\n\nBillboard: Las particulas se renderizan como un “cartel” (entiendo que planas) y se apuntarán a donde le indiquemos en render alignment.\n\n\nStretch billboard: Las particulas siempre apuntan a cámara y les puedes aplicar un escalado.\n\n\nHorizontal Billboard: Igual que billboard pero perpendicular al suelo.\n\n\nVertical Billboard: Alineado con la Y del mundo y apuntando a cámara.\n\n\nMesh: Las particulas se renderizan en base a una malla 3D.\n\n\nParticulas renderizandose a partir de la malla del cuerpo de Amatista\n\nRender alignment\n\n\nView: Las partículas siempre apuntarán a cámara.\n\n\nLocal: Las partículas estarán alineadas con el transform.\n\n\nWorld: Las partículas estarán alineadas con el eje del mundo.\n\n\nFacing: Según el manual de Unity 2020.3, las particulas apuntarán a la posición directa del GameObject de la cámara (no entiendo).\n\n\nVelocity: Las partículas apuntan hacia su velocidad.\n\n\nPivot\nUtil para si quieres añadirle un offset."},"Unity/7--Particulas/Textura-y-material-para-particulas":{"title":"Textura y material para particulas","links":[],"tags":[],"content":"\n"},"Unity/8--Mates/Operación-Dot-(producto-escalar)":{"title":"Operación Dot (producto escalar)","links":[],"tags":[],"content":"Aplica el producto escalar entre dos vectores"},"Unity/9--Trucos-de-Unity/Atajos-Shortcuts":{"title":"Atajos Shortcuts","links":[],"tags":[],"content":"Ctrl + K ⇒ Permite buscar en toda la jerarquía | esto también te permite buscar aquello que está roto (missing script p.e.)"},"Unity/9--Trucos-de-Unity/Compilar-no-pare-la-ejecución":{"title":"Compilar no pare la ejecución","links":[],"tags":[],"content":"En Edit &gt; Preferences &gt; General &gt; Script Changes While Playing\n\nKeywords\nPlaymode play ejecucion compilacion parar pare para"},"Unity/9--Trucos-de-Unity/Escalar-con-canvas":{"title":"Escalar con canvas","links":[],"tags":[],"content":""},"Unity/9--Trucos-de-Unity/GameObjects-origen-(0,-0,-0)-por-defecto":{"title":"GameObjects origen (0, 0, 0) por defecto","links":[],"tags":[],"content":"En Edit &gt; Preferences &gt; Scene View &gt; Create Objects at Origin\n\nKeywords\nCentrar descentrado offset nuevo objecto crear centro punto medio"},"Unity/9--Trucos-de-Unity/Materiales-también-prefab":{"title":"Materiales también prefab","links":[],"tags":[],"content":"A partir de la versión 2022 de Unity, podemos crear materiales de la misma forma que creamos prefabs, con herencia incluída"},"Unity/9--Trucos-de-Unity/Que-se-vean-los-eventos-en-el-inspector":{"title":"Que se vean los eventos en el inspector","links":[],"tags":[],"content":"Para añadir funciones a UnityEvents por código y salgan en el inspector: \nUnityEventTools.AddPersistentListener(unityEvent, function)\nNo tiene pinta de que sirva durante la ejecución\nPero sirve para hacer herramientas de Unity\nBibliografía\nAdri"},"Unity/9--XR-Unity/Introducción-a-la-realidad-aumentada":{"title":"Introducción a la realidad aumentada","links":[],"tags":[],"content":"Antes de comenzar creo que debes tener instalado Servicios de Google Play para RA (o un nombre parecido)  y tal vez ARCore Elements \nUnity provee una plantilla que puedes descargar de Unity Hub y viene ajustes hechos, librerias instaladas y 3 Gameobjects preestablecidos: el sol, y 3 específicos relacionados con el AR: AR Session, AR Session Origin y la cámara AR y que veremos más tarde\n\nAjustes\nPor defecto tiene ciertos ajustes hechos y que se pueden modificar en Edit &gt; Project Settings y son los siguientes:\n\nXR significa Xtended Reality y es la forma en la que Unity se refiere tanto a Realidad aumentada como Realidad virtual\nAhí vamos a Android y activamos ARCore (la biblioteca AR de Google)\n\n\n\n                  \n                  Es crucial que esto esté activado \n                  \n                \n\n\n\n\nEl API de Android debe ser, como mínimo, 24. El Scripting Backend debe ser IL2CPP y la arquitectura objectivo debe contener ARM64 (Si por algún ajuste no funcionase, compararlos con los del tipo del vídeo en la bibliografía o aquí)\nProjectSettings &gt; Player &gt; Other Settings\n\nEl tipo recomienda actualizar todos package relacionados con XR / AR\n\nLa escena\n\nEl GO AR Session contiene un script de mismo nombre que controla el ciclo de vida de la aplicación AR, por lo que es fundamental que esté\n\nEl AR Session Origin se encarga de mapear el mundo real y situar en él los objectos creados (el tipo cree que en el futuro se llamará XR Session Origin)\n\n\n                  \n                  ACTUALIZACIÓN Dic &#039;23 \n                  \n                \n\nEl tipo tenía razón, sin embargo, en este momento todavía se descarga obsoleto, arreglarlo es fácil porque funciona idéntico\n\n\nEl tipo elimina todos los componentes a excepción de AR Session Original ya que son extensiones que no quiere emplear para su ejemplo, pero en la realidad, tal vez los necesites si lo que te has planteado lo requiere.\nEn su lugar añade AR Tracked Image Manager esto detectará una imagen del mundo real y situará ahí nuestro GameObject\n\nDetección de imágenes\nEl componente que hemos añadido en el apartado anterior, el que reconoce imagenes, busca en base a una librería que deberemos crear con Create &gt; XR &gt; Reference Image Library\n\n\nPonerle las dimensiones no es obligatorio pero mejora la detección\n\nEvidentemente le pasamos la librería que acabamos de crear al origin\n\nPrefabs\nDeben ser 100 veces más pequeños de lo planeado. scale = 0.01\n¿Qué imágenes son válidas?\nLa resolución de las imágenes debe ser de al menos 300x300. Las imágenes HD NO mejoran el rendimiento.\nEl color es irrelevante\nEvitar alta compresión de imagen\nLa herramienta arcoreimg del SDK de ARCore te indica la calidad de la imagen. Recomendado mínimo 75. Esta app está en\nC:\\Users\\&lt;username&gt;\\Documents\\Unity Projects\\&lt;projectname&gt;\\Library\\PackageCache\\com.unity.xr.arcore@5.0.7\\Tools~\\Windows\n\n\n¿Qué limitaciones tienen las bases de datos?\nSolo puedes seguir hasta 20 imágenes simultáneamente\nCódigo / Creando el efecto\nEl tipo pega el código y si lo quieres descargar lo tiene super escondido por ahí, ahora se puede descargar desde mi Drive aquí\nBibliografía\nAugmented Reality (AR) tutorial for beginners using Unity 2022\nMejores prácticas imágenes de seguimiento: developers.google.com/ar/develop/augmented-images\nKeywords\nAugmented reality AR"},"Unity/9--XR-Unity/Introducción-a-la-realidad-virtual-Virtual-Reality-VR":{"title":"Introducción a la realidad virtual Virtual Reality VR","links":[],"tags":[],"content":"Introducción\nEste tutorial está pensado para Unity XR Toolkit 2022 y fue publicado en julio de 2022\nActivar VR\nEdit &gt; Project Settings &gt; XR Plugin Management\nPara abarcar el máximo número de gafas posible, tendremos que seleccionar Open XR en Desktop y en Android\nSeleccionamos OpenXR\n\nY configuramos el perfil de interacción en la pestaña Desktop\n\nY añadimos un montón\n\nTambién en Android, pero aquí solo pone Oculus\n\nYa se puede ver las escena en las gafas, pero no reconoce el movimiento de la cabeza\n\nPara ello, deberemos incluir el componente Tracked Pose Driver en algún GameObject (él lo pone en la cámara)\n\nAdicionalmente, para poder probarlo en el editor de Unity, deberás configurar el ordenador para que las gafas \nNo estoy seguro de que explique cómo se hace, lo dice aquí\nAcelerando las pruebas\nAhora se descarga Unity XR Interaction Toolkit\n\nAhora sustituye la camara original por un XR Origin y lo ubica en el centro (0, 0, 0)\n\nHace esto porque ahora tiene lo mismo que antes pero con muchas más cosas\nY descarga el Asset Starter del toolkit\n\nControles\nDentro del Camera Offset crear un GO vacío que llama “Left hand”\nY le añade un componente XR Controller\n\nLo duplica como “Right hand”\n\nPone los presets correspondientes (que nos descargamos del toolkit) en cada mano\n\nEn el XR Origin le añade el componente Input Action Manager\n\nY le arrastra el Default Input Actions del Toolkit\n\nA cada mano, le pone cubitos pequeños en el (0, 0, 0) quitando los colliders para que no colisionen\n\nY ya tiene manitas\n\nBibliografía\nHow to make a VR game - Unity XR Toolkit 2022\nHow to Make a VR Game in Unity - PART 1"},"Unity/Escenas/Escenas":{"title":"Escenas","links":[],"tags":[],"content":"Las escenas son contenedores de GameObjects\nSe pueden ejecutar 2 escenas simultáneamente, siempre y cuando, compartan jerarquía"},"Unity/Herramientas/ACU-Multilan-(herramienta-de-tradución-de-Diru)-2022.10.20":{"title":"ACU Multilan (herramienta de tradución de Diru) 2022.10.20","links":[],"tags":[],"content":"Preámbulos\nEl pack se compone del código base y el editor\nWindow\nLa ventana de edición se puede acceder desde Window &gt; Multilanguage\nProcedimiento\nPrimero creamos el idioma introduciendo el código de identificación y click en Nuevo idioma\n\nAhora creamos un archivo para ese idioma, que será el que contenga las traducciones\nLe damos un nombre descriptivo y click en Nuevo archivo\n\nTérmino se refiere variables inteligentes. e.g: have_{apple}_apples → Tengo 2 manzanas\nSentencia se refiere a oraciones simples. e.g: camera_speed → Velocidad de cámara\n\nClick en guardar\nY, alternativamente, guardado automático\n\nEste check permite la transferencia de la carpeta de traducciones a Streaming Assets para que los usuarios finales puedan crear o editar los idiomas existentes\n\nBugs\n\n\nEn la ventana de creación de términos, si clicas en la escena y vuelves, se reinicia. (para replicarlo, crear un nuevo término, click en la escena, click en la ventana Multilanguage)\n\n\nAutoguardado no parece tener efecto tampoco y si se recarga la vista (Bug 1) sin haber clicado al botón Guardar, no se guarda automáticamente\n\n\nAl cambiar de archivo, parece que sí ha autoguardado\n\n\nPermitir al usuario generar la carpeta de traducciones dónde prefiera\n\n"},"Unity/Herramientas/Character-Controller":{"title":"Character Controller","links":[],"tags":[],"content":"El personaje no resbala\nResulta que charController.isGrounded y el slope limit funcionan regular, así que sugiere sustituir estas funciones por las nuestras.\nEsta persona se basa en el funcionamiento de su controller disponible en GitHub donde hace cosas muy locas\nNecesitamos las siguientes propiedades\npublic float slopeLimit = 0.2f;\npublic float slideFriction = 0.3f; \npublic Vector3 hitNormal;\nBásicamente obtiene las normales de la colisión del character controller con cualquier cosa\nvoid OnControllerColliderHit (ControllerColliderHit hit) {\n    hitNormal = hit.normal;\n}\nComprobamos la inclinación del suelo, aunque previamente habría que comprobar si estamos en el suelo con ayuda de un Raycast\nisGrounded = (Vector3.Angle (Vector3.up, hitNormal) &lt;= slopeLimit);\njunto con el Raycast quedaría así:\nisGrounded = Physics.SphereCast(new Ray(transform.position + Vector3.up * raycastheight, Vector3.down), raycastRadius, out RaycastHit hit, raycastLength) &amp;&amp; (Vector3.Angle(Vector3.up, hitNormal) &lt;= slopeLimit);\nUna vez tenemos esos dos valores (el grounded correcto y la normal con el suelo) deberíamos aplicar un aumento de la velocidad en dirección hacia la normal para que el jugador empiece a resbalar:\nif (!grounded)\n{\n     dir.x += (1f - hitNormal.y) * hitNormal.x * (1f - slideFriction);\n     dir.z += (1f - hitNormal.y) * hitNormal.z * (1f - slideFriction);\n }\nBibliografía\nAurimasBlazulionis nos lo explica aquí"},"Unity/Herramientas/Herramientas-tools":{"title":"Herramientas tools","links":[],"tags":[],"content":"Prototipado\nPrototyping Pack 3D Prototipado escenas Unity (free)\nThird Person Character CharacterController Controller Caracter (free) \nFirst Person Character CharacterController Controller Caracter (free)\nParticle Pack Oficial (free)\nConsole\nEditor Console Pro (30€)\nIn-game debug console (Yasirkula) - consola pero en build\nToolsForFree: Advanced Runtime Console\nUltimate Console\nComponents\nKinematic Character Controller\nShaders\nURP simple toon shader\nToon Shader FX\nSimple Toon (Shader)\nBibliografía\nBEST Unity Tools to Get Started - Samyam \nUnity Technologies\nKeywords\nHerramientas tools Asset Store tienda recursos resorces Prototyping Prototypado Prototipado"},"Unity/Herramientas/Localization":{"title":"Localization","links":["Unity/12--Ejemplos-de-Unity/Obtener-una-traducción-usando-Localization-de-Unity","Unity/12--Ejemplos-de-Unity/Selección-de-idioma-Dropdown"],"tags":[],"content":"Configuración inicial\nEn el Package Manager, si no lo encuentras buscando, le das a Add package from git URL y pones com.unity.localization\nEntonces ahora existirá Project Settings &gt; Localization dónde deberás crear un archivo de configuración\n\nEntonces crear un locale por cada idioma que necesites\n\nSeleccionar el idioma por defecto con Specific Locale Selector &gt; Locale Id y más abajo Project Locale Identifier\n\nLocalizar un asset\nSirve para que se ponga, por ejemplo un audio en un idioma en concreto o una bandera en un selector. Para ello se usan Tablas de Asset (Asset tables)\nCreamos una nueva tabla desde la ventana Window &gt; Asset Management &gt; Localization Tables. Ahí en la pestaña New Table Collection seleccionamos para qué idiomas está disponible dicho asset, seleccionamos Asset Table Collection del desplegable Type y en el campo Name le damos un nombre descriptivo, seleccionamos crear y elegimos un directorio\n\nExisten otras formas de hacerlo, pero en este caso usaremos sistemas Localized Property Variant para no tener que escribir ningún script\nEntonces vamos a Window &gt; Asset Management &gt; Localization Scene Controls y selecciona el Asset Table y haz click en Track changes. Iremos cambiando el idioma y arrastramos el asset correspondiente al GameObject donde se usará (magic).\n\nUna vez hecho esto, si ejecutamos la escena, nos saldrá un selector de idioma y la bandera cambiará correspondientemente\nPara deshabilitar este menú, simplemente hay que ir a Edit &gt; Preferences &gt; Localization y deshabilitar Locale Game View Menu\nPara ver cómo localizar audio, click en este enlace\nTexto estático (el de los menús)\nCrea una String Table Collection\n\nAdemás de cambiar el texto, también podrías hacer otros cambios como de fuente (podria ser importante para textos no ASCII, como el egipcio antiguo\nFunciona igual que las banderas pero seleccionando la String Table\n\nTexto dinámico (el que usa variables)\nAl igual que el estático, hay que crear una tabla de strings o utilizar una que ya tengamos\nHay varias formas de hacerlo, global o local.\nLocal\nDeberemos buscar el componente Game Object Localizer y agregar una nueva Local Variable\nAl contrario de lo que dice la guía de Unity, el script no tiene por qué estar en el mismo GameObject, pero sí tener una referencia al componente como veremos 2 imágenes más abajo\n\nDebe ser de tipo Object Reference para que pueda leer la String\n\n\n\n                  \n                  Es fundamental que se arrastre el componente y no el GameObject que lo contiene, como hacemos de normal\n                  \n                \n\nPara ver qué hay que escribir para añadir las variables, al final, ahora veremos las globales porque se usan en el ejemplo final\nGlobal\nPara poder incluir variables globales, vamos a crear un nuevo Asset. Botón derecho &gt; Create &gt; Localization &gt; Variables Group \nLo editamos desde el Inspector añadimos variable de String para una variable estática de texto u Object Reference para alojar un Script (variables del código). Esto último no me ha funcionado, debe estar bug porque sino, para qué existe si quiera. Lo que me ocurría es que tras asignarlo, me desaparecía.\nEntonces iremos a Project Settings &gt; Localization \nDesplegamos String Database y dentro de este Smart Format y damos a + en Global Variables\nDamos nombre y arrastramos el archivo que acabamos de crear\n\n\nY de la misma forma que llevamos añadiendo idiomas (con el Track Changes y demás, mirar Localizar un Asset en (esta misma página)). pero esta vez le añadimos las variables de la siguiente forma:\nReutilizar un campo traducido\nMe refiero a una traducción ya almacenada (p.e. “atrás” lo tienes traducida ya a varios idiomas).\nEn la ventana Window &gt; Asset Management &gt; Localization Tables tenemos las traducciones y la clave correspondiente, por ejemplo:\n\nDicho código lo podremos poner en un GameObject Text de la siguiente forma:\nEn el Text recién creado, le damos botón derecho en el componente de texto y hacemos click en Localize. Esto creará una serie de cosas automáticamente, entre ellas, el componente que nos interesa: Localize String Event\n\nEn dicho componente, tendremos que seleccionar del desplegable String Reference y dentro de la sección que corresponda (Las secciones son String Tables de las cuales hemos hablado aquí, pero más concretamente aquí) y dentro, la clave de la que hablabamos, teniendo en cuenta, si es el caso, de añadir las dependencias de las que hemos hablado anteriormente\n\nAcceder a una traducción desde código\nEjemplo aquí\nSelección de idioma\nEjemplo disponible aquí\nBuild\nPara poder hacer la build hace falta componer los Addressables. \nWindow &gt; Asset Management &gt; Addressables &gt; Groups\n\nY ahí Build &gt; New Build &gt; Default Build Script\n\nBibliografía\ndocs.unity3d.com/Packages/com.unity.localization@1.0/manual/QuickStartGuideWithVariants.html"},"Unity/Lo-básico":{"title":"Lo básico","links":[],"tags":[],"content":"EXTREMADAMENTE IMPORTANTE\nPara que un gameobject detecte eventos necesita un collider\nPara que el collider detecte eventos, necesita un rigidbody\nthis hace referencia al componente Script\nEn el inspector, en el componente Transform, si le pulsar reset, el gameobject seleccionado se posicionará en las coordenadas (0, 0, 0)\nClase 8\nEl GameObject es la unidad básica dentro del juego, todo son GameObjects.\nUn GameObject está compuesto de un componente\nClase 9\nLos layers sirven para diferentes tipos de interactividades dentro del sistema de layers de Unity\nClase 14\nLa unidad de medida de Unity son los metros (cuando te mueves una casilla en la cuadricula, te mueves 10 metro)\nEn la herramienta arriba derecha de escena (brújula) pulsando en el cuadrado central, pasa a vista isométrica, con el candado, te quita la posibilidad de rotar la vista.\nClase 15 (Centro y pivote)\nEs el botón en la barra de herramientas después de las de rotar desplazar y blabla\nPara cuando tienes más de un gameobject seleccionado centro te daría el centro de la estructura, pivote te daría el centro del gameobject principal\nClase 16 (Local o global)\nlocal es la posibilidad de mover el objeto y rotarlo como entidad propia, sin embargo en global, se mueve en base a la escena, es decir, aunque el objeto esté rotado, si estás en global, solo podrás moverlo en paralelo (y perpendicular) a la escena (se entiende mejor probando)\nClase 17\nEl inspector puede fijar una vista, con el candado arriba derecha, es decir, pulsas ese candado y puedes pulsar otro gameobject, que se seguirá viendo aquel que bloqueaste\nClase 18\nLo más importante es la gestión de resoluciones y los Stats\nClase 27\nSe puede copiar un componente en otro gameObject\nClase 156\nLa propiedad isTrigger del componente Collider lanza un mensaje cuando otro Collider choca contra este"},"Unity/Motor/Atajos-de-teclado":{"title":"Atajos de teclado","links":[],"tags":[],"content":"Utilidades básicas (QWERTY):\nQ: Mover escena\nW: Mover objeto\nE: Rotar \n… (etc)\nBotón central: Moviemiento 2D (arriba abajo derecha izquierda)\nBotón derecho: Rotar 360 sobre el punto en el que te encuentres\nRueda: Zoom\nAlt + Btn Derecho: zoom\nAlt + Btn Izq: Orbitar objeto\nDoble click en game object: te hace tp\nCtrl + P: Play / Stop\nF: (Con un objeto seleccionado) hace un zoom"},"Unity/Unity-index":{"title":"Unity index","links":["Unity/3--Programación/Asincronía-en-Unity-Async-Wait","Unity/4--Eficiencia-y-optimización/Optimizaciones-en-Unity","Unity/12--Ejemplos-de-Unity/Ejemplo-corrutina"],"tags":[],"content":"Asincronía en Unity Async Wait\nOptimizaciones en Unity\nEjemplos Unity\nEjemplo corrutina"}}